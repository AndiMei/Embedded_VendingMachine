
Vending_Machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08003c58  08003c58  00013c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d78  08003d78  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003d78  08003d78  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d78  08003d78  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d78  08003d78  00013d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d7c  08003d7c  00013d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000078  08003df8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08003df8  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba5f  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001deb  00000000  00000000  0002bb00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd0  00000000  00000000  0002d8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc8  00000000  00000000  0002e5c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000154a2  00000000  00000000  0002f188  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009adc  00000000  00000000  0004462a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007759b  00000000  00000000  0004e106  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c56a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c0  00000000  00000000  000c571c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c40 	.word	0x08003c40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003c40 	.word	0x08003c40

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f001 fa8a 	bl	8001668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f810 	bl	8000178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f91e 	bl	8000398 <MX_GPIO_Init>
  MX_ADC1_Init();
 800015c:	f000 f868 	bl	8000230 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000160:	f000 f8f0 	bl	8000344 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000164:	f000 f8a2 	bl	80002ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  myTask_init();
 8000168:	f000 fab2 	bl	80006d0 <myTask_init>
  HAL_TIM_Base_Start_IT(&htim2);
 800016c:	4801      	ldr	r0, [pc, #4]	; (8000174 <main+0x28>)
 800016e:	f002 fc9e 	bl	8002aae <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000172:	e7fe      	b.n	8000172 <main+0x26>
 8000174:	200000d8 	.word	0x200000d8

08000178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b094      	sub	sp, #80	; 0x50
 800017c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000182:	2228      	movs	r2, #40	; 0x28
 8000184:	2100      	movs	r1, #0
 8000186:	4618      	mov	r0, r3
 8000188:	f003 f940 	bl	800340c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018c:	f107 0314 	add.w	r3, r7, #20
 8000190:	2200      	movs	r2, #0
 8000192:	601a      	str	r2, [r3, #0]
 8000194:	605a      	str	r2, [r3, #4]
 8000196:	609a      	str	r2, [r3, #8]
 8000198:	60da      	str	r2, [r3, #12]
 800019a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001a8:	2301      	movs	r3, #1
 80001aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b2:	2300      	movs	r3, #0
 80001b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b6:	2301      	movs	r3, #1
 80001b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ba:	2302      	movs	r3, #2
 80001bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ce:	4618      	mov	r0, r3
 80001d0:	f001 ff70 	bl	80020b4 <HAL_RCC_OscConfig>
 80001d4:	4603      	mov	r3, r0
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d001      	beq.n	80001de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001da:	f000 f967 	bl	80004ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001de:	230f      	movs	r3, #15
 80001e0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e2:	2302      	movs	r3, #2
 80001e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f0:	2300      	movs	r3, #0
 80001f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f4:	f107 0314 	add.w	r3, r7, #20
 80001f8:	2102      	movs	r1, #2
 80001fa:	4618      	mov	r0, r3
 80001fc:	f002 f9da 	bl	80025b4 <HAL_RCC_ClockConfig>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000206:	f000 f951 	bl	80004ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800020a:	2302      	movs	r3, #2
 800020c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800020e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000212:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	4618      	mov	r0, r3
 8000218:	f002 fb68 	bl	80028ec <HAL_RCCEx_PeriphCLKConfig>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000222:	f000 f943 	bl	80004ac <Error_Handler>
  }
}
 8000226:	bf00      	nop
 8000228:	3750      	adds	r7, #80	; 0x50
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
	...

08000230 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000240:	4b18      	ldr	r3, [pc, #96]	; (80002a4 <MX_ADC1_Init+0x74>)
 8000242:	4a19      	ldr	r2, [pc, #100]	; (80002a8 <MX_ADC1_Init+0x78>)
 8000244:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000246:	4b17      	ldr	r3, [pc, #92]	; (80002a4 <MX_ADC1_Init+0x74>)
 8000248:	2200      	movs	r2, #0
 800024a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800024c:	4b15      	ldr	r3, [pc, #84]	; (80002a4 <MX_ADC1_Init+0x74>)
 800024e:	2200      	movs	r2, #0
 8000250:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000252:	4b14      	ldr	r3, [pc, #80]	; (80002a4 <MX_ADC1_Init+0x74>)
 8000254:	2200      	movs	r2, #0
 8000256:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000258:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <MX_ADC1_Init+0x74>)
 800025a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800025e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000260:	4b10      	ldr	r3, [pc, #64]	; (80002a4 <MX_ADC1_Init+0x74>)
 8000262:	2200      	movs	r2, #0
 8000264:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000266:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <MX_ADC1_Init+0x74>)
 8000268:	2201      	movs	r2, #1
 800026a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800026c:	480d      	ldr	r0, [pc, #52]	; (80002a4 <MX_ADC1_Init+0x74>)
 800026e:	f001 fa7f 	bl	8001770 <HAL_ADC_Init>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000278:	f000 f918 	bl	80004ac <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800027c:	2300      	movs	r3, #0
 800027e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000280:	2301      	movs	r3, #1
 8000282:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	4619      	mov	r1, r3
 800028c:	4805      	ldr	r0, [pc, #20]	; (80002a4 <MX_ADC1_Init+0x74>)
 800028e:	f001 fb47 	bl	8001920 <HAL_ADC_ConfigChannel>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000298:	f000 f908 	bl	80004ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800029c:	bf00      	nop
 800029e:	3710      	adds	r7, #16
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	200000a8 	.word	0x200000a8
 80002a8:	40012400 	.word	0x40012400

080002ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b086      	sub	sp, #24
 80002b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002b2:	f107 0308 	add.w	r3, r7, #8
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c0:	463b      	mov	r3, r7
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002c8:	4b1d      	ldr	r3, [pc, #116]	; (8000340 <MX_TIM2_Init+0x94>)
 80002ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 80002d0:	4b1b      	ldr	r3, [pc, #108]	; (8000340 <MX_TIM2_Init+0x94>)
 80002d2:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80002d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002d8:	4b19      	ldr	r3, [pc, #100]	; (8000340 <MX_TIM2_Init+0x94>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3;
 80002de:	4b18      	ldr	r3, [pc, #96]	; (8000340 <MX_TIM2_Init+0x94>)
 80002e0:	2203      	movs	r2, #3
 80002e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002e4:	4b16      	ldr	r3, [pc, #88]	; (8000340 <MX_TIM2_Init+0x94>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ea:	4b15      	ldr	r3, [pc, #84]	; (8000340 <MX_TIM2_Init+0x94>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002f0:	4813      	ldr	r0, [pc, #76]	; (8000340 <MX_TIM2_Init+0x94>)
 80002f2:	f002 fbb1 	bl	8002a58 <HAL_TIM_Base_Init>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002fc:	f000 f8d6 	bl	80004ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000304:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000306:	f107 0308 	add.w	r3, r7, #8
 800030a:	4619      	mov	r1, r3
 800030c:	480c      	ldr	r0, [pc, #48]	; (8000340 <MX_TIM2_Init+0x94>)
 800030e:	f002 fcf9 	bl	8002d04 <HAL_TIM_ConfigClockSource>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000318:	f000 f8c8 	bl	80004ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800031c:	2300      	movs	r3, #0
 800031e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000320:	2300      	movs	r3, #0
 8000322:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000324:	463b      	mov	r3, r7
 8000326:	4619      	mov	r1, r3
 8000328:	4805      	ldr	r0, [pc, #20]	; (8000340 <MX_TIM2_Init+0x94>)
 800032a:	f002 fec7 	bl	80030bc <HAL_TIMEx_MasterConfigSynchronization>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000334:	f000 f8ba 	bl	80004ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000338:	bf00      	nop
 800033a:	3718      	adds	r7, #24
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	200000d8 	.word	0x200000d8

08000344 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000348:	4b11      	ldr	r3, [pc, #68]	; (8000390 <MX_USART2_UART_Init+0x4c>)
 800034a:	4a12      	ldr	r2, [pc, #72]	; (8000394 <MX_USART2_UART_Init+0x50>)
 800034c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800034e:	4b10      	ldr	r3, [pc, #64]	; (8000390 <MX_USART2_UART_Init+0x4c>)
 8000350:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000354:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000356:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <MX_USART2_UART_Init+0x4c>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800035c:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <MX_USART2_UART_Init+0x4c>)
 800035e:	2200      	movs	r2, #0
 8000360:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000362:	4b0b      	ldr	r3, [pc, #44]	; (8000390 <MX_USART2_UART_Init+0x4c>)
 8000364:	2200      	movs	r2, #0
 8000366:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000368:	4b09      	ldr	r3, [pc, #36]	; (8000390 <MX_USART2_UART_Init+0x4c>)
 800036a:	220c      	movs	r2, #12
 800036c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800036e:	4b08      	ldr	r3, [pc, #32]	; (8000390 <MX_USART2_UART_Init+0x4c>)
 8000370:	2200      	movs	r2, #0
 8000372:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <MX_USART2_UART_Init+0x4c>)
 8000376:	2200      	movs	r2, #0
 8000378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800037a:	4805      	ldr	r0, [pc, #20]	; (8000390 <MX_USART2_UART_Init+0x4c>)
 800037c:	f002 fef4 	bl	8003168 <HAL_UART_Init>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000386:	f000 f891 	bl	80004ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	20000118 	.word	0x20000118
 8000394:	40004400 	.word	0x40004400

08000398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b088      	sub	sp, #32
 800039c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039e:	f107 0310 	add.w	r3, r7, #16
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ac:	4b3b      	ldr	r3, [pc, #236]	; (800049c <MX_GPIO_Init+0x104>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a3a      	ldr	r2, [pc, #232]	; (800049c <MX_GPIO_Init+0x104>)
 80003b2:	f043 0310 	orr.w	r3, r3, #16
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b38      	ldr	r3, [pc, #224]	; (800049c <MX_GPIO_Init+0x104>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0310 	and.w	r3, r3, #16
 80003c0:	60fb      	str	r3, [r7, #12]
 80003c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003c4:	4b35      	ldr	r3, [pc, #212]	; (800049c <MX_GPIO_Init+0x104>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a34      	ldr	r2, [pc, #208]	; (800049c <MX_GPIO_Init+0x104>)
 80003ca:	f043 0320 	orr.w	r3, r3, #32
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b32      	ldr	r3, [pc, #200]	; (800049c <MX_GPIO_Init+0x104>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f003 0320 	and.w	r3, r3, #32
 80003d8:	60bb      	str	r3, [r7, #8]
 80003da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003dc:	4b2f      	ldr	r3, [pc, #188]	; (800049c <MX_GPIO_Init+0x104>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a2e      	ldr	r2, [pc, #184]	; (800049c <MX_GPIO_Init+0x104>)
 80003e2:	f043 0304 	orr.w	r3, r3, #4
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	4b2c      	ldr	r3, [pc, #176]	; (800049c <MX_GPIO_Init+0x104>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f003 0304 	and.w	r3, r3, #4
 80003f0:	607b      	str	r3, [r7, #4]
 80003f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f4:	4b29      	ldr	r3, [pc, #164]	; (800049c <MX_GPIO_Init+0x104>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a28      	ldr	r2, [pc, #160]	; (800049c <MX_GPIO_Init+0x104>)
 80003fa:	f043 0308 	orr.w	r3, r3, #8
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b26      	ldr	r3, [pc, #152]	; (800049c <MX_GPIO_Init+0x104>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0308 	and.w	r3, r3, #8
 8000408:	603b      	str	r3, [r7, #0]
 800040a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_BLUE_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin 
 800040c:	2200      	movs	r2, #0
 800040e:	f640 71fb 	movw	r1, #4091	; 0xffb
 8000412:	4823      	ldr	r0, [pc, #140]	; (80004a0 <MX_GPIO_Init+0x108>)
 8000414:	f001 fe35 	bl	8002082 <HAL_GPIO_WritePin>
                          |LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin 
                          |LCD_D6_Pin|LCD_D7_Pin|LCD_BKL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800041e:	4821      	ldr	r0, [pc, #132]	; (80004a4 <MX_GPIO_Init+0x10c>)
 8000420:	f001 fe2f 	bl	8002082 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : u500_Pin u1000_Pin */
  GPIO_InitStruct.Pin = u500_Pin|u1000_Pin;
 8000424:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000428:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800042a:	2300      	movs	r3, #0
 800042c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800042e:	2301      	movs	r3, #1
 8000430:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000432:	f107 0310 	add.w	r3, r7, #16
 8000436:	4619      	mov	r1, r3
 8000438:	481b      	ldr	r0, [pc, #108]	; (80004a8 <MX_GPIO_Init+0x110>)
 800043a:	f001 fcb1 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB_PROCESS_Pin PB_CANCEL_Pin */
  GPIO_InitStruct.Pin = PB_PROCESS_Pin|PB_CANCEL_Pin;
 800043e:	2330      	movs	r3, #48	; 0x30
 8000440:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000442:	2300      	movs	r3, #0
 8000444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000446:	2301      	movs	r3, #1
 8000448:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044a:	f107 0310 	add.w	r3, r7, #16
 800044e:	4619      	mov	r1, r3
 8000450:	4814      	ldr	r0, [pc, #80]	; (80004a4 <MX_GPIO_Init+0x10c>)
 8000452:	f001 fca5 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin 
                           LCD_RS_Pin LCD_E_Pin LCD_D4_Pin LCD_D5_Pin 
                           LCD_D6_Pin LCD_D7_Pin LCD_BKL_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin 
 8000456:	f640 73fb 	movw	r3, #4091	; 0xffb
 800045a:	613b      	str	r3, [r7, #16]
                          |LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin 
                          |LCD_D6_Pin|LCD_D7_Pin|LCD_BKL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045c:	2301      	movs	r3, #1
 800045e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000460:	2300      	movs	r3, #0
 8000462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000464:	2302      	movs	r3, #2
 8000466:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000468:	f107 0310 	add.w	r3, r7, #16
 800046c:	4619      	mov	r1, r3
 800046e:	480c      	ldr	r0, [pc, #48]	; (80004a0 <MX_GPIO_Init+0x108>)
 8000470:	f001 fc96 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8000474:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047a:	2301      	movs	r3, #1
 800047c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047e:	2300      	movs	r3, #0
 8000480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000482:	2302      	movs	r3, #2
 8000484:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000486:	f107 0310 	add.w	r3, r7, #16
 800048a:	4619      	mov	r1, r3
 800048c:	4805      	ldr	r0, [pc, #20]	; (80004a4 <MX_GPIO_Init+0x10c>)
 800048e:	f001 fc87 	bl	8001da0 <HAL_GPIO_Init>

}
 8000492:	bf00      	nop
 8000494:	3720      	adds	r7, #32
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40021000 	.word	0x40021000
 80004a0:	40010c00 	.word	0x40010c00
 80004a4:	40010800 	.word	0x40010800
 80004a8:	40011000 	.word	0x40011000

080004ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr

080004b8 <myLCD_init>:
#include "stm32f1xx_hal.h"
#include "main.h"
#include "myLCD.h"
#include <stdio.h>

void myLCD_init(void){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	HAL_Delay(25);
 80004bc:	2019      	movs	r0, #25
 80004be:	f001 f935 	bl	800172c <HAL_Delay>
	myLCD_command(0x33);
 80004c2:	2033      	movs	r0, #51	; 0x33
 80004c4:	f000 f894 	bl	80005f0 <myLCD_command>
	myLCD_command(0x32);
 80004c8:	2032      	movs	r0, #50	; 0x32
 80004ca:	f000 f891 	bl	80005f0 <myLCD_command>
	myLCD_command(0x28);
 80004ce:	2028      	movs	r0, #40	; 0x28
 80004d0:	f000 f88e 	bl	80005f0 <myLCD_command>
	myLCD_command(0x0C);
 80004d4:	200c      	movs	r0, #12
 80004d6:	f000 f88b 	bl	80005f0 <myLCD_command>
	myLCD_command(0x01);
 80004da:	2001      	movs	r0, #1
 80004dc:	f000 f888 	bl	80005f0 <myLCD_command>
}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <myLCD_write4bit>:
void myLCD_write4bit(uint8_t data){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, ((data>>0)&1)? GPIO_PIN_SET:GPIO_PIN_RESET);
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	f003 0301 	and.w	r3, r3, #1
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	461a      	mov	r2, r3
 80004f8:	2120      	movs	r1, #32
 80004fa:	4814      	ldr	r0, [pc, #80]	; (800054c <myLCD_write4bit+0x68>)
 80004fc:	f001 fdc1 	bl	8002082 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, ((data>>1)&1)? GPIO_PIN_SET:GPIO_PIN_RESET);
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	085b      	lsrs	r3, r3, #1
 8000504:	b2db      	uxtb	r3, r3
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	b2db      	uxtb	r3, r3
 800050c:	461a      	mov	r2, r3
 800050e:	2140      	movs	r1, #64	; 0x40
 8000510:	480e      	ldr	r0, [pc, #56]	; (800054c <myLCD_write4bit+0x68>)
 8000512:	f001 fdb6 	bl	8002082 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, ((data>>2)&1)? GPIO_PIN_SET:GPIO_PIN_RESET);
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	089b      	lsrs	r3, r3, #2
 800051a:	b2db      	uxtb	r3, r3
 800051c:	f003 0301 	and.w	r3, r3, #1
 8000520:	b2db      	uxtb	r3, r3
 8000522:	461a      	mov	r2, r3
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	4809      	ldr	r0, [pc, #36]	; (800054c <myLCD_write4bit+0x68>)
 8000528:	f001 fdab 	bl	8002082 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, ((data>>3)&1)? GPIO_PIN_SET:GPIO_PIN_RESET);
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	08db      	lsrs	r3, r3, #3
 8000530:	b2db      	uxtb	r3, r3
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	b2db      	uxtb	r3, r3
 8000538:	461a      	mov	r2, r3
 800053a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800053e:	4803      	ldr	r0, [pc, #12]	; (800054c <myLCD_write4bit+0x68>)
 8000540:	f001 fd9f 	bl	8002082 <HAL_GPIO_WritePin>
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40010c00 	.word	0x40010c00

08000550 <myLCD_send>:

void myLCD_send(_Bool mode, uint8_t data){
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	460a      	mov	r2, r1
 800055a:	71fb      	strb	r3, [r7, #7]
 800055c:	4613      	mov	r3, r2
 800055e:	71bb      	strb	r3, [r7, #6]
	if(mode){ myLCD_RS(1); }
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d005      	beq.n	8000572 <myLCD_send+0x22>
 8000566:	2201      	movs	r2, #1
 8000568:	2108      	movs	r1, #8
 800056a:	4820      	ldr	r0, [pc, #128]	; (80005ec <myLCD_send+0x9c>)
 800056c:	f001 fd89 	bl	8002082 <HAL_GPIO_WritePin>
 8000570:	e004      	b.n	800057c <myLCD_send+0x2c>
	else	{ myLCD_RS(0); }
 8000572:	2200      	movs	r2, #0
 8000574:	2108      	movs	r1, #8
 8000576:	481d      	ldr	r0, [pc, #116]	; (80005ec <myLCD_send+0x9c>)
 8000578:	f001 fd83 	bl	8002082 <HAL_GPIO_WritePin>

	myLCD_write4bit(data>>4);
 800057c:	79bb      	ldrb	r3, [r7, #6]
 800057e:	091b      	lsrs	r3, r3, #4
 8000580:	b2db      	uxtb	r3, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff ffae 	bl	80004e4 <myLCD_write4bit>
	myLCD_E();
 8000588:	2201      	movs	r2, #1
 800058a:	2110      	movs	r1, #16
 800058c:	4817      	ldr	r0, [pc, #92]	; (80005ec <myLCD_send+0x9c>)
 800058e:	f001 fd78 	bl	8002082 <HAL_GPIO_WritePin>
 8000592:	2300      	movs	r3, #0
 8000594:	81fb      	strh	r3, [r7, #14]
 8000596:	e002      	b.n	800059e <myLCD_send+0x4e>
 8000598:	89fb      	ldrh	r3, [r7, #14]
 800059a:	3301      	adds	r3, #1
 800059c:	81fb      	strh	r3, [r7, #14]
 800059e:	89fb      	ldrh	r3, [r7, #14]
 80005a0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d9f7      	bls.n	8000598 <myLCD_send+0x48>
 80005a8:	2200      	movs	r2, #0
 80005aa:	2110      	movs	r1, #16
 80005ac:	480f      	ldr	r0, [pc, #60]	; (80005ec <myLCD_send+0x9c>)
 80005ae:	f001 fd68 	bl	8002082 <HAL_GPIO_WritePin>
	myLCD_write4bit(data);
 80005b2:	79bb      	ldrb	r3, [r7, #6]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff ff95 	bl	80004e4 <myLCD_write4bit>
	myLCD_E();
 80005ba:	2201      	movs	r2, #1
 80005bc:	2110      	movs	r1, #16
 80005be:	480b      	ldr	r0, [pc, #44]	; (80005ec <myLCD_send+0x9c>)
 80005c0:	f001 fd5f 	bl	8002082 <HAL_GPIO_WritePin>
 80005c4:	2300      	movs	r3, #0
 80005c6:	81bb      	strh	r3, [r7, #12]
 80005c8:	e002      	b.n	80005d0 <myLCD_send+0x80>
 80005ca:	89bb      	ldrh	r3, [r7, #12]
 80005cc:	3301      	adds	r3, #1
 80005ce:	81bb      	strh	r3, [r7, #12]
 80005d0:	89bb      	ldrh	r3, [r7, #12]
 80005d2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d9f7      	bls.n	80005ca <myLCD_send+0x7a>
 80005da:	2200      	movs	r2, #0
 80005dc:	2110      	movs	r1, #16
 80005de:	4803      	ldr	r0, [pc, #12]	; (80005ec <myLCD_send+0x9c>)
 80005e0:	f001 fd4f 	bl	8002082 <HAL_GPIO_WritePin>

}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40010c00 	.word	0x40010c00

080005f0 <myLCD_command>:
void myLCD_command(uint8_t data){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	myLCD_send(0, data);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	4619      	mov	r1, r3
 80005fe:	2000      	movs	r0, #0
 8000600:	f7ff ffa6 	bl	8000550 <myLCD_send>
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <myLCD_data>:
void myLCD_data(uint8_t data){
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
	myLCD_send(1, data);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	4619      	mov	r1, r3
 800061a:	2001      	movs	r0, #1
 800061c:	f7ff ff98 	bl	8000550 <myLCD_send>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <myLCD_setCursor>:
void myLCD_setCursor(uint8_t x, uint8_t y){
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	460a      	mov	r2, r1
 8000632:	71fb      	strb	r3, [r7, #7]
 8000634:	4613      	mov	r3, r2
 8000636:	71bb      	strb	r3, [r7, #6]
	if(y==0) {myLCD_command(0x80 + x); }
 8000638:	79bb      	ldrb	r3, [r7, #6]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d105      	bne.n	800064a <myLCD_setCursor+0x22>
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	3b80      	subs	r3, #128	; 0x80
 8000642:	b2db      	uxtb	r3, r3
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff ffd3 	bl	80005f0 <myLCD_command>
	if(y==1) {myLCD_command(0xC0 + x); }
 800064a:	79bb      	ldrb	r3, [r7, #6]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d105      	bne.n	800065c <myLCD_setCursor+0x34>
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	3b40      	subs	r3, #64	; 0x40
 8000654:	b2db      	uxtb	r3, r3
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ffca 	bl	80005f0 <myLCD_command>
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <myLCD_print>:
void myLCD_print(char *pData){
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	while(*pData){
 800066c:	e007      	b.n	800067e <myLCD_print+0x1a>
		myLCD_data(*pData);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ffca 	bl	800060c <myLCD_data>
		pData++;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	3301      	adds	r3, #1
 800067c:	607b      	str	r3, [r7, #4]
	while(*pData){
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d1f3      	bne.n	800066e <myLCD_print+0xa>
	}
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <myLCD_printNum>:
void myLCD_printNum(int16_t number){
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	80fb      	strh	r3, [r7, #6]
	char buff[20];
	sprintf(buff,"%d",number);
 800069a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	4906      	ldr	r1, [pc, #24]	; (80006bc <myLCD_printNum+0x2c>)
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 feb9 	bl	800341c <siprintf>
	myLCD_print(buff);
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ffd8 	bl	8000664 <myLCD_print>
}
 80006b4:	bf00      	nop
 80006b6:	3720      	adds	r7, #32
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	08003c58 	.word	0x08003c58

080006c0 <myLCD_clear>:
void myLCD_clear(void){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	myLCD_command(0x01);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff ff93 	bl	80005f0 <myLCD_command>
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <myTask_init>:
volatile uint8_t i=0,j=0;
_Bool pressed=0;
_Bool toggle=0;
_Bool printEn=0;

void myTask_init(void){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	myLCD_init();
 80006d4:	f7ff fef0 	bl	80004b8 <myLCD_init>
	myLCD_Bkl(1);
 80006d8:	2201      	movs	r2, #1
 80006da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006de:	480d      	ldr	r0, [pc, #52]	; (8000714 <myTask_init+0x44>)
 80006e0:	f001 fccf 	bl	8002082 <HAL_GPIO_WritePin>
	ledProcess(0);
 80006e4:	2201      	movs	r2, #1
 80006e6:	2101      	movs	r1, #1
 80006e8:	480a      	ldr	r0, [pc, #40]	; (8000714 <myTask_init+0x44>)
 80006ea:	f001 fcca 	bl	8002082 <HAL_GPIO_WritePin>
	ledCancel(0);
 80006ee:	2201      	movs	r2, #1
 80006f0:	2102      	movs	r1, #2
 80006f2:	4808      	ldr	r0, [pc, #32]	; (8000714 <myTask_init+0x44>)
 80006f4:	f001 fcc5 	bl	8002082 <HAL_GPIO_WritePin>
	ledBack(0);
 80006f8:	2201      	movs	r2, #1
 80006fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <myTask_init+0x44>)
 8000700:	f001 fcbf 	bl	8002082 <HAL_GPIO_WritePin>
	ledDrop(0);
 8000704:	2201      	movs	r2, #1
 8000706:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800070a:	4802      	ldr	r0, [pc, #8]	; (8000714 <myTask_init+0x44>)
 800070c:	f001 fcb9 	bl	8002082 <HAL_GPIO_WritePin>
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40010c00 	.word	0x40010c00

08000718 <myTask_Run>:

void myTask_Run(void){
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	switch (myState){
 800071c:	4b78      	ldr	r3, [pc, #480]	; (8000900 <myTask_Run+0x1e8>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b08      	cmp	r3, #8
 8000722:	f200 8532 	bhi.w	800118a <myTask_Run+0xa72>
 8000726:	a201      	add	r2, pc, #4	; (adr r2, 800072c <myTask_Run+0x14>)
 8000728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072c:	08000751 	.word	0x08000751
 8000730:	08000777 	.word	0x08000777
 8000734:	080007b7 	.word	0x080007b7
 8000738:	08000935 	.word	0x08000935
 800073c:	08000a81 	.word	0x08000a81
 8000740:	08000b71 	.word	0x08000b71
 8000744:	08000df5 	.word	0x08000df5
 8000748:	08000f07 	.word	0x08000f07
 800074c:	08001055 	.word	0x08001055
	case start:{
		myLCD_setCursor(0, 0); myLCD_print("Vending Machine");
 8000750:	2100      	movs	r1, #0
 8000752:	2000      	movs	r0, #0
 8000754:	f7ff ff68 	bl	8000628 <myLCD_setCursor>
 8000758:	486a      	ldr	r0, [pc, #424]	; (8000904 <myTask_Run+0x1ec>)
 800075a:	f7ff ff83 	bl	8000664 <myLCD_print>
		myLCD_setCursor(0, 1); myLCD_print("   Andi Mei");
 800075e:	2101      	movs	r1, #1
 8000760:	2000      	movs	r0, #0
 8000762:	f7ff ff61 	bl	8000628 <myLCD_setCursor>
 8000766:	4868      	ldr	r0, [pc, #416]	; (8000908 <myTask_Run+0x1f0>)
 8000768:	f7ff ff7c 	bl	8000664 <myLCD_print>
		myState=startDelay;
 800076c:	4b64      	ldr	r3, [pc, #400]	; (8000900 <myTask_Run+0x1e8>)
 800076e:	2201      	movs	r2, #1
 8000770:	701a      	strb	r2, [r3, #0]
	}break;
 8000772:	f000 bd0a 	b.w	800118a <myTask_Run+0xa72>

	case startDelay:{
		if(++delay1 > 1000){
 8000776:	4b65      	ldr	r3, [pc, #404]	; (800090c <myTask_Run+0x1f4>)
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	b29b      	uxth	r3, r3
 800077c:	3301      	adds	r3, #1
 800077e:	b29b      	uxth	r3, r3
 8000780:	4a62      	ldr	r2, [pc, #392]	; (800090c <myTask_Run+0x1f4>)
 8000782:	4619      	mov	r1, r3
 8000784:	8011      	strh	r1, [r2, #0]
 8000786:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800078a:	f240 84ef 	bls.w	800116c <myTask_Run+0xa54>
			delay1=0;
 800078e:	4b5f      	ldr	r3, [pc, #380]	; (800090c <myTask_Run+0x1f4>)
 8000790:	2200      	movs	r2, #0
 8000792:	801a      	strh	r2, [r3, #0]
			myLCD_clear();
 8000794:	f7ff ff94 	bl	80006c0 <myLCD_clear>
			myLCD_setCursor(0, 0); myLCD_print("Insert Coin !");
 8000798:	2100      	movs	r1, #0
 800079a:	2000      	movs	r0, #0
 800079c:	f7ff ff44 	bl	8000628 <myLCD_setCursor>
 80007a0:	485b      	ldr	r0, [pc, #364]	; (8000910 <myTask_Run+0x1f8>)
 80007a2:	f7ff ff5f 	bl	8000664 <myLCD_print>
			printEn=1;
 80007a6:	4b5b      	ldr	r3, [pc, #364]	; (8000914 <myTask_Run+0x1fc>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
			myState=insertCoin1;
 80007ac:	4b54      	ldr	r3, [pc, #336]	; (8000900 <myTask_Run+0x1e8>)
 80007ae:	2202      	movs	r2, #2
 80007b0:	701a      	strb	r2, [r3, #0]
		}

	}break;
 80007b2:	f000 bcdb 	b.w	800116c <myTask_Run+0xa54>

	case insertCoin1:{
		/*	Printed once in loop	*/
		if(printEn){
 80007b6:	4b57      	ldr	r3, [pc, #348]	; (8000914 <myTask_Run+0x1fc>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d010      	beq.n	80007e0 <myTask_Run+0xc8>
			printEn=0;
 80007be:	4b55      	ldr	r3, [pc, #340]	; (8000914 <myTask_Run+0x1fc>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
			myLCD_setCursor(0, 1); myLCD_print("Money: "); myLCD_printNum(money);
 80007c4:	2101      	movs	r1, #1
 80007c6:	2000      	movs	r0, #0
 80007c8:	f7ff ff2e 	bl	8000628 <myLCD_setCursor>
 80007cc:	4852      	ldr	r0, [pc, #328]	; (8000918 <myTask_Run+0x200>)
 80007ce:	f7ff ff49 	bl	8000664 <myLCD_print>
 80007d2:	4b52      	ldr	r3, [pc, #328]	; (800091c <myTask_Run+0x204>)
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	b21b      	sxth	r3, r3
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ff58 	bl	8000690 <myLCD_printNum>
		}

		/*	Check type of coin when sensor detected, and give appropriate flag	*/
		if(PB_u500()){
 80007e0:	f000 fd4a 	bl	8001278 <PB_u500>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d011      	beq.n	800080e <myTask_Run+0xf6>
			buzzer(1);
 80007ea:	2201      	movs	r2, #1
 80007ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007f0:	484b      	ldr	r0, [pc, #300]	; (8000920 <myTask_Run+0x208>)
 80007f2:	f001 fc46 	bl	8002082 <HAL_GPIO_WritePin>
			myLCD_clear();
 80007f6:	f7ff ff63 	bl	80006c0 <myLCD_clear>
			myLCD_setCursor(0, 0); myLCD_print("Rp.500 inserted !");
 80007fa:	2100      	movs	r1, #0
 80007fc:	2000      	movs	r0, #0
 80007fe:	f7ff ff13 	bl	8000628 <myLCD_setCursor>
 8000802:	4848      	ldr	r0, [pc, #288]	; (8000924 <myTask_Run+0x20c>)
 8000804:	f7ff ff2e 	bl	8000664 <myLCD_print>
			myFlag=in500;
 8000808:	4b47      	ldr	r3, [pc, #284]	; (8000928 <myTask_Run+0x210>)
 800080a:	2201      	movs	r2, #1
 800080c:	701a      	strb	r2, [r3, #0]
		}

		if(PB_u1000()){
 800080e:	f000 fd63 	bl	80012d8 <PB_u1000>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d011      	beq.n	800083c <myTask_Run+0x124>
			buzzer(1);
 8000818:	2201      	movs	r2, #1
 800081a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800081e:	4840      	ldr	r0, [pc, #256]	; (8000920 <myTask_Run+0x208>)
 8000820:	f001 fc2f 	bl	8002082 <HAL_GPIO_WritePin>
			myLCD_clear();
 8000824:	f7ff ff4c 	bl	80006c0 <myLCD_clear>
			myLCD_setCursor(0, 0); myLCD_print("Rp.1000 inserted");
 8000828:	2100      	movs	r1, #0
 800082a:	2000      	movs	r0, #0
 800082c:	f7ff fefc 	bl	8000628 <myLCD_setCursor>
 8000830:	483e      	ldr	r0, [pc, #248]	; (800092c <myTask_Run+0x214>)
 8000832:	f7ff ff17 	bl	8000664 <myLCD_print>
			myFlag=in1000;
 8000836:	4b3c      	ldr	r3, [pc, #240]	; (8000928 <myTask_Run+0x210>)
 8000838:	2202      	movs	r2, #2
 800083a:	701a      	strb	r2, [r3, #0]
		}

		/*	Check flag and goto next state	*/
		if(myFlag==in500){
 800083c:	4b3a      	ldr	r3, [pc, #232]	; (8000928 <myTask_Run+0x210>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d12d      	bne.n	80008a0 <myTask_Run+0x188>
			if(++delay > 500){
 8000844:	4b3a      	ldr	r3, [pc, #232]	; (8000930 <myTask_Run+0x218>)
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	b29b      	uxth	r3, r3
 800084a:	3301      	adds	r3, #1
 800084c:	b29b      	uxth	r3, r3
 800084e:	4a38      	ldr	r2, [pc, #224]	; (8000930 <myTask_Run+0x218>)
 8000850:	4619      	mov	r1, r3
 8000852:	8011      	strh	r1, [r2, #0]
 8000854:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000858:	d922      	bls.n	80008a0 <myTask_Run+0x188>
				delay=0;
 800085a:	4b35      	ldr	r3, [pc, #212]	; (8000930 <myTask_Run+0x218>)
 800085c:	2200      	movs	r2, #0
 800085e:	801a      	strh	r2, [r3, #0]
				buzzer(0);
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000866:	482e      	ldr	r0, [pc, #184]	; (8000920 <myTask_Run+0x208>)
 8000868:	f001 fc0b 	bl	8002082 <HAL_GPIO_WritePin>
				money+=500;
 800086c:	4b2b      	ldr	r3, [pc, #172]	; (800091c <myTask_Run+0x204>)
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	b29b      	uxth	r3, r3
 8000872:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000876:	b29a      	uxth	r2, r3
 8000878:	4b28      	ldr	r3, [pc, #160]	; (800091c <myTask_Run+0x204>)
 800087a:	801a      	strh	r2, [r3, #0]
				myLCD_clear();
 800087c:	f7ff ff20 	bl	80006c0 <myLCD_clear>
				myFlag=noCoin;
 8000880:	4b29      	ldr	r3, [pc, #164]	; (8000928 <myTask_Run+0x210>)
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]
				myLCD_setCursor(0, 0); myLCD_print("Insert Coin !");
 8000886:	2100      	movs	r1, #0
 8000888:	2000      	movs	r0, #0
 800088a:	f7ff fecd 	bl	8000628 <myLCD_setCursor>
 800088e:	4820      	ldr	r0, [pc, #128]	; (8000910 <myTask_Run+0x1f8>)
 8000890:	f7ff fee8 	bl	8000664 <myLCD_print>
				printEn=1;
 8000894:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <myTask_Run+0x1fc>)
 8000896:	2201      	movs	r2, #1
 8000898:	701a      	strb	r2, [r3, #0]
				myState=insertCoin2;
 800089a:	4b19      	ldr	r3, [pc, #100]	; (8000900 <myTask_Run+0x1e8>)
 800089c:	2203      	movs	r2, #3
 800089e:	701a      	strb	r2, [r3, #0]
			}
		}

		if(myFlag==in1000){
 80008a0:	4b21      	ldr	r3, [pc, #132]	; (8000928 <myTask_Run+0x210>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	f040 8463 	bne.w	8001170 <myTask_Run+0xa58>
			if(++delay > 500){
 80008aa:	4b21      	ldr	r3, [pc, #132]	; (8000930 <myTask_Run+0x218>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	3301      	adds	r3, #1
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	4a1e      	ldr	r2, [pc, #120]	; (8000930 <myTask_Run+0x218>)
 80008b6:	4619      	mov	r1, r3
 80008b8:	8011      	strh	r1, [r2, #0]
 80008ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008be:	f240 8457 	bls.w	8001170 <myTask_Run+0xa58>
				delay=0;
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <myTask_Run+0x218>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	801a      	strh	r2, [r3, #0]
				buzzer(0);
 80008c8:	2200      	movs	r2, #0
 80008ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008ce:	4814      	ldr	r0, [pc, #80]	; (8000920 <myTask_Run+0x208>)
 80008d0:	f001 fbd7 	bl	8002082 <HAL_GPIO_WritePin>
				money+=1000;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <myTask_Run+0x204>)
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	b29b      	uxth	r3, r3
 80008da:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80008de:	b29a      	uxth	r2, r3
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <myTask_Run+0x204>)
 80008e2:	801a      	strh	r2, [r3, #0]
				myLCD_clear();
 80008e4:	f7ff feec 	bl	80006c0 <myLCD_clear>
				myFlag=noCoin;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <myTask_Run+0x210>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	701a      	strb	r2, [r3, #0]
				printEn=1;
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <myTask_Run+0x1fc>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	701a      	strb	r2, [r3, #0]
				myState=ready;
 80008f4:	4b02      	ldr	r3, [pc, #8]	; (8000900 <myTask_Run+0x1e8>)
 80008f6:	2204      	movs	r2, #4
 80008f8:	701a      	strb	r2, [r3, #0]
			}
		}
	}break;
 80008fa:	f000 bc39 	b.w	8001170 <myTask_Run+0xa58>
 80008fe:	bf00      	nop
 8000900:	20000158 	.word	0x20000158
 8000904:	08003c5c 	.word	0x08003c5c
 8000908:	08003c6c 	.word	0x08003c6c
 800090c:	20000094 	.word	0x20000094
 8000910:	08003c78 	.word	0x08003c78
 8000914:	2000009a 	.word	0x2000009a
 8000918:	08003c88 	.word	0x08003c88
 800091c:	20000096 	.word	0x20000096
 8000920:	40010800 	.word	0x40010800
 8000924:	08003c90 	.word	0x08003c90
 8000928:	2000015c 	.word	0x2000015c
 800092c:	08003ca4 	.word	0x08003ca4
 8000930:	2000015a 	.word	0x2000015a

	case insertCoin2:{
		/*	Printed once in loop	*/
		if(printEn){
 8000934:	4b84      	ldr	r3, [pc, #528]	; (8000b48 <myTask_Run+0x430>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d010      	beq.n	800095e <myTask_Run+0x246>
			printEn=0;
 800093c:	4b82      	ldr	r3, [pc, #520]	; (8000b48 <myTask_Run+0x430>)
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
			myLCD_setCursor(0, 1); myLCD_print("Money: "); myLCD_printNum(money);
 8000942:	2101      	movs	r1, #1
 8000944:	2000      	movs	r0, #0
 8000946:	f7ff fe6f 	bl	8000628 <myLCD_setCursor>
 800094a:	4880      	ldr	r0, [pc, #512]	; (8000b4c <myTask_Run+0x434>)
 800094c:	f7ff fe8a 	bl	8000664 <myLCD_print>
 8000950:	4b7f      	ldr	r3, [pc, #508]	; (8000b50 <myTask_Run+0x438>)
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	b29b      	uxth	r3, r3
 8000956:	b21b      	sxth	r3, r3
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fe99 	bl	8000690 <myLCD_printNum>
		}

		/*	Check type of coin when sensor detected, and give appropriate flag	*/
		if(PB_u500()){
 800095e:	f000 fc8b 	bl	8001278 <PB_u500>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d011      	beq.n	800098c <myTask_Run+0x274>
			buzzer(1);
 8000968:	2201      	movs	r2, #1
 800096a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800096e:	4879      	ldr	r0, [pc, #484]	; (8000b54 <myTask_Run+0x43c>)
 8000970:	f001 fb87 	bl	8002082 <HAL_GPIO_WritePin>
			myLCD_clear();
 8000974:	f7ff fea4 	bl	80006c0 <myLCD_clear>
			myLCD_setCursor(0, 0); myLCD_print("Rp.500 inserted");
 8000978:	2100      	movs	r1, #0
 800097a:	2000      	movs	r0, #0
 800097c:	f7ff fe54 	bl	8000628 <myLCD_setCursor>
 8000980:	4875      	ldr	r0, [pc, #468]	; (8000b58 <myTask_Run+0x440>)
 8000982:	f7ff fe6f 	bl	8000664 <myLCD_print>
			myFlag=in500;
 8000986:	4b75      	ldr	r3, [pc, #468]	; (8000b5c <myTask_Run+0x444>)
 8000988:	2201      	movs	r2, #1
 800098a:	701a      	strb	r2, [r3, #0]
		}

		if(PB_u1000()){
 800098c:	f000 fca4 	bl	80012d8 <PB_u1000>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d011      	beq.n	80009ba <myTask_Run+0x2a2>
			buzzer(1);
 8000996:	2201      	movs	r2, #1
 8000998:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800099c:	486d      	ldr	r0, [pc, #436]	; (8000b54 <myTask_Run+0x43c>)
 800099e:	f001 fb70 	bl	8002082 <HAL_GPIO_WritePin>
			myLCD_clear();
 80009a2:	f7ff fe8d 	bl	80006c0 <myLCD_clear>
			myLCD_setCursor(0, 0); myLCD_print("Rp.1000 inserted");
 80009a6:	2100      	movs	r1, #0
 80009a8:	2000      	movs	r0, #0
 80009aa:	f7ff fe3d 	bl	8000628 <myLCD_setCursor>
 80009ae:	486c      	ldr	r0, [pc, #432]	; (8000b60 <myTask_Run+0x448>)
 80009b0:	f7ff fe58 	bl	8000664 <myLCD_print>
			myFlag=in1000;
 80009b4:	4b69      	ldr	r3, [pc, #420]	; (8000b5c <myTask_Run+0x444>)
 80009b6:	2202      	movs	r2, #2
 80009b8:	701a      	strb	r2, [r3, #0]
		}
		if(PB_Cancel()){
 80009ba:	f000 fc2d 	bl	8001218 <PB_Cancel>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d007      	beq.n	80009d4 <myTask_Run+0x2bc>
			myLCD_clear();
 80009c4:	f7ff fe7c 	bl	80006c0 <myLCD_clear>
			printEn=1;
 80009c8:	4b5f      	ldr	r3, [pc, #380]	; (8000b48 <myTask_Run+0x430>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	701a      	strb	r2, [r3, #0]
			myState=cancel;
 80009ce:	4b65      	ldr	r3, [pc, #404]	; (8000b64 <myTask_Run+0x44c>)
 80009d0:	2205      	movs	r2, #5
 80009d2:	701a      	strb	r2, [r3, #0]
		}

		/*	Check flag and goto next state	*/
		if(myFlag==in500){
 80009d4:	4b61      	ldr	r3, [pc, #388]	; (8000b5c <myTask_Run+0x444>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d126      	bne.n	8000a2a <myTask_Run+0x312>
			if(++delay > 500){
 80009dc:	4b62      	ldr	r3, [pc, #392]	; (8000b68 <myTask_Run+0x450>)
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	3301      	adds	r3, #1
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	4a60      	ldr	r2, [pc, #384]	; (8000b68 <myTask_Run+0x450>)
 80009e8:	4619      	mov	r1, r3
 80009ea:	8011      	strh	r1, [r2, #0]
 80009ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009f0:	d91b      	bls.n	8000a2a <myTask_Run+0x312>
				delay=0;
 80009f2:	4b5d      	ldr	r3, [pc, #372]	; (8000b68 <myTask_Run+0x450>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	801a      	strh	r2, [r3, #0]
				buzzer(0);
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009fe:	4855      	ldr	r0, [pc, #340]	; (8000b54 <myTask_Run+0x43c>)
 8000a00:	f001 fb3f 	bl	8002082 <HAL_GPIO_WritePin>
				money+=500;
 8000a04:	4b52      	ldr	r3, [pc, #328]	; (8000b50 <myTask_Run+0x438>)
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	4b4f      	ldr	r3, [pc, #316]	; (8000b50 <myTask_Run+0x438>)
 8000a12:	801a      	strh	r2, [r3, #0]
				myLCD_clear();
 8000a14:	f7ff fe54 	bl	80006c0 <myLCD_clear>
				printEn=1;
 8000a18:	4b4b      	ldr	r3, [pc, #300]	; (8000b48 <myTask_Run+0x430>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	701a      	strb	r2, [r3, #0]
				myFlag=noCoin;
 8000a1e:	4b4f      	ldr	r3, [pc, #316]	; (8000b5c <myTask_Run+0x444>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
				myState=ready;
 8000a24:	4b4f      	ldr	r3, [pc, #316]	; (8000b64 <myTask_Run+0x44c>)
 8000a26:	2204      	movs	r2, #4
 8000a28:	701a      	strb	r2, [r3, #0]
			}
		}

		if(myFlag==in1000){
 8000a2a:	4b4c      	ldr	r3, [pc, #304]	; (8000b5c <myTask_Run+0x444>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	f040 83a0 	bne.w	8001174 <myTask_Run+0xa5c>
			if(++delay > 500){
 8000a34:	4b4c      	ldr	r3, [pc, #304]	; (8000b68 <myTask_Run+0x450>)
 8000a36:	881b      	ldrh	r3, [r3, #0]
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	4a4a      	ldr	r2, [pc, #296]	; (8000b68 <myTask_Run+0x450>)
 8000a40:	4619      	mov	r1, r3
 8000a42:	8011      	strh	r1, [r2, #0]
 8000a44:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a48:	f240 8394 	bls.w	8001174 <myTask_Run+0xa5c>
				delay=0;
 8000a4c:	4b46      	ldr	r3, [pc, #280]	; (8000b68 <myTask_Run+0x450>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	801a      	strh	r2, [r3, #0]
				buzzer(0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a58:	483e      	ldr	r0, [pc, #248]	; (8000b54 <myTask_Run+0x43c>)
 8000a5a:	f001 fb12 	bl	8002082 <HAL_GPIO_WritePin>
				money+=1000;
 8000a5e:	4b3c      	ldr	r3, [pc, #240]	; (8000b50 <myTask_Run+0x438>)
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	4b39      	ldr	r3, [pc, #228]	; (8000b50 <myTask_Run+0x438>)
 8000a6c:	801a      	strh	r2, [r3, #0]
				myLCD_clear();
 8000a6e:	f7ff fe27 	bl	80006c0 <myLCD_clear>
				myFlag=noCoin;
 8000a72:	4b3a      	ldr	r3, [pc, #232]	; (8000b5c <myTask_Run+0x444>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
				myState=k500;
 8000a78:	4b3a      	ldr	r3, [pc, #232]	; (8000b64 <myTask_Run+0x44c>)
 8000a7a:	2207      	movs	r2, #7
 8000a7c:	701a      	strb	r2, [r3, #0]
			}
		}
	}break;
 8000a7e:	e379      	b.n	8001174 <myTask_Run+0xa5c>

	case ready:{
		if(printEn){	//printed once
 8000a80:	4b31      	ldr	r3, [pc, #196]	; (8000b48 <myTask_Run+0x430>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d017      	beq.n	8000ab8 <myTask_Run+0x3a0>
			printEn=0;
 8000a88:	4b2f      	ldr	r3, [pc, #188]	; (8000b48 <myTask_Run+0x430>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
			myLCD_setCursor(0, 0); myLCD_print("Process? (Y/N)");
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff fdc9 	bl	8000628 <myLCD_setCursor>
 8000a96:	4835      	ldr	r0, [pc, #212]	; (8000b6c <myTask_Run+0x454>)
 8000a98:	f7ff fde4 	bl	8000664 <myLCD_print>
			myLCD_setCursor(0, 1); myLCD_print("Money: "); myLCD_printNum(money);
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff fdc2 	bl	8000628 <myLCD_setCursor>
 8000aa4:	4829      	ldr	r0, [pc, #164]	; (8000b4c <myTask_Run+0x434>)
 8000aa6:	f7ff fddd 	bl	8000664 <myLCD_print>
 8000aaa:	4b29      	ldr	r3, [pc, #164]	; (8000b50 <myTask_Run+0x438>)
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	b21b      	sxth	r3, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fdec 	bl	8000690 <myLCD_printNum>
		}

		if(PB_Process()){
 8000ab8:	f000 fb7e 	bl	80011b8 <PB_Process>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d00f      	beq.n	8000ae2 <myTask_Run+0x3ca>
			money-=1000;			//money is taken to pay candy
 8000ac2:	4b23      	ldr	r3, [pc, #140]	; (8000b50 <myTask_Run+0x438>)
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <myTask_Run+0x438>)
 8000ad0:	801a      	strh	r2, [r3, #0]
			myLCD_clear();
 8000ad2:	f7ff fdf5 	bl	80006c0 <myLCD_clear>
			printEn=1;
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <myTask_Run+0x430>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	701a      	strb	r2, [r3, #0]
			myState=drop;
 8000adc:	4b21      	ldr	r3, [pc, #132]	; (8000b64 <myTask_Run+0x44c>)
 8000ade:	2206      	movs	r2, #6
 8000ae0:	701a      	strb	r2, [r3, #0]
		}
		if(PB_Cancel()){
 8000ae2:	f000 fb99 	bl	8001218 <PB_Cancel>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d007      	beq.n	8000afc <myTask_Run+0x3e4>
			myLCD_clear();
 8000aec:	f7ff fde8 	bl	80006c0 <myLCD_clear>
			printEn=1;
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <myTask_Run+0x430>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	701a      	strb	r2, [r3, #0]
			myState=cancel;
 8000af6:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <myTask_Run+0x44c>)
 8000af8:	2205      	movs	r2, #5
 8000afa:	701a      	strb	r2, [r3, #0]
		}
		if(PB_u500()){
 8000afc:	f000 fbbc 	bl	8001278 <PB_u500>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d00c      	beq.n	8000b20 <myTask_Run+0x408>
			money+=500;
 8000b06:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <myTask_Run+0x438>)
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <myTask_Run+0x438>)
 8000b14:	801a      	strh	r2, [r3, #0]
			myLCD_clear();
 8000b16:	f7ff fdd3 	bl	80006c0 <myLCD_clear>
			myState=k500;
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <myTask_Run+0x44c>)
 8000b1c:	2207      	movs	r2, #7
 8000b1e:	701a      	strb	r2, [r3, #0]
		}
		if(PB_u1000()){
 8000b20:	f000 fbda 	bl	80012d8 <PB_u1000>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f000 8326 	beq.w	8001178 <myTask_Run+0xa60>
			money+=1000;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <myTask_Run+0x438>)
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <myTask_Run+0x438>)
 8000b3a:	801a      	strh	r2, [r3, #0]
			myLCD_clear();
 8000b3c:	f7ff fdc0 	bl	80006c0 <myLCD_clear>
			myState=k1000;
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <myTask_Run+0x44c>)
 8000b42:	2208      	movs	r2, #8
 8000b44:	701a      	strb	r2, [r3, #0]
		}
	}break;
 8000b46:	e317      	b.n	8001178 <myTask_Run+0xa60>
 8000b48:	2000009a 	.word	0x2000009a
 8000b4c:	08003c88 	.word	0x08003c88
 8000b50:	20000096 	.word	0x20000096
 8000b54:	40010800 	.word	0x40010800
 8000b58:	08003cb8 	.word	0x08003cb8
 8000b5c:	2000015c 	.word	0x2000015c
 8000b60:	08003ca4 	.word	0x08003ca4
 8000b64:	20000158 	.word	0x20000158
 8000b68:	2000015a 	.word	0x2000015a
 8000b6c:	08003cc8 	.word	0x08003cc8

	case cancel:{
		/* check money in machine	*/
		if(money==500){
 8000b70:	4b95      	ldr	r3, [pc, #596]	; (8000dc8 <myTask_Run+0x6b0>)
 8000b72:	881b      	ldrh	r3, [r3, #0]
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b7a:	f040 808f 	bne.w	8000c9c <myTask_Run+0x584>
			/* Printed once in loop	*/
			if(printEn){
 8000b7e:	4b93      	ldr	r3, [pc, #588]	; (8000dcc <myTask_Run+0x6b4>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d010      	beq.n	8000ba8 <myTask_Run+0x490>
				printEn=0;
 8000b86:	4b91      	ldr	r3, [pc, #580]	; (8000dcc <myTask_Run+0x6b4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
				myLCD_setCursor(0, 0); myLCD_print("Money Refunded !");
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f7ff fd4a 	bl	8000628 <myLCD_setCursor>
 8000b94:	488e      	ldr	r0, [pc, #568]	; (8000dd0 <myTask_Run+0x6b8>)
 8000b96:	f7ff fd65 	bl	8000664 <myLCD_print>
				myLCD_setCursor(0, 1); myLCD_print("Rp.500");
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f7ff fd43 	bl	8000628 <myLCD_setCursor>
 8000ba2:	488c      	ldr	r0, [pc, #560]	; (8000dd4 <myTask_Run+0x6bc>)
 8000ba4:	f7ff fd5e 	bl	8000664 <myLCD_print>
			}

			/* Blinky LED and buzzer beep	*/
			if((++delay > 80) && (i<=9)){
 8000ba8:	4b8b      	ldr	r3, [pc, #556]	; (8000dd8 <myTask_Run+0x6c0>)
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	3301      	adds	r3, #1
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	4a89      	ldr	r2, [pc, #548]	; (8000dd8 <myTask_Run+0x6c0>)
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	8011      	strh	r1, [r2, #0]
 8000bb8:	2b50      	cmp	r3, #80	; 0x50
 8000bba:	d930      	bls.n	8000c1e <myTask_Run+0x506>
 8000bbc:	4b87      	ldr	r3, [pc, #540]	; (8000ddc <myTask_Run+0x6c4>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	2b09      	cmp	r3, #9
 8000bc4:	d82b      	bhi.n	8000c1e <myTask_Run+0x506>
				delay=0;
 8000bc6:	4b84      	ldr	r3, [pc, #528]	; (8000dd8 <myTask_Run+0x6c0>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	801a      	strh	r2, [r3, #0]
				toggle=!(toggle);
 8000bcc:	4b84      	ldr	r3, [pc, #528]	; (8000de0 <myTask_Run+0x6c8>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	bf14      	ite	ne
 8000bd4:	2301      	movne	r3, #1
 8000bd6:	2300      	moveq	r3, #0
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	f083 0301 	eor.w	r3, r3, #1
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4b7e      	ldr	r3, [pc, #504]	; (8000de0 <myTask_Run+0x6c8>)
 8000be8:	701a      	strb	r2, [r3, #0]
				buzzer(toggle);
 8000bea:	4b7d      	ldr	r3, [pc, #500]	; (8000de0 <myTask_Run+0x6c8>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bf4:	487b      	ldr	r0, [pc, #492]	; (8000de4 <myTask_Run+0x6cc>)
 8000bf6:	f001 fa44 	bl	8002082 <HAL_GPIO_WritePin>
				ledLoading(toggle);
 8000bfa:	4b79      	ldr	r3, [pc, #484]	; (8000de0 <myTask_Run+0x6c8>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	f083 0301 	eor.w	r3, r3, #1
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	461a      	mov	r2, r3
 8000c06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c0a:	4877      	ldr	r0, [pc, #476]	; (8000de8 <myTask_Run+0x6d0>)
 8000c0c:	f001 fa39 	bl	8002082 <HAL_GPIO_WritePin>
				i++;
 8000c10:	4b72      	ldr	r3, [pc, #456]	; (8000ddc <myTask_Run+0x6c4>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	3301      	adds	r3, #1
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4b70      	ldr	r3, [pc, #448]	; (8000ddc <myTask_Run+0x6c4>)
 8000c1c:	701a      	strb	r2, [r3, #0]
			}

			/* goto next state after blinky	*/
			if(i>=8){
 8000c1e:	4b6f      	ldr	r3, [pc, #444]	; (8000ddc <myTask_Run+0x6c4>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	2b07      	cmp	r3, #7
 8000c26:	f240 82a9 	bls.w	800117c <myTask_Run+0xa64>
				led500(1);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	486e      	ldr	r0, [pc, #440]	; (8000de8 <myTask_Run+0x6d0>)
 8000c30:	f001 fa27 	bl	8002082 <HAL_GPIO_WritePin>
				buzzer(1);
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c3a:	486a      	ldr	r0, [pc, #424]	; (8000de4 <myTask_Run+0x6cc>)
 8000c3c:	f001 fa21 	bl	8002082 <HAL_GPIO_WritePin>
				if(++delay > 500){
 8000c40:	4b65      	ldr	r3, [pc, #404]	; (8000dd8 <myTask_Run+0x6c0>)
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	3301      	adds	r3, #1
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	4a63      	ldr	r2, [pc, #396]	; (8000dd8 <myTask_Run+0x6c0>)
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	8011      	strh	r1, [r2, #0]
 8000c50:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c54:	f240 8292 	bls.w	800117c <myTask_Run+0xa64>
					i=0;
 8000c58:	4b60      	ldr	r3, [pc, #384]	; (8000ddc <myTask_Run+0x6c4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
					led500(0);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2101      	movs	r1, #1
 8000c62:	4861      	ldr	r0, [pc, #388]	; (8000de8 <myTask_Run+0x6d0>)
 8000c64:	f001 fa0d 	bl	8002082 <HAL_GPIO_WritePin>
					buzzer(0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c6e:	485d      	ldr	r0, [pc, #372]	; (8000de4 <myTask_Run+0x6cc>)
 8000c70:	f001 fa07 	bl	8002082 <HAL_GPIO_WritePin>
					delay=0;
 8000c74:	4b58      	ldr	r3, [pc, #352]	; (8000dd8 <myTask_Run+0x6c0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	801a      	strh	r2, [r3, #0]
					myLCD_clear();
 8000c7a:	f7ff fd21 	bl	80006c0 <myLCD_clear>
					printEn=1;
 8000c7e:	4b53      	ldr	r3, [pc, #332]	; (8000dcc <myTask_Run+0x6b4>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	701a      	strb	r2, [r3, #0]
					money-=500;		//500 refunded
 8000c84:	4b50      	ldr	r3, [pc, #320]	; (8000dc8 <myTask_Run+0x6b0>)
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	4b4d      	ldr	r3, [pc, #308]	; (8000dc8 <myTask_Run+0x6b0>)
 8000c92:	801a      	strh	r2, [r3, #0]
					myState=start;
 8000c94:	4b55      	ldr	r3, [pc, #340]	; (8000dec <myTask_Run+0x6d4>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
					myState=start;
				}
			}
		}

	}break;
 8000c9a:	e26f      	b.n	800117c <myTask_Run+0xa64>
		else if(money==1000){
 8000c9c:	4b4a      	ldr	r3, [pc, #296]	; (8000dc8 <myTask_Run+0x6b0>)
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ca6:	f040 8269 	bne.w	800117c <myTask_Run+0xa64>
			if(printEn){
 8000caa:	4b48      	ldr	r3, [pc, #288]	; (8000dcc <myTask_Run+0x6b4>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d010      	beq.n	8000cd4 <myTask_Run+0x5bc>
				printEn=0;
 8000cb2:	4b46      	ldr	r3, [pc, #280]	; (8000dcc <myTask_Run+0x6b4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
				myLCD_setCursor(0, 0); myLCD_print("Money Refunded !");
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f7ff fcb4 	bl	8000628 <myLCD_setCursor>
 8000cc0:	4843      	ldr	r0, [pc, #268]	; (8000dd0 <myTask_Run+0x6b8>)
 8000cc2:	f7ff fccf 	bl	8000664 <myLCD_print>
				myLCD_setCursor(0, 1); myLCD_print("Rp.1000");
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f7ff fcad 	bl	8000628 <myLCD_setCursor>
 8000cce:	4848      	ldr	r0, [pc, #288]	; (8000df0 <myTask_Run+0x6d8>)
 8000cd0:	f7ff fcc8 	bl	8000664 <myLCD_print>
			if((++delay > 80) && (i<=9)){
 8000cd4:	4b40      	ldr	r3, [pc, #256]	; (8000dd8 <myTask_Run+0x6c0>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	3301      	adds	r3, #1
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	4a3e      	ldr	r2, [pc, #248]	; (8000dd8 <myTask_Run+0x6c0>)
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	8011      	strh	r1, [r2, #0]
 8000ce4:	2b50      	cmp	r3, #80	; 0x50
 8000ce6:	d930      	bls.n	8000d4a <myTask_Run+0x632>
 8000ce8:	4b3c      	ldr	r3, [pc, #240]	; (8000ddc <myTask_Run+0x6c4>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b09      	cmp	r3, #9
 8000cf0:	d82b      	bhi.n	8000d4a <myTask_Run+0x632>
				delay=0;
 8000cf2:	4b39      	ldr	r3, [pc, #228]	; (8000dd8 <myTask_Run+0x6c0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	801a      	strh	r2, [r3, #0]
				toggle=!(toggle);
 8000cf8:	4b39      	ldr	r3, [pc, #228]	; (8000de0 <myTask_Run+0x6c8>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	bf14      	ite	ne
 8000d00:	2301      	movne	r3, #1
 8000d02:	2300      	moveq	r3, #0
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	f083 0301 	eor.w	r3, r3, #1
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4b33      	ldr	r3, [pc, #204]	; (8000de0 <myTask_Run+0x6c8>)
 8000d14:	701a      	strb	r2, [r3, #0]
				buzzer(toggle);
 8000d16:	4b32      	ldr	r3, [pc, #200]	; (8000de0 <myTask_Run+0x6c8>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d20:	4830      	ldr	r0, [pc, #192]	; (8000de4 <myTask_Run+0x6cc>)
 8000d22:	f001 f9ae 	bl	8002082 <HAL_GPIO_WritePin>
				ledLoading(toggle);
 8000d26:	4b2e      	ldr	r3, [pc, #184]	; (8000de0 <myTask_Run+0x6c8>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	f083 0301 	eor.w	r3, r3, #1
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	461a      	mov	r2, r3
 8000d32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d36:	482c      	ldr	r0, [pc, #176]	; (8000de8 <myTask_Run+0x6d0>)
 8000d38:	f001 f9a3 	bl	8002082 <HAL_GPIO_WritePin>
				i++;
 8000d3c:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <myTask_Run+0x6c4>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	3301      	adds	r3, #1
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b25      	ldr	r3, [pc, #148]	; (8000ddc <myTask_Run+0x6c4>)
 8000d48:	701a      	strb	r2, [r3, #0]
			if(i>=8){
 8000d4a:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <myTask_Run+0x6c4>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b07      	cmp	r3, #7
 8000d52:	f240 8213 	bls.w	800117c <myTask_Run+0xa64>
				led1000(1);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2102      	movs	r1, #2
 8000d5a:	4823      	ldr	r0, [pc, #140]	; (8000de8 <myTask_Run+0x6d0>)
 8000d5c:	f001 f991 	bl	8002082 <HAL_GPIO_WritePin>
				buzzer(1);
 8000d60:	2201      	movs	r2, #1
 8000d62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d66:	481f      	ldr	r0, [pc, #124]	; (8000de4 <myTask_Run+0x6cc>)
 8000d68:	f001 f98b 	bl	8002082 <HAL_GPIO_WritePin>
				if(++delay > 500){
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <myTask_Run+0x6c0>)
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	3301      	adds	r3, #1
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	4a18      	ldr	r2, [pc, #96]	; (8000dd8 <myTask_Run+0x6c0>)
 8000d78:	4619      	mov	r1, r3
 8000d7a:	8011      	strh	r1, [r2, #0]
 8000d7c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d80:	f240 81fc 	bls.w	800117c <myTask_Run+0xa64>
					i=0;
 8000d84:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <myTask_Run+0x6c4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
					led1000(0);
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	2102      	movs	r1, #2
 8000d8e:	4816      	ldr	r0, [pc, #88]	; (8000de8 <myTask_Run+0x6d0>)
 8000d90:	f001 f977 	bl	8002082 <HAL_GPIO_WritePin>
					buzzer(0);
 8000d94:	2200      	movs	r2, #0
 8000d96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d9a:	4812      	ldr	r0, [pc, #72]	; (8000de4 <myTask_Run+0x6cc>)
 8000d9c:	f001 f971 	bl	8002082 <HAL_GPIO_WritePin>
					delay=0;
 8000da0:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <myTask_Run+0x6c0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	801a      	strh	r2, [r3, #0]
					myLCD_clear();
 8000da6:	f7ff fc8b 	bl	80006c0 <myLCD_clear>
					printEn=1;
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <myTask_Run+0x6b4>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	701a      	strb	r2, [r3, #0]
					money-=1000;	//1000 refunded
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <myTask_Run+0x6b0>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	4b02      	ldr	r3, [pc, #8]	; (8000dc8 <myTask_Run+0x6b0>)
 8000dbe:	801a      	strh	r2, [r3, #0]
					myState=start;
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <myTask_Run+0x6d4>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
	}break;
 8000dc6:	e1d9      	b.n	800117c <myTask_Run+0xa64>
 8000dc8:	20000096 	.word	0x20000096
 8000dcc:	2000009a 	.word	0x2000009a
 8000dd0:	08003cd8 	.word	0x08003cd8
 8000dd4:	08003cec 	.word	0x08003cec
 8000dd8:	2000015a 	.word	0x2000015a
 8000ddc:	20000098 	.word	0x20000098
 8000de0:	20000099 	.word	0x20000099
 8000de4:	40010800 	.word	0x40010800
 8000de8:	40010c00 	.word	0x40010c00
 8000dec:	20000158 	.word	0x20000158
 8000df0:	08003cf4 	.word	0x08003cf4

	case drop:{
		/*	printed once in loop	*/
		if(printEn){
 8000df4:	4b8b      	ldr	r3, [pc, #556]	; (8001024 <myTask_Run+0x90c>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d010      	beq.n	8000e1e <myTask_Run+0x706>
			printEn=0;
 8000dfc:	4b89      	ldr	r3, [pc, #548]	; (8001024 <myTask_Run+0x90c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
			myLCD_setCursor(0, 0); myLCD_print("Success !");
 8000e02:	2100      	movs	r1, #0
 8000e04:	2000      	movs	r0, #0
 8000e06:	f7ff fc0f 	bl	8000628 <myLCD_setCursor>
 8000e0a:	4887      	ldr	r0, [pc, #540]	; (8001028 <myTask_Run+0x910>)
 8000e0c:	f7ff fc2a 	bl	8000664 <myLCD_print>
			myLCD_setCursor(0, 1); myLCD_print("Candy Dropped");
 8000e10:	2101      	movs	r1, #1
 8000e12:	2000      	movs	r0, #0
 8000e14:	f7ff fc08 	bl	8000628 <myLCD_setCursor>
 8000e18:	4884      	ldr	r0, [pc, #528]	; (800102c <myTask_Run+0x914>)
 8000e1a:	f7ff fc23 	bl	8000664 <myLCD_print>
		}

		/* Blinky LED and buzzer beep	*/
		if((++delay > 80) && (i<=9)){
 8000e1e:	4b84      	ldr	r3, [pc, #528]	; (8001030 <myTask_Run+0x918>)
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	3301      	adds	r3, #1
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	4a81      	ldr	r2, [pc, #516]	; (8001030 <myTask_Run+0x918>)
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	8011      	strh	r1, [r2, #0]
 8000e2e:	2b50      	cmp	r3, #80	; 0x50
 8000e30:	d930      	bls.n	8000e94 <myTask_Run+0x77c>
 8000e32:	4b80      	ldr	r3, [pc, #512]	; (8001034 <myTask_Run+0x91c>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b09      	cmp	r3, #9
 8000e3a:	d82b      	bhi.n	8000e94 <myTask_Run+0x77c>
			delay=0;
 8000e3c:	4b7c      	ldr	r3, [pc, #496]	; (8001030 <myTask_Run+0x918>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	801a      	strh	r2, [r3, #0]
			toggle=!(toggle);
 8000e42:	4b7d      	ldr	r3, [pc, #500]	; (8001038 <myTask_Run+0x920>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	bf14      	ite	ne
 8000e4a:	2301      	movne	r3, #1
 8000e4c:	2300      	moveq	r3, #0
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	f083 0301 	eor.w	r3, r3, #1
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	4b76      	ldr	r3, [pc, #472]	; (8001038 <myTask_Run+0x920>)
 8000e5e:	701a      	strb	r2, [r3, #0]
			buzzer(toggle);
 8000e60:	4b75      	ldr	r3, [pc, #468]	; (8001038 <myTask_Run+0x920>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e6a:	4874      	ldr	r0, [pc, #464]	; (800103c <myTask_Run+0x924>)
 8000e6c:	f001 f909 	bl	8002082 <HAL_GPIO_WritePin>
			ledLoading(toggle);
 8000e70:	4b71      	ldr	r3, [pc, #452]	; (8001038 <myTask_Run+0x920>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	f083 0301 	eor.w	r3, r3, #1
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e80:	486f      	ldr	r0, [pc, #444]	; (8001040 <myTask_Run+0x928>)
 8000e82:	f001 f8fe 	bl	8002082 <HAL_GPIO_WritePin>
			i++;
 8000e86:	4b6b      	ldr	r3, [pc, #428]	; (8001034 <myTask_Run+0x91c>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	4b68      	ldr	r3, [pc, #416]	; (8001034 <myTask_Run+0x91c>)
 8000e92:	701a      	strb	r2, [r3, #0]
		}

		/* goto next state after blinky	*/
		if(i>=8){
 8000e94:	4b67      	ldr	r3, [pc, #412]	; (8001034 <myTask_Run+0x91c>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b07      	cmp	r3, #7
 8000e9c:	f240 8170 	bls.w	8001180 <myTask_Run+0xa68>
			ledDrop(1);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ea6:	4866      	ldr	r0, [pc, #408]	; (8001040 <myTask_Run+0x928>)
 8000ea8:	f001 f8eb 	bl	8002082 <HAL_GPIO_WritePin>
			buzzer(1);
 8000eac:	2201      	movs	r2, #1
 8000eae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eb2:	4862      	ldr	r0, [pc, #392]	; (800103c <myTask_Run+0x924>)
 8000eb4:	f001 f8e5 	bl	8002082 <HAL_GPIO_WritePin>
			if(++delay > 500){
 8000eb8:	4b5d      	ldr	r3, [pc, #372]	; (8001030 <myTask_Run+0x918>)
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	4a5b      	ldr	r2, [pc, #364]	; (8001030 <myTask_Run+0x918>)
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	8011      	strh	r1, [r2, #0]
 8000ec8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ecc:	f240 8158 	bls.w	8001180 <myTask_Run+0xa68>
				i=0;
 8000ed0:	4b58      	ldr	r3, [pc, #352]	; (8001034 <myTask_Run+0x91c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
				ledDrop(0);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000edc:	4858      	ldr	r0, [pc, #352]	; (8001040 <myTask_Run+0x928>)
 8000ede:	f001 f8d0 	bl	8002082 <HAL_GPIO_WritePin>
				buzzer(0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ee8:	4854      	ldr	r0, [pc, #336]	; (800103c <myTask_Run+0x924>)
 8000eea:	f001 f8ca 	bl	8002082 <HAL_GPIO_WritePin>
				delay=0;
 8000eee:	4b50      	ldr	r3, [pc, #320]	; (8001030 <myTask_Run+0x918>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	801a      	strh	r2, [r3, #0]
				myLCD_clear();
 8000ef4:	f7ff fbe4 	bl	80006c0 <myLCD_clear>
				printEn=1;
 8000ef8:	4b4a      	ldr	r3, [pc, #296]	; (8001024 <myTask_Run+0x90c>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
				myState=ready;
 8000efe:	4b51      	ldr	r3, [pc, #324]	; (8001044 <myTask_Run+0x92c>)
 8000f00:	2204      	movs	r2, #4
 8000f02:	701a      	strb	r2, [r3, #0]
			}
		}
	}break;
 8000f04:	e13c      	b.n	8001180 <myTask_Run+0xa68>

	case k500:{
		/* Money overflow	*/
		if(money==1500){
 8000f06:	4b50      	ldr	r3, [pc, #320]	; (8001048 <myTask_Run+0x930>)
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d115      	bne.n	8000f40 <myTask_Run+0x828>
			money-=500;		//500 refunded
 8000f14:	4b4c      	ldr	r3, [pc, #304]	; (8001048 <myTask_Run+0x930>)
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	4b49      	ldr	r3, [pc, #292]	; (8001048 <myTask_Run+0x930>)
 8000f22:	801a      	strh	r2, [r3, #0]
			myLCD_setCursor(0, 0); myLCD_print("Money Refunded !");
 8000f24:	2100      	movs	r1, #0
 8000f26:	2000      	movs	r0, #0
 8000f28:	f7ff fb7e 	bl	8000628 <myLCD_setCursor>
 8000f2c:	4847      	ldr	r0, [pc, #284]	; (800104c <myTask_Run+0x934>)
 8000f2e:	f7ff fb99 	bl	8000664 <myLCD_print>
			myLCD_setCursor(0, 1); myLCD_print("Rp.500");
 8000f32:	2101      	movs	r1, #1
 8000f34:	2000      	movs	r0, #0
 8000f36:	f7ff fb77 	bl	8000628 <myLCD_setCursor>
 8000f3a:	4845      	ldr	r0, [pc, #276]	; (8001050 <myTask_Run+0x938>)
 8000f3c:	f7ff fb92 	bl	8000664 <myLCD_print>
		}

		/* Blinky LED and buzzer beep	*/
		if((++delay > 80) && (i<=9)){
 8000f40:	4b3b      	ldr	r3, [pc, #236]	; (8001030 <myTask_Run+0x918>)
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	3301      	adds	r3, #1
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	4a39      	ldr	r2, [pc, #228]	; (8001030 <myTask_Run+0x918>)
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	8011      	strh	r1, [r2, #0]
 8000f50:	2b50      	cmp	r3, #80	; 0x50
 8000f52:	d930      	bls.n	8000fb6 <myTask_Run+0x89e>
 8000f54:	4b37      	ldr	r3, [pc, #220]	; (8001034 <myTask_Run+0x91c>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b09      	cmp	r3, #9
 8000f5c:	d82b      	bhi.n	8000fb6 <myTask_Run+0x89e>
			delay=0;
 8000f5e:	4b34      	ldr	r3, [pc, #208]	; (8001030 <myTask_Run+0x918>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	801a      	strh	r2, [r3, #0]
			toggle=!(toggle);
 8000f64:	4b34      	ldr	r3, [pc, #208]	; (8001038 <myTask_Run+0x920>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	bf14      	ite	ne
 8000f6c:	2301      	movne	r3, #1
 8000f6e:	2300      	moveq	r3, #0
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	f083 0301 	eor.w	r3, r3, #1
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4b2e      	ldr	r3, [pc, #184]	; (8001038 <myTask_Run+0x920>)
 8000f80:	701a      	strb	r2, [r3, #0]
			buzzer(toggle);
 8000f82:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <myTask_Run+0x920>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f8c:	482b      	ldr	r0, [pc, #172]	; (800103c <myTask_Run+0x924>)
 8000f8e:	f001 f878 	bl	8002082 <HAL_GPIO_WritePin>
			ledLoading(toggle);
 8000f92:	4b29      	ldr	r3, [pc, #164]	; (8001038 <myTask_Run+0x920>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	f083 0301 	eor.w	r3, r3, #1
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa2:	4827      	ldr	r0, [pc, #156]	; (8001040 <myTask_Run+0x928>)
 8000fa4:	f001 f86d 	bl	8002082 <HAL_GPIO_WritePin>
			i++;
 8000fa8:	4b22      	ldr	r3, [pc, #136]	; (8001034 <myTask_Run+0x91c>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	3301      	adds	r3, #1
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4b20      	ldr	r3, [pc, #128]	; (8001034 <myTask_Run+0x91c>)
 8000fb4:	701a      	strb	r2, [r3, #0]
		}

		/* goto next state after blinky	*/
		if(i>=8){
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <myTask_Run+0x91c>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b07      	cmp	r3, #7
 8000fbe:	f240 80e1 	bls.w	8001184 <myTask_Run+0xa6c>
			led500(1);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	481e      	ldr	r0, [pc, #120]	; (8001040 <myTask_Run+0x928>)
 8000fc8:	f001 f85b 	bl	8002082 <HAL_GPIO_WritePin>
			buzzer(1);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd2:	481a      	ldr	r0, [pc, #104]	; (800103c <myTask_Run+0x924>)
 8000fd4:	f001 f855 	bl	8002082 <HAL_GPIO_WritePin>
			if(++delay > 500){
 8000fd8:	4b15      	ldr	r3, [pc, #84]	; (8001030 <myTask_Run+0x918>)
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	3301      	adds	r3, #1
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	4a13      	ldr	r2, [pc, #76]	; (8001030 <myTask_Run+0x918>)
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	8011      	strh	r1, [r2, #0]
 8000fe8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fec:	f240 80ca 	bls.w	8001184 <myTask_Run+0xa6c>
				i=0;
 8000ff0:	4b10      	ldr	r3, [pc, #64]	; (8001034 <myTask_Run+0x91c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
				led500(0);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	4811      	ldr	r0, [pc, #68]	; (8001040 <myTask_Run+0x928>)
 8000ffc:	f001 f841 	bl	8002082 <HAL_GPIO_WritePin>
				buzzer(0);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001006:	480d      	ldr	r0, [pc, #52]	; (800103c <myTask_Run+0x924>)
 8001008:	f001 f83b 	bl	8002082 <HAL_GPIO_WritePin>
				delay=0;
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <myTask_Run+0x918>)
 800100e:	2200      	movs	r2, #0
 8001010:	801a      	strh	r2, [r3, #0]
				myLCD_clear();
 8001012:	f7ff fb55 	bl	80006c0 <myLCD_clear>
				printEn=1;
 8001016:	4b03      	ldr	r3, [pc, #12]	; (8001024 <myTask_Run+0x90c>)
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
				myState=ready;
 800101c:	4b09      	ldr	r3, [pc, #36]	; (8001044 <myTask_Run+0x92c>)
 800101e:	2204      	movs	r2, #4
 8001020:	701a      	strb	r2, [r3, #0]
			}
		}
	}break;
 8001022:	e0af      	b.n	8001184 <myTask_Run+0xa6c>
 8001024:	2000009a 	.word	0x2000009a
 8001028:	08003cfc 	.word	0x08003cfc
 800102c:	08003d08 	.word	0x08003d08
 8001030:	2000015a 	.word	0x2000015a
 8001034:	20000098 	.word	0x20000098
 8001038:	20000099 	.word	0x20000099
 800103c:	40010800 	.word	0x40010800
 8001040:	40010c00 	.word	0x40010c00
 8001044:	20000158 	.word	0x20000158
 8001048:	20000096 	.word	0x20000096
 800104c:	08003cd8 	.word	0x08003cd8
 8001050:	08003cec 	.word	0x08003cec

	case k1000:{
		/* Money overflow	*/
		if(money==2000){
 8001054:	4b4e      	ldr	r3, [pc, #312]	; (8001190 <myTask_Run+0xa78>)
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	b29b      	uxth	r3, r3
 800105a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800105e:	d115      	bne.n	800108c <myTask_Run+0x974>
			money-=1000;		//1000 refunded
 8001060:	4b4b      	ldr	r3, [pc, #300]	; (8001190 <myTask_Run+0xa78>)
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	b29b      	uxth	r3, r3
 8001066:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b48      	ldr	r3, [pc, #288]	; (8001190 <myTask_Run+0xa78>)
 800106e:	801a      	strh	r2, [r3, #0]
			myLCD_setCursor(0, 0); myLCD_print("Money Refunded !");
 8001070:	2100      	movs	r1, #0
 8001072:	2000      	movs	r0, #0
 8001074:	f7ff fad8 	bl	8000628 <myLCD_setCursor>
 8001078:	4846      	ldr	r0, [pc, #280]	; (8001194 <myTask_Run+0xa7c>)
 800107a:	f7ff faf3 	bl	8000664 <myLCD_print>
			myLCD_setCursor(0, 1); myLCD_print("Rp.1000");
 800107e:	2101      	movs	r1, #1
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff fad1 	bl	8000628 <myLCD_setCursor>
 8001086:	4844      	ldr	r0, [pc, #272]	; (8001198 <myTask_Run+0xa80>)
 8001088:	f7ff faec 	bl	8000664 <myLCD_print>
		}

		/* Blinky LED and buzzer beep	*/
		if((++delay > 80) && (i<=9)){
 800108c:	4b43      	ldr	r3, [pc, #268]	; (800119c <myTask_Run+0xa84>)
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	b29b      	uxth	r3, r3
 8001092:	3301      	adds	r3, #1
 8001094:	b29b      	uxth	r3, r3
 8001096:	4a41      	ldr	r2, [pc, #260]	; (800119c <myTask_Run+0xa84>)
 8001098:	4619      	mov	r1, r3
 800109a:	8011      	strh	r1, [r2, #0]
 800109c:	2b50      	cmp	r3, #80	; 0x50
 800109e:	d930      	bls.n	8001102 <myTask_Run+0x9ea>
 80010a0:	4b3f      	ldr	r3, [pc, #252]	; (80011a0 <myTask_Run+0xa88>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b09      	cmp	r3, #9
 80010a8:	d82b      	bhi.n	8001102 <myTask_Run+0x9ea>
			delay=0;
 80010aa:	4b3c      	ldr	r3, [pc, #240]	; (800119c <myTask_Run+0xa84>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	801a      	strh	r2, [r3, #0]
			toggle=!(toggle);
 80010b0:	4b3c      	ldr	r3, [pc, #240]	; (80011a4 <myTask_Run+0xa8c>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	bf14      	ite	ne
 80010b8:	2301      	movne	r3, #1
 80010ba:	2300      	moveq	r3, #0
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	f083 0301 	eor.w	r3, r3, #1
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4b36      	ldr	r3, [pc, #216]	; (80011a4 <myTask_Run+0xa8c>)
 80010cc:	701a      	strb	r2, [r3, #0]
			buzzer(toggle);
 80010ce:	4b35      	ldr	r3, [pc, #212]	; (80011a4 <myTask_Run+0xa8c>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010d8:	4833      	ldr	r0, [pc, #204]	; (80011a8 <myTask_Run+0xa90>)
 80010da:	f000 ffd2 	bl	8002082 <HAL_GPIO_WritePin>
			ledLoading(toggle);
 80010de:	4b31      	ldr	r3, [pc, #196]	; (80011a4 <myTask_Run+0xa8c>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	f083 0301 	eor.w	r3, r3, #1
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	461a      	mov	r2, r3
 80010ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ee:	482f      	ldr	r0, [pc, #188]	; (80011ac <myTask_Run+0xa94>)
 80010f0:	f000 ffc7 	bl	8002082 <HAL_GPIO_WritePin>
			i++;
 80010f4:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <myTask_Run+0xa88>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	3301      	adds	r3, #1
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <myTask_Run+0xa88>)
 8001100:	701a      	strb	r2, [r3, #0]
		}

		/* goto next state after blinky	*/
		if(i>=8){
 8001102:	4b27      	ldr	r3, [pc, #156]	; (80011a0 <myTask_Run+0xa88>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b07      	cmp	r3, #7
 800110a:	d93d      	bls.n	8001188 <myTask_Run+0xa70>
			led1000(1);
 800110c:	2200      	movs	r2, #0
 800110e:	2102      	movs	r1, #2
 8001110:	4826      	ldr	r0, [pc, #152]	; (80011ac <myTask_Run+0xa94>)
 8001112:	f000 ffb6 	bl	8002082 <HAL_GPIO_WritePin>
			buzzer(1);
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800111c:	4822      	ldr	r0, [pc, #136]	; (80011a8 <myTask_Run+0xa90>)
 800111e:	f000 ffb0 	bl	8002082 <HAL_GPIO_WritePin>
			if(++delay > 500){
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <myTask_Run+0xa84>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	b29b      	uxth	r3, r3
 8001128:	3301      	adds	r3, #1
 800112a:	b29b      	uxth	r3, r3
 800112c:	4a1b      	ldr	r2, [pc, #108]	; (800119c <myTask_Run+0xa84>)
 800112e:	4619      	mov	r1, r3
 8001130:	8011      	strh	r1, [r2, #0]
 8001132:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001136:	d927      	bls.n	8001188 <myTask_Run+0xa70>
				i=0;
 8001138:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <myTask_Run+0xa88>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
				led1000(0);
 800113e:	2201      	movs	r2, #1
 8001140:	2102      	movs	r1, #2
 8001142:	481a      	ldr	r0, [pc, #104]	; (80011ac <myTask_Run+0xa94>)
 8001144:	f000 ff9d 	bl	8002082 <HAL_GPIO_WritePin>
				buzzer(0);
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800114e:	4816      	ldr	r0, [pc, #88]	; (80011a8 <myTask_Run+0xa90>)
 8001150:	f000 ff97 	bl	8002082 <HAL_GPIO_WritePin>
				delay=0;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <myTask_Run+0xa84>)
 8001156:	2200      	movs	r2, #0
 8001158:	801a      	strh	r2, [r3, #0]
				myLCD_clear();
 800115a:	f7ff fab1 	bl	80006c0 <myLCD_clear>
				printEn=1;
 800115e:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <myTask_Run+0xa98>)
 8001160:	2201      	movs	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
				myState=ready;
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <myTask_Run+0xa9c>)
 8001166:	2204      	movs	r2, #4
 8001168:	701a      	strb	r2, [r3, #0]
			}
		}
	}break;
 800116a:	e00d      	b.n	8001188 <myTask_Run+0xa70>
	}break;
 800116c:	bf00      	nop
 800116e:	e00c      	b.n	800118a <myTask_Run+0xa72>
	}break;
 8001170:	bf00      	nop
 8001172:	e00a      	b.n	800118a <myTask_Run+0xa72>
	}break;
 8001174:	bf00      	nop
 8001176:	e008      	b.n	800118a <myTask_Run+0xa72>
	}break;
 8001178:	bf00      	nop
 800117a:	e006      	b.n	800118a <myTask_Run+0xa72>
	}break;
 800117c:	bf00      	nop
 800117e:	e004      	b.n	800118a <myTask_Run+0xa72>
	}break;
 8001180:	bf00      	nop
 8001182:	e002      	b.n	800118a <myTask_Run+0xa72>
	}break;
 8001184:	bf00      	nop
 8001186:	e000      	b.n	800118a <myTask_Run+0xa72>
	}break;
 8001188:	bf00      	nop
	}
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000096 	.word	0x20000096
 8001194:	08003cd8 	.word	0x08003cd8
 8001198:	08003cf4 	.word	0x08003cf4
 800119c:	2000015a 	.word	0x2000015a
 80011a0:	20000098 	.word	0x20000098
 80011a4:	20000099 	.word	0x20000099
 80011a8:	40010800 	.word	0x40010800
 80011ac:	40010c00 	.word	0x40010c00
 80011b0:	2000009a 	.word	0x2000009a
 80011b4:	20000158 	.word	0x20000158

080011b8 <PB_Process>:


/* ---------------------------------------------------------------------------------------- */
_Bool PB_Process(void){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
	_Bool flagDetect=0;
 80011be:	2300      	movs	r3, #0
 80011c0:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(PB_PROCESS_GPIO_Port, PB_PROCESS_Pin)==0)
 80011c2:	2110      	movs	r1, #16
 80011c4:	4812      	ldr	r0, [pc, #72]	; (8001210 <PB_Process+0x58>)
 80011c6:	f000 ff45 	bl	8002054 <HAL_GPIO_ReadPin>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d107      	bne.n	80011e0 <PB_Process+0x28>
		debounce1 = debounce1<<1;
 80011d0:	4b10      	ldr	r3, [pc, #64]	; (8001214 <PB_Process+0x5c>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	b29a      	uxth	r2, r3
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <PB_Process+0x5c>)
 80011dc:	801a      	strh	r2, [r3, #0]
 80011de:	e00a      	b.n	80011f6 <PB_Process+0x3e>
	else
		debounce1 = (debounce1<<1)|1;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <PB_Process+0x5c>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	b21b      	sxth	r3, r3
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <PB_Process+0x5c>)
 80011f4:	801a      	strh	r2, [r3, #0]
	if(debounce1==3)
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <PB_Process+0x5c>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	d101      	bne.n	8001204 <PB_Process+0x4c>
		flagDetect=1;
 8001200:	2301      	movs	r3, #1
 8001202:	71fb      	strb	r3, [r7, #7]
	return flagDetect;
 8001204:	79fb      	ldrb	r3, [r7, #7]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40010800 	.word	0x40010800
 8001214:	20000000 	.word	0x20000000

08001218 <PB_Cancel>:

_Bool PB_Cancel(void){
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
	_Bool flagDetect=0;
 800121e:	2300      	movs	r3, #0
 8001220:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(PB_CANCEL_GPIO_Port, PB_CANCEL_Pin)==0)
 8001222:	2120      	movs	r1, #32
 8001224:	4812      	ldr	r0, [pc, #72]	; (8001270 <PB_Cancel+0x58>)
 8001226:	f000 ff15 	bl	8002054 <HAL_GPIO_ReadPin>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d107      	bne.n	8001240 <PB_Cancel+0x28>
		debounce2 = debounce2<<1;
 8001230:	4b10      	ldr	r3, [pc, #64]	; (8001274 <PB_Cancel+0x5c>)
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	b29b      	uxth	r3, r3
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	b29a      	uxth	r2, r3
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <PB_Cancel+0x5c>)
 800123c:	801a      	strh	r2, [r3, #0]
 800123e:	e00a      	b.n	8001256 <PB_Cancel+0x3e>
	else
		debounce2 = (debounce2<<1)|1;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <PB_Cancel+0x5c>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	b29b      	uxth	r3, r3
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	b21b      	sxth	r3, r3
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	b21b      	sxth	r3, r3
 8001250:	b29a      	uxth	r2, r3
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <PB_Cancel+0x5c>)
 8001254:	801a      	strh	r2, [r3, #0]
	if(debounce2==3)
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <PB_Cancel+0x5c>)
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	b29b      	uxth	r3, r3
 800125c:	2b03      	cmp	r3, #3
 800125e:	d101      	bne.n	8001264 <PB_Cancel+0x4c>
		flagDetect=1;
 8001260:	2301      	movs	r3, #1
 8001262:	71fb      	strb	r3, [r7, #7]
	return flagDetect;
 8001264:	79fb      	ldrb	r3, [r7, #7]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40010800 	.word	0x40010800
 8001274:	20000002 	.word	0x20000002

08001278 <PB_u500>:

_Bool PB_u500(void){
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
	_Bool flagDetect=0;
 800127e:	2300      	movs	r3, #0
 8001280:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(u500_GPIO_Port, u500_Pin)==0)
 8001282:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001286:	4812      	ldr	r0, [pc, #72]	; (80012d0 <PB_u500+0x58>)
 8001288:	f000 fee4 	bl	8002054 <HAL_GPIO_ReadPin>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d107      	bne.n	80012a2 <PB_u500+0x2a>
		debounce3 = debounce3<<1;
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <PB_u500+0x5c>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	b29b      	uxth	r3, r3
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	b29a      	uxth	r2, r3
 800129c:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <PB_u500+0x5c>)
 800129e:	801a      	strh	r2, [r3, #0]
 80012a0:	e00a      	b.n	80012b8 <PB_u500+0x40>
	else
		debounce3 = (debounce3<<1)|1;
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <PB_u500+0x5c>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <PB_u500+0x5c>)
 80012b6:	801a      	strh	r2, [r3, #0]
	if(debounce3==3)
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <PB_u500+0x5c>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d101      	bne.n	80012c6 <PB_u500+0x4e>
		flagDetect=1;
 80012c2:	2301      	movs	r3, #1
 80012c4:	71fb      	strb	r3, [r7, #7]
	return flagDetect;
 80012c6:	79fb      	ldrb	r3, [r7, #7]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40011000 	.word	0x40011000
 80012d4:	20000004 	.word	0x20000004

080012d8 <PB_u1000>:

_Bool PB_u1000(void){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
	_Bool flagDetect=0;
 80012de:	2300      	movs	r3, #0
 80012e0:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(u1000_GPIO_Port, u1000_Pin)==0)
 80012e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012e6:	4812      	ldr	r0, [pc, #72]	; (8001330 <PB_u1000+0x58>)
 80012e8:	f000 feb4 	bl	8002054 <HAL_GPIO_ReadPin>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d107      	bne.n	8001302 <PB_u1000+0x2a>
		debounce4 = debounce4<<1;
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <PB_u1000+0x5c>)
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <PB_u1000+0x5c>)
 80012fe:	801a      	strh	r2, [r3, #0]
 8001300:	e00a      	b.n	8001318 <PB_u1000+0x40>
	else
		debounce4 = (debounce4<<1)|1;
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <PB_u1000+0x5c>)
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	b29b      	uxth	r3, r3
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	b21b      	sxth	r3, r3
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	b21b      	sxth	r3, r3
 8001312:	b29a      	uxth	r2, r3
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <PB_u1000+0x5c>)
 8001316:	801a      	strh	r2, [r3, #0]
	if(debounce4==3)
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <PB_u1000+0x5c>)
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	b29b      	uxth	r3, r3
 800131e:	2b03      	cmp	r3, #3
 8001320:	d101      	bne.n	8001326 <PB_u1000+0x4e>
		flagDetect=1;
 8001322:	2301      	movs	r3, #1
 8001324:	71fb      	strb	r3, [r7, #7]
	return flagDetect;
 8001326:	79fb      	ldrb	r3, [r7, #7]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40011000 	.word	0x40011000
 8001334:	20000006 	.word	0x20000006

08001338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <HAL_MspInit+0x5c>)
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	4a14      	ldr	r2, [pc, #80]	; (8001394 <HAL_MspInit+0x5c>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6193      	str	r3, [r2, #24]
 800134a:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_MspInit+0x5c>)
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <HAL_MspInit+0x5c>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <HAL_MspInit+0x5c>)
 800135c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001360:	61d3      	str	r3, [r2, #28]
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <HAL_MspInit+0x5c>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_MspInit+0x60>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	4a04      	ldr	r2, [pc, #16]	; (8001398 <HAL_MspInit+0x60>)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138a:	bf00      	nop
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	40021000 	.word	0x40021000
 8001398:	40010000 	.word	0x40010000

0800139c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a14      	ldr	r2, [pc, #80]	; (8001408 <HAL_ADC_MspInit+0x6c>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d121      	bne.n	8001400 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013bc:	4b13      	ldr	r3, [pc, #76]	; (800140c <HAL_ADC_MspInit+0x70>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	4a12      	ldr	r2, [pc, #72]	; (800140c <HAL_ADC_MspInit+0x70>)
 80013c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c6:	6193      	str	r3, [r2, #24]
 80013c8:	4b10      	ldr	r3, [pc, #64]	; (800140c <HAL_ADC_MspInit+0x70>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d4:	4b0d      	ldr	r3, [pc, #52]	; (800140c <HAL_ADC_MspInit+0x70>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	4a0c      	ldr	r2, [pc, #48]	; (800140c <HAL_ADC_MspInit+0x70>)
 80013da:	f043 0304 	orr.w	r3, r3, #4
 80013de:	6193      	str	r3, [r2, #24]
 80013e0:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_ADC_MspInit+0x70>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013ec:	2301      	movs	r3, #1
 80013ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f0:	2303      	movs	r3, #3
 80013f2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	4619      	mov	r1, r3
 80013fa:	4805      	ldr	r0, [pc, #20]	; (8001410 <HAL_ADC_MspInit+0x74>)
 80013fc:	f000 fcd0 	bl	8001da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001400:	bf00      	nop
 8001402:	3720      	adds	r7, #32
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40012400 	.word	0x40012400
 800140c:	40021000 	.word	0x40021000
 8001410:	40010800 	.word	0x40010800

08001414 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001424:	d113      	bne.n	800144e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <HAL_TIM_Base_MspInit+0x44>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <HAL_TIM_Base_MspInit+0x44>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	61d3      	str	r3, [r2, #28]
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <HAL_TIM_Base_MspInit+0x44>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	2100      	movs	r1, #0
 8001442:	201c      	movs	r0, #28
 8001444:	f000 fc75 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001448:	201c      	movs	r0, #28
 800144a:	f000 fc8e 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000

0800145c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a1b      	ldr	r2, [pc, #108]	; (80014e4 <HAL_UART_MspInit+0x88>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d12f      	bne.n	80014dc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800147c:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <HAL_UART_MspInit+0x8c>)
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	4a19      	ldr	r2, [pc, #100]	; (80014e8 <HAL_UART_MspInit+0x8c>)
 8001482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001486:	61d3      	str	r3, [r2, #28]
 8001488:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <HAL_UART_MspInit+0x8c>)
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <HAL_UART_MspInit+0x8c>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	4a13      	ldr	r2, [pc, #76]	; (80014e8 <HAL_UART_MspInit+0x8c>)
 800149a:	f043 0304 	orr.w	r3, r3, #4
 800149e:	6193      	str	r3, [r2, #24]
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <HAL_UART_MspInit+0x8c>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014ac:	2304      	movs	r3, #4
 80014ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	4619      	mov	r1, r3
 80014be:	480b      	ldr	r0, [pc, #44]	; (80014ec <HAL_UART_MspInit+0x90>)
 80014c0:	f000 fc6e 	bl	8001da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014c4:	2308      	movs	r3, #8
 80014c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	4619      	mov	r1, r3
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <HAL_UART_MspInit+0x90>)
 80014d8:	f000 fc62 	bl	8001da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014dc:	bf00      	nop
 80014de:	3720      	adds	r7, #32
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40004400 	.word	0x40004400
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40010800 	.word	0x40010800

080014f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <HardFault_Handler+0x4>

08001502 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <MemManage_Handler+0x4>

08001508 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <BusFault_Handler+0x4>

0800150e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001512:	e7fe      	b.n	8001512 <UsageFault_Handler+0x4>

08001514 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr

0800152c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153c:	f000 f8da 	bl	80016f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}

08001544 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001548:	4803      	ldr	r0, [pc, #12]	; (8001558 <TIM2_IRQHandler+0x14>)
 800154a:	f001 fad3 	bl	8002af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  myTask_Run();
 800154e:	f7ff f8e3 	bl	8000718 <myTask_Run>

  /* USER CODE END TIM2_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200000d8 	.word	0x200000d8

0800155c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <_sbrk+0x50>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d102      	bne.n	8001572 <_sbrk+0x16>
		heap_end = &end;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <_sbrk+0x50>)
 800156e:	4a10      	ldr	r2, [pc, #64]	; (80015b0 <_sbrk+0x54>)
 8001570:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <_sbrk+0x50>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <_sbrk+0x50>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4413      	add	r3, r2
 8001580:	466a      	mov	r2, sp
 8001582:	4293      	cmp	r3, r2
 8001584:	d907      	bls.n	8001596 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001586:	f001 ff17 	bl	80033b8 <__errno>
 800158a:	4602      	mov	r2, r0
 800158c:	230c      	movs	r3, #12
 800158e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001590:	f04f 33ff 	mov.w	r3, #4294967295
 8001594:	e006      	b.n	80015a4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001596:	4b05      	ldr	r3, [pc, #20]	; (80015ac <_sbrk+0x50>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	4a03      	ldr	r2, [pc, #12]	; (80015ac <_sbrk+0x50>)
 80015a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80015a2:	68fb      	ldr	r3, [r7, #12]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	2000009c 	.word	0x2000009c
 80015b0:	20000168 	.word	0x20000168

080015b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <SystemInit+0x5c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a14      	ldr	r2, [pc, #80]	; (8001610 <SystemInit+0x5c>)
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <SystemInit+0x5c>)
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	4911      	ldr	r1, [pc, #68]	; (8001610 <SystemInit+0x5c>)
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <SystemInit+0x60>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <SystemInit+0x5c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <SystemInit+0x5c>)
 80015d6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80015da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015de:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <SystemInit+0x5c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <SystemInit+0x5c>)
 80015e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <SystemInit+0x5c>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	4a07      	ldr	r2, [pc, #28]	; (8001610 <SystemInit+0x5c>)
 80015f2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80015f6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <SystemInit+0x5c>)
 80015fa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80015fe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <SystemInit+0x64>)
 8001602:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001606:	609a      	str	r2, [r3, #8]
#endif 
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	40021000 	.word	0x40021000
 8001614:	f8ff0000 	.word	0xf8ff0000
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800161c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800161e:	e003      	b.n	8001628 <LoopCopyDataInit>

08001620 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001622:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001624:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001626:	3104      	adds	r1, #4

08001628 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001628:	480a      	ldr	r0, [pc, #40]	; (8001654 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800162a:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800162c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800162e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001630:	d3f6      	bcc.n	8001620 <CopyDataInit>
  ldr r2, =_sbss
 8001632:	4a0a      	ldr	r2, [pc, #40]	; (800165c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001634:	e002      	b.n	800163c <LoopFillZerobss>

08001636 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001638:	f842 3b04 	str.w	r3, [r2], #4

0800163c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800163e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001640:	d3f9      	bcc.n	8001636 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001642:	f7ff ffb7 	bl	80015b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001646:	f001 febd 	bl	80033c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800164a:	f7fe fd7f 	bl	800014c <main>
  bx lr
 800164e:	4770      	bx	lr
  ldr r3, =_sidata
 8001650:	08003d80 	.word	0x08003d80
  ldr r0, =_sdata
 8001654:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001658:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 800165c:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8001660:	20000168 	.word	0x20000168

08001664 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001664:	e7fe      	b.n	8001664 <ADC1_2_IRQHandler>
	...

08001668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <HAL_Init+0x28>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a07      	ldr	r2, [pc, #28]	; (8001690 <HAL_Init+0x28>)
 8001672:	f043 0310 	orr.w	r3, r3, #16
 8001676:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001678:	2003      	movs	r0, #3
 800167a:	f000 fb4f 	bl	8001d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800167e:	2000      	movs	r0, #0
 8001680:	f000 f808 	bl	8001694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001684:	f7ff fe58 	bl	8001338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40022000 	.word	0x40022000

08001694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_InitTick+0x54>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_InitTick+0x58>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	4619      	mov	r1, r3
 80016a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 fb67 	bl	8001d86 <HAL_SYSTICK_Config>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e00e      	b.n	80016e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b0f      	cmp	r3, #15
 80016c6:	d80a      	bhi.n	80016de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c8:	2200      	movs	r2, #0
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	f04f 30ff 	mov.w	r0, #4294967295
 80016d0:	f000 fb2f 	bl	8001d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d4:	4a06      	ldr	r2, [pc, #24]	; (80016f0 <HAL_InitTick+0x5c>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	e000      	b.n	80016e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000008 	.word	0x20000008
 80016ec:	20000010 	.word	0x20000010
 80016f0:	2000000c 	.word	0x2000000c

080016f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <HAL_IncTick+0x1c>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	461a      	mov	r2, r3
 80016fe:	4b05      	ldr	r3, [pc, #20]	; (8001714 <HAL_IncTick+0x20>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4413      	add	r3, r2
 8001704:	4a03      	ldr	r2, [pc, #12]	; (8001714 <HAL_IncTick+0x20>)
 8001706:	6013      	str	r3, [r2, #0]
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	20000010 	.word	0x20000010
 8001714:	20000160 	.word	0x20000160

08001718 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return uwTick;
 800171c:	4b02      	ldr	r3, [pc, #8]	; (8001728 <HAL_GetTick+0x10>)
 800171e:	681b      	ldr	r3, [r3, #0]
}
 8001720:	4618      	mov	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	20000160 	.word	0x20000160

0800172c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001734:	f7ff fff0 	bl	8001718 <HAL_GetTick>
 8001738:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001744:	d005      	beq.n	8001752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_Delay+0x40>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4413      	add	r3, r2
 8001750:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001752:	bf00      	nop
 8001754:	f7ff ffe0 	bl	8001718 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	429a      	cmp	r2, r3
 8001762:	d8f7      	bhi.n	8001754 <HAL_Delay+0x28>
  {
  }
}
 8001764:	bf00      	nop
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000010 	.word	0x20000010

08001770 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e0be      	b.n	8001910 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	2b00      	cmp	r3, #0
 800179e:	d109      	bne.n	80017b4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff fdf4 	bl	800139c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 f9ab 	bl	8001b10 <ADC_ConversionStop_Disable>
 80017ba:	4603      	mov	r3, r0
 80017bc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c2:	f003 0310 	and.w	r3, r3, #16
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f040 8099 	bne.w	80018fe <HAL_ADC_Init+0x18e>
 80017cc:	7dfb      	ldrb	r3, [r7, #23]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f040 8095 	bne.w	80018fe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017dc:	f023 0302 	bic.w	r3, r3, #2
 80017e0:	f043 0202 	orr.w	r2, r3, #2
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017f0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	7b1b      	ldrb	r3, [r3, #12]
 80017f6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017f8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001808:	d003      	beq.n	8001812 <HAL_ADC_Init+0xa2>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d102      	bne.n	8001818 <HAL_ADC_Init+0xa8>
 8001812:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001816:	e000      	b.n	800181a <HAL_ADC_Init+0xaa>
 8001818:	2300      	movs	r3, #0
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	7d1b      	ldrb	r3, [r3, #20]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d119      	bne.n	800185c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	7b1b      	ldrb	r3, [r3, #12]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d109      	bne.n	8001844 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	3b01      	subs	r3, #1
 8001836:	035a      	lsls	r2, r3, #13
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	4313      	orrs	r3, r2
 800183c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	e00b      	b.n	800185c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001848:	f043 0220 	orr.w	r2, r3, #32
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001854:	f043 0201 	orr.w	r2, r3, #1
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	430a      	orrs	r2, r1
 800186e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	4b28      	ldr	r3, [pc, #160]	; (8001918 <HAL_ADC_Init+0x1a8>)
 8001878:	4013      	ands	r3, r2
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6812      	ldr	r2, [r2, #0]
 800187e:	68b9      	ldr	r1, [r7, #8]
 8001880:	430b      	orrs	r3, r1
 8001882:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800188c:	d003      	beq.n	8001896 <HAL_ADC_Init+0x126>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d104      	bne.n	80018a0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	3b01      	subs	r3, #1
 800189c:	051b      	lsls	r3, r3, #20
 800189e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	4b18      	ldr	r3, [pc, #96]	; (800191c <HAL_ADC_Init+0x1ac>)
 80018bc:	4013      	ands	r3, r2
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d10b      	bne.n	80018dc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ce:	f023 0303 	bic.w	r3, r3, #3
 80018d2:	f043 0201 	orr.w	r2, r3, #1
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018da:	e018      	b.n	800190e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e0:	f023 0312 	bic.w	r3, r3, #18
 80018e4:	f043 0210 	orr.w	r2, r3, #16
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	f043 0201 	orr.w	r2, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018fc:	e007      	b.n	800190e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001902:	f043 0210 	orr.w	r2, r3, #16
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800190e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	ffe1f7fd 	.word	0xffe1f7fd
 800191c:	ff1f0efe 	.word	0xff1f0efe

08001920 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800192e:	2300      	movs	r3, #0
 8001930:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001938:	2b01      	cmp	r3, #1
 800193a:	d101      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x20>
 800193c:	2302      	movs	r3, #2
 800193e:	e0dc      	b.n	8001afa <HAL_ADC_ConfigChannel+0x1da>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b06      	cmp	r3, #6
 800194e:	d81c      	bhi.n	800198a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	3b05      	subs	r3, #5
 8001962:	221f      	movs	r2, #31
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	4019      	ands	r1, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	6818      	ldr	r0, [r3, #0]
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	3b05      	subs	r3, #5
 800197c:	fa00 f203 	lsl.w	r2, r0, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	635a      	str	r2, [r3, #52]	; 0x34
 8001988:	e03c      	b.n	8001a04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b0c      	cmp	r3, #12
 8001990:	d81c      	bhi.n	80019cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	3b23      	subs	r3, #35	; 0x23
 80019a4:	221f      	movs	r2, #31
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	4019      	ands	r1, r3
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	6818      	ldr	r0, [r3, #0]
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	3b23      	subs	r3, #35	; 0x23
 80019be:	fa00 f203 	lsl.w	r2, r0, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	631a      	str	r2, [r3, #48]	; 0x30
 80019ca:	e01b      	b.n	8001a04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	4613      	mov	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	3b41      	subs	r3, #65	; 0x41
 80019de:	221f      	movs	r2, #31
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	4019      	ands	r1, r3
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	6818      	ldr	r0, [r3, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	3b41      	subs	r3, #65	; 0x41
 80019f8:	fa00 f203 	lsl.w	r2, r0, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b09      	cmp	r3, #9
 8001a0a:	d91c      	bls.n	8001a46 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68d9      	ldr	r1, [r3, #12]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	4613      	mov	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	3b1e      	subs	r3, #30
 8001a1e:	2207      	movs	r2, #7
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	4019      	ands	r1, r3
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	6898      	ldr	r0, [r3, #8]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4613      	mov	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4413      	add	r3, r2
 8001a36:	3b1e      	subs	r3, #30
 8001a38:	fa00 f203 	lsl.w	r2, r0, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	60da      	str	r2, [r3, #12]
 8001a44:	e019      	b.n	8001a7a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6919      	ldr	r1, [r3, #16]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4613      	mov	r3, r2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4413      	add	r3, r2
 8001a56:	2207      	movs	r2, #7
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	4019      	ands	r1, r3
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	6898      	ldr	r0, [r3, #8]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b10      	cmp	r3, #16
 8001a80:	d003      	beq.n	8001a8a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a86:	2b11      	cmp	r3, #17
 8001a88:	d132      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a1d      	ldr	r2, [pc, #116]	; (8001b04 <HAL_ADC_ConfigChannel+0x1e4>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d125      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d126      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ab0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b10      	cmp	r3, #16
 8001ab8:	d11a      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <HAL_ADC_ConfigChannel+0x1e8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a13      	ldr	r2, [pc, #76]	; (8001b0c <HAL_ADC_ConfigChannel+0x1ec>)
 8001ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac4:	0c9a      	lsrs	r2, r3, #18
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ad0:	e002      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f9      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x1b2>
 8001ade:	e007      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae4:	f043 0220 	orr.w	r2, r3, #32
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	40012400 	.word	0x40012400
 8001b08:	20000008 	.word	0x20000008
 8001b0c:	431bde83 	.word	0x431bde83

08001b10 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d127      	bne.n	8001b7a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0201 	bic.w	r2, r2, #1
 8001b38:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b3a:	f7ff fded 	bl	8001718 <HAL_GetTick>
 8001b3e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b40:	e014      	b.n	8001b6c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b42:	f7ff fde9 	bl	8001718 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d90d      	bls.n	8001b6c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b54:	f043 0210 	orr.w	r2, r3, #16
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	f043 0201 	orr.w	r2, r3, #1
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e007      	b.n	8001b7c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d0e3      	beq.n	8001b42 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bb6:	4a04      	ldr	r2, [pc, #16]	; (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	60d3      	str	r3, [r2, #12]
}
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	f003 0307 	and.w	r3, r3, #7
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	db0b      	blt.n	8001c12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	f003 021f 	and.w	r2, r3, #31
 8001c00:	4906      	ldr	r1, [pc, #24]	; (8001c1c <__NVIC_EnableIRQ+0x34>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	2001      	movs	r0, #1
 8001c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	e000e100 	.word	0xe000e100

08001c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	6039      	str	r1, [r7, #0]
 8001c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	db0a      	blt.n	8001c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	490c      	ldr	r1, [pc, #48]	; (8001c6c <__NVIC_SetPriority+0x4c>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	0112      	lsls	r2, r2, #4
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	440b      	add	r3, r1
 8001c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c48:	e00a      	b.n	8001c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4908      	ldr	r1, [pc, #32]	; (8001c70 <__NVIC_SetPriority+0x50>)
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	3b04      	subs	r3, #4
 8001c58:	0112      	lsls	r2, r2, #4
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	761a      	strb	r2, [r3, #24]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000e100 	.word	0xe000e100
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f1c3 0307 	rsb	r3, r3, #7
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	bf28      	it	cs
 8001c92:	2304      	movcs	r3, #4
 8001c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	2b06      	cmp	r3, #6
 8001c9c:	d902      	bls.n	8001ca4 <NVIC_EncodePriority+0x30>
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3b03      	subs	r3, #3
 8001ca2:	e000      	b.n	8001ca6 <NVIC_EncodePriority+0x32>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc6:	43d9      	mvns	r1, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ccc:	4313      	orrs	r3, r2
         );
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3724      	adds	r7, #36	; 0x24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce8:	d301      	bcc.n	8001cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cea:	2301      	movs	r3, #1
 8001cec:	e00f      	b.n	8001d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cee:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <SysTick_Config+0x40>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cf6:	210f      	movs	r1, #15
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	f7ff ff90 	bl	8001c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <SysTick_Config+0x40>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d06:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <SysTick_Config+0x40>)
 8001d08:	2207      	movs	r2, #7
 8001d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	e000e010 	.word	0xe000e010

08001d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ff2d 	bl	8001b84 <__NVIC_SetPriorityGrouping>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d44:	f7ff ff42 	bl	8001bcc <__NVIC_GetPriorityGrouping>
 8001d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	68b9      	ldr	r1, [r7, #8]
 8001d4e:	6978      	ldr	r0, [r7, #20]
 8001d50:	f7ff ff90 	bl	8001c74 <NVIC_EncodePriority>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff5f 	bl	8001c20 <__NVIC_SetPriority>
}
 8001d62:	bf00      	nop
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff35 	bl	8001be8 <__NVIC_EnableIRQ>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ffa2 	bl	8001cd8 <SysTick_Config>
 8001d94:	4603      	mov	r3, r0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b08b      	sub	sp, #44	; 0x2c
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001daa:	2300      	movs	r3, #0
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dae:	2300      	movs	r3, #0
 8001db0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db2:	e127      	b.n	8002004 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001db4:	2201      	movs	r2, #1
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	69fa      	ldr	r2, [r7, #28]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	f040 8116 	bne.w	8001ffe <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b12      	cmp	r3, #18
 8001dd8:	d034      	beq.n	8001e44 <HAL_GPIO_Init+0xa4>
 8001dda:	2b12      	cmp	r3, #18
 8001ddc:	d80d      	bhi.n	8001dfa <HAL_GPIO_Init+0x5a>
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d02b      	beq.n	8001e3a <HAL_GPIO_Init+0x9a>
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d804      	bhi.n	8001df0 <HAL_GPIO_Init+0x50>
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d031      	beq.n	8001e4e <HAL_GPIO_Init+0xae>
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d01c      	beq.n	8001e28 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dee:	e048      	b.n	8001e82 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	d043      	beq.n	8001e7c <HAL_GPIO_Init+0xdc>
 8001df4:	2b11      	cmp	r3, #17
 8001df6:	d01b      	beq.n	8001e30 <HAL_GPIO_Init+0x90>
          break;
 8001df8:	e043      	b.n	8001e82 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001dfa:	4a89      	ldr	r2, [pc, #548]	; (8002020 <HAL_GPIO_Init+0x280>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d026      	beq.n	8001e4e <HAL_GPIO_Init+0xae>
 8001e00:	4a87      	ldr	r2, [pc, #540]	; (8002020 <HAL_GPIO_Init+0x280>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d806      	bhi.n	8001e14 <HAL_GPIO_Init+0x74>
 8001e06:	4a87      	ldr	r2, [pc, #540]	; (8002024 <HAL_GPIO_Init+0x284>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d020      	beq.n	8001e4e <HAL_GPIO_Init+0xae>
 8001e0c:	4a86      	ldr	r2, [pc, #536]	; (8002028 <HAL_GPIO_Init+0x288>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d01d      	beq.n	8001e4e <HAL_GPIO_Init+0xae>
          break;
 8001e12:	e036      	b.n	8001e82 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e14:	4a85      	ldr	r2, [pc, #532]	; (800202c <HAL_GPIO_Init+0x28c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d019      	beq.n	8001e4e <HAL_GPIO_Init+0xae>
 8001e1a:	4a85      	ldr	r2, [pc, #532]	; (8002030 <HAL_GPIO_Init+0x290>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d016      	beq.n	8001e4e <HAL_GPIO_Init+0xae>
 8001e20:	4a84      	ldr	r2, [pc, #528]	; (8002034 <HAL_GPIO_Init+0x294>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d013      	beq.n	8001e4e <HAL_GPIO_Init+0xae>
          break;
 8001e26:	e02c      	b.n	8001e82 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	623b      	str	r3, [r7, #32]
          break;
 8001e2e:	e028      	b.n	8001e82 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	3304      	adds	r3, #4
 8001e36:	623b      	str	r3, [r7, #32]
          break;
 8001e38:	e023      	b.n	8001e82 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	3308      	adds	r3, #8
 8001e40:	623b      	str	r3, [r7, #32]
          break;
 8001e42:	e01e      	b.n	8001e82 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	330c      	adds	r3, #12
 8001e4a:	623b      	str	r3, [r7, #32]
          break;
 8001e4c:	e019      	b.n	8001e82 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d102      	bne.n	8001e5c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e56:	2304      	movs	r3, #4
 8001e58:	623b      	str	r3, [r7, #32]
          break;
 8001e5a:	e012      	b.n	8001e82 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d105      	bne.n	8001e70 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e64:	2308      	movs	r3, #8
 8001e66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	69fa      	ldr	r2, [r7, #28]
 8001e6c:	611a      	str	r2, [r3, #16]
          break;
 8001e6e:	e008      	b.n	8001e82 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e70:	2308      	movs	r3, #8
 8001e72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69fa      	ldr	r2, [r7, #28]
 8001e78:	615a      	str	r2, [r3, #20]
          break;
 8001e7a:	e002      	b.n	8001e82 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	623b      	str	r3, [r7, #32]
          break;
 8001e80:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	2bff      	cmp	r3, #255	; 0xff
 8001e86:	d801      	bhi.n	8001e8c <HAL_GPIO_Init+0xec>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	e001      	b.n	8001e90 <HAL_GPIO_Init+0xf0>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3304      	adds	r3, #4
 8001e90:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	2bff      	cmp	r3, #255	; 0xff
 8001e96:	d802      	bhi.n	8001e9e <HAL_GPIO_Init+0xfe>
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	e002      	b.n	8001ea4 <HAL_GPIO_Init+0x104>
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	3b08      	subs	r3, #8
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	210f      	movs	r1, #15
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	401a      	ands	r2, r3
 8001eb6:	6a39      	ldr	r1, [r7, #32]
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 8096 	beq.w	8001ffe <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ed2:	4b59      	ldr	r3, [pc, #356]	; (8002038 <HAL_GPIO_Init+0x298>)
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	4a58      	ldr	r2, [pc, #352]	; (8002038 <HAL_GPIO_Init+0x298>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6193      	str	r3, [r2, #24]
 8001ede:	4b56      	ldr	r3, [pc, #344]	; (8002038 <HAL_GPIO_Init+0x298>)
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001eea:	4a54      	ldr	r2, [pc, #336]	; (800203c <HAL_GPIO_Init+0x29c>)
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	220f      	movs	r2, #15
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4b      	ldr	r2, [pc, #300]	; (8002040 <HAL_GPIO_Init+0x2a0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d013      	beq.n	8001f3e <HAL_GPIO_Init+0x19e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4a      	ldr	r2, [pc, #296]	; (8002044 <HAL_GPIO_Init+0x2a4>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00d      	beq.n	8001f3a <HAL_GPIO_Init+0x19a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a49      	ldr	r2, [pc, #292]	; (8002048 <HAL_GPIO_Init+0x2a8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d007      	beq.n	8001f36 <HAL_GPIO_Init+0x196>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a48      	ldr	r2, [pc, #288]	; (800204c <HAL_GPIO_Init+0x2ac>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d101      	bne.n	8001f32 <HAL_GPIO_Init+0x192>
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e006      	b.n	8001f40 <HAL_GPIO_Init+0x1a0>
 8001f32:	2304      	movs	r3, #4
 8001f34:	e004      	b.n	8001f40 <HAL_GPIO_Init+0x1a0>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e002      	b.n	8001f40 <HAL_GPIO_Init+0x1a0>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <HAL_GPIO_Init+0x1a0>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f42:	f002 0203 	and.w	r2, r2, #3
 8001f46:	0092      	lsls	r2, r2, #2
 8001f48:	4093      	lsls	r3, r2
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f50:	493a      	ldr	r1, [pc, #232]	; (800203c <HAL_GPIO_Init+0x29c>)
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	089b      	lsrs	r3, r3, #2
 8001f56:	3302      	adds	r3, #2
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d006      	beq.n	8001f78 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f6a:	4b39      	ldr	r3, [pc, #228]	; (8002050 <HAL_GPIO_Init+0x2b0>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	4938      	ldr	r1, [pc, #224]	; (8002050 <HAL_GPIO_Init+0x2b0>)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]
 8001f76:	e006      	b.n	8001f86 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f78:	4b35      	ldr	r3, [pc, #212]	; (8002050 <HAL_GPIO_Init+0x2b0>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	4933      	ldr	r1, [pc, #204]	; (8002050 <HAL_GPIO_Init+0x2b0>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d006      	beq.n	8001fa0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f92:	4b2f      	ldr	r3, [pc, #188]	; (8002050 <HAL_GPIO_Init+0x2b0>)
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	492e      	ldr	r1, [pc, #184]	; (8002050 <HAL_GPIO_Init+0x2b0>)
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	604b      	str	r3, [r1, #4]
 8001f9e:	e006      	b.n	8001fae <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fa0:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <HAL_GPIO_Init+0x2b0>)
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	4929      	ldr	r1, [pc, #164]	; (8002050 <HAL_GPIO_Init+0x2b0>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d006      	beq.n	8001fc8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fba:	4b25      	ldr	r3, [pc, #148]	; (8002050 <HAL_GPIO_Init+0x2b0>)
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	4924      	ldr	r1, [pc, #144]	; (8002050 <HAL_GPIO_Init+0x2b0>)
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	608b      	str	r3, [r1, #8]
 8001fc6:	e006      	b.n	8001fd6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fc8:	4b21      	ldr	r3, [pc, #132]	; (8002050 <HAL_GPIO_Init+0x2b0>)
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	491f      	ldr	r1, [pc, #124]	; (8002050 <HAL_GPIO_Init+0x2b0>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d006      	beq.n	8001ff0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fe2:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <HAL_GPIO_Init+0x2b0>)
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	491a      	ldr	r1, [pc, #104]	; (8002050 <HAL_GPIO_Init+0x2b0>)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	60cb      	str	r3, [r1, #12]
 8001fee:	e006      	b.n	8001ffe <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ff0:	4b17      	ldr	r3, [pc, #92]	; (8002050 <HAL_GPIO_Init+0x2b0>)
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	4915      	ldr	r1, [pc, #84]	; (8002050 <HAL_GPIO_Init+0x2b0>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	3301      	adds	r3, #1
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	fa22 f303 	lsr.w	r3, r2, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	f47f aed0 	bne.w	8001db4 <HAL_GPIO_Init+0x14>
  }
}
 8002014:	bf00      	nop
 8002016:	372c      	adds	r7, #44	; 0x2c
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	10210000 	.word	0x10210000
 8002024:	10110000 	.word	0x10110000
 8002028:	10120000 	.word	0x10120000
 800202c:	10310000 	.word	0x10310000
 8002030:	10320000 	.word	0x10320000
 8002034:	10220000 	.word	0x10220000
 8002038:	40021000 	.word	0x40021000
 800203c:	40010000 	.word	0x40010000
 8002040:	40010800 	.word	0x40010800
 8002044:	40010c00 	.word	0x40010c00
 8002048:	40011000 	.word	0x40011000
 800204c:	40011400 	.word	0x40011400
 8002050:	40010400 	.word	0x40010400

08002054 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	887b      	ldrh	r3, [r7, #2]
 8002066:	4013      	ands	r3, r2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d002      	beq.n	8002072 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800206c:	2301      	movs	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
 8002070:	e001      	b.n	8002076 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002076:	7bfb      	ldrb	r3, [r7, #15]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr

08002082 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	460b      	mov	r3, r1
 800208c:	807b      	strh	r3, [r7, #2]
 800208e:	4613      	mov	r3, r2
 8002090:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002092:	787b      	ldrb	r3, [r7, #1]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002098:	887a      	ldrh	r2, [r7, #2]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800209e:	e003      	b.n	80020a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020a0:	887b      	ldrh	r3, [r7, #2]
 80020a2:	041a      	lsls	r2, r3, #16
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	611a      	str	r2, [r3, #16]
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr
	...

080020b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e26c      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 8087 	beq.w	80021e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020d4:	4b92      	ldr	r3, [pc, #584]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 030c 	and.w	r3, r3, #12
 80020dc:	2b04      	cmp	r3, #4
 80020de:	d00c      	beq.n	80020fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020e0:	4b8f      	ldr	r3, [pc, #572]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d112      	bne.n	8002112 <HAL_RCC_OscConfig+0x5e>
 80020ec:	4b8c      	ldr	r3, [pc, #560]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f8:	d10b      	bne.n	8002112 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fa:	4b89      	ldr	r3, [pc, #548]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d06c      	beq.n	80021e0 <HAL_RCC_OscConfig+0x12c>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d168      	bne.n	80021e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e246      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211a:	d106      	bne.n	800212a <HAL_RCC_OscConfig+0x76>
 800211c:	4b80      	ldr	r3, [pc, #512]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a7f      	ldr	r2, [pc, #508]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002126:	6013      	str	r3, [r2, #0]
 8002128:	e02e      	b.n	8002188 <HAL_RCC_OscConfig+0xd4>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10c      	bne.n	800214c <HAL_RCC_OscConfig+0x98>
 8002132:	4b7b      	ldr	r3, [pc, #492]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a7a      	ldr	r2, [pc, #488]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	4b78      	ldr	r3, [pc, #480]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a77      	ldr	r2, [pc, #476]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002144:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	e01d      	b.n	8002188 <HAL_RCC_OscConfig+0xd4>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002154:	d10c      	bne.n	8002170 <HAL_RCC_OscConfig+0xbc>
 8002156:	4b72      	ldr	r3, [pc, #456]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a71      	ldr	r2, [pc, #452]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 800215c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	4b6f      	ldr	r3, [pc, #444]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a6e      	ldr	r2, [pc, #440]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	e00b      	b.n	8002188 <HAL_RCC_OscConfig+0xd4>
 8002170:	4b6b      	ldr	r3, [pc, #428]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a6a      	ldr	r2, [pc, #424]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800217a:	6013      	str	r3, [r2, #0]
 800217c:	4b68      	ldr	r3, [pc, #416]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a67      	ldr	r2, [pc, #412]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002186:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d013      	beq.n	80021b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002190:	f7ff fac2 	bl	8001718 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002198:	f7ff fabe 	bl	8001718 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b64      	cmp	r3, #100	; 0x64
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e1fa      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021aa:	4b5d      	ldr	r3, [pc, #372]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0xe4>
 80021b6:	e014      	b.n	80021e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b8:	f7ff faae 	bl	8001718 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c0:	f7ff faaa 	bl	8001718 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	; 0x64
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e1e6      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d2:	4b53      	ldr	r3, [pc, #332]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0x10c>
 80021de:	e000      	b.n	80021e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d063      	beq.n	80022b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ee:	4b4c      	ldr	r3, [pc, #304]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00b      	beq.n	8002212 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021fa:	4b49      	ldr	r3, [pc, #292]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b08      	cmp	r3, #8
 8002204:	d11c      	bne.n	8002240 <HAL_RCC_OscConfig+0x18c>
 8002206:	4b46      	ldr	r3, [pc, #280]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d116      	bne.n	8002240 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002212:	4b43      	ldr	r3, [pc, #268]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d005      	beq.n	800222a <HAL_RCC_OscConfig+0x176>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d001      	beq.n	800222a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e1ba      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222a:	4b3d      	ldr	r3, [pc, #244]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4939      	ldr	r1, [pc, #228]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 800223a:	4313      	orrs	r3, r2
 800223c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223e:	e03a      	b.n	80022b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d020      	beq.n	800228a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002248:	4b36      	ldr	r3, [pc, #216]	; (8002324 <HAL_RCC_OscConfig+0x270>)
 800224a:	2201      	movs	r2, #1
 800224c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224e:	f7ff fa63 	bl	8001718 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002256:	f7ff fa5f 	bl	8001718 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e19b      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002268:	4b2d      	ldr	r3, [pc, #180]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0f0      	beq.n	8002256 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002274:	4b2a      	ldr	r3, [pc, #168]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	4927      	ldr	r1, [pc, #156]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002284:	4313      	orrs	r3, r2
 8002286:	600b      	str	r3, [r1, #0]
 8002288:	e015      	b.n	80022b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800228a:	4b26      	ldr	r3, [pc, #152]	; (8002324 <HAL_RCC_OscConfig+0x270>)
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7ff fa42 	bl	8001718 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002298:	f7ff fa3e 	bl	8001718 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e17a      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022aa:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d03a      	beq.n	8002338 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d019      	beq.n	80022fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ca:	4b17      	ldr	r3, [pc, #92]	; (8002328 <HAL_RCC_OscConfig+0x274>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d0:	f7ff fa22 	bl	8001718 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d8:	f7ff fa1e 	bl	8001718 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e15a      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ea:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0f0      	beq.n	80022d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022f6:	2001      	movs	r0, #1
 80022f8:	f000 fada 	bl	80028b0 <RCC_Delay>
 80022fc:	e01c      	b.n	8002338 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <HAL_RCC_OscConfig+0x274>)
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002304:	f7ff fa08 	bl	8001718 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800230a:	e00f      	b.n	800232c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800230c:	f7ff fa04 	bl	8001718 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d908      	bls.n	800232c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e140      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
 800231e:	bf00      	nop
 8002320:	40021000 	.word	0x40021000
 8002324:	42420000 	.word	0x42420000
 8002328:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800232c:	4b9e      	ldr	r3, [pc, #632]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1e9      	bne.n	800230c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 80a6 	beq.w	8002492 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002346:	2300      	movs	r3, #0
 8002348:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800234a:	4b97      	ldr	r3, [pc, #604]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10d      	bne.n	8002372 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002356:	4b94      	ldr	r3, [pc, #592]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	4a93      	ldr	r2, [pc, #588]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800235c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002360:	61d3      	str	r3, [r2, #28]
 8002362:	4b91      	ldr	r3, [pc, #580]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800236e:	2301      	movs	r3, #1
 8002370:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002372:	4b8e      	ldr	r3, [pc, #568]	; (80025ac <HAL_RCC_OscConfig+0x4f8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d118      	bne.n	80023b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800237e:	4b8b      	ldr	r3, [pc, #556]	; (80025ac <HAL_RCC_OscConfig+0x4f8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a8a      	ldr	r2, [pc, #552]	; (80025ac <HAL_RCC_OscConfig+0x4f8>)
 8002384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238a:	f7ff f9c5 	bl	8001718 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002392:	f7ff f9c1 	bl	8001718 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b64      	cmp	r3, #100	; 0x64
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e0fd      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a4:	4b81      	ldr	r3, [pc, #516]	; (80025ac <HAL_RCC_OscConfig+0x4f8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f0      	beq.n	8002392 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d106      	bne.n	80023c6 <HAL_RCC_OscConfig+0x312>
 80023b8:	4b7b      	ldr	r3, [pc, #492]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	4a7a      	ldr	r2, [pc, #488]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6213      	str	r3, [r2, #32]
 80023c4:	e02d      	b.n	8002422 <HAL_RCC_OscConfig+0x36e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCC_OscConfig+0x334>
 80023ce:	4b76      	ldr	r3, [pc, #472]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	4a75      	ldr	r2, [pc, #468]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80023d4:	f023 0301 	bic.w	r3, r3, #1
 80023d8:	6213      	str	r3, [r2, #32]
 80023da:	4b73      	ldr	r3, [pc, #460]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	4a72      	ldr	r2, [pc, #456]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80023e0:	f023 0304 	bic.w	r3, r3, #4
 80023e4:	6213      	str	r3, [r2, #32]
 80023e6:	e01c      	b.n	8002422 <HAL_RCC_OscConfig+0x36e>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b05      	cmp	r3, #5
 80023ee:	d10c      	bne.n	800240a <HAL_RCC_OscConfig+0x356>
 80023f0:	4b6d      	ldr	r3, [pc, #436]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4a6c      	ldr	r2, [pc, #432]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80023f6:	f043 0304 	orr.w	r3, r3, #4
 80023fa:	6213      	str	r3, [r2, #32]
 80023fc:	4b6a      	ldr	r3, [pc, #424]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	4a69      	ldr	r2, [pc, #420]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	6213      	str	r3, [r2, #32]
 8002408:	e00b      	b.n	8002422 <HAL_RCC_OscConfig+0x36e>
 800240a:	4b67      	ldr	r3, [pc, #412]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	4a66      	ldr	r2, [pc, #408]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	6213      	str	r3, [r2, #32]
 8002416:	4b64      	ldr	r3, [pc, #400]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	4a63      	ldr	r2, [pc, #396]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800241c:	f023 0304 	bic.w	r3, r3, #4
 8002420:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d015      	beq.n	8002456 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242a:	f7ff f975 	bl	8001718 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002430:	e00a      	b.n	8002448 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002432:	f7ff f971 	bl	8001718 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002440:	4293      	cmp	r3, r2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e0ab      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002448:	4b57      	ldr	r3, [pc, #348]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0ee      	beq.n	8002432 <HAL_RCC_OscConfig+0x37e>
 8002454:	e014      	b.n	8002480 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002456:	f7ff f95f 	bl	8001718 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800245c:	e00a      	b.n	8002474 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245e:	f7ff f95b 	bl	8001718 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	f241 3288 	movw	r2, #5000	; 0x1388
 800246c:	4293      	cmp	r3, r2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e095      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002474:	4b4c      	ldr	r3, [pc, #304]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1ee      	bne.n	800245e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002480:	7dfb      	ldrb	r3, [r7, #23]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d105      	bne.n	8002492 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002486:	4b48      	ldr	r3, [pc, #288]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	4a47      	ldr	r2, [pc, #284]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800248c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002490:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 8081 	beq.w	800259e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800249c:	4b42      	ldr	r3, [pc, #264]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 030c 	and.w	r3, r3, #12
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d061      	beq.n	800256c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d146      	bne.n	800253e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b0:	4b3f      	ldr	r3, [pc, #252]	; (80025b0 <HAL_RCC_OscConfig+0x4fc>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b6:	f7ff f92f 	bl	8001718 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024be:	f7ff f92b 	bl	8001718 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e067      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d0:	4b35      	ldr	r3, [pc, #212]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1f0      	bne.n	80024be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e4:	d108      	bne.n	80024f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024e6:	4b30      	ldr	r3, [pc, #192]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	492d      	ldr	r1, [pc, #180]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024f8:	4b2b      	ldr	r3, [pc, #172]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a19      	ldr	r1, [r3, #32]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	430b      	orrs	r3, r1
 800250a:	4927      	ldr	r1, [pc, #156]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002510:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <HAL_RCC_OscConfig+0x4fc>)
 8002512:	2201      	movs	r2, #1
 8002514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002516:	f7ff f8ff 	bl	8001718 <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251e:	f7ff f8fb 	bl	8001718 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e037      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002530:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0f0      	beq.n	800251e <HAL_RCC_OscConfig+0x46a>
 800253c:	e02f      	b.n	800259e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253e:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <HAL_RCC_OscConfig+0x4fc>)
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7ff f8e8 	bl	8001718 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254c:	f7ff f8e4 	bl	8001718 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e020      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800255e:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x498>
 800256a:	e018      	b.n	800259e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e013      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	429a      	cmp	r2, r3
 800258a:	d106      	bne.n	800259a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002596:	429a      	cmp	r2, r3
 8002598:	d001      	beq.n	800259e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40007000 	.word	0x40007000
 80025b0:	42420060 	.word	0x42420060

080025b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0d0      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025c8:	4b6a      	ldr	r3, [pc, #424]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d910      	bls.n	80025f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d6:	4b67      	ldr	r3, [pc, #412]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 0207 	bic.w	r2, r3, #7
 80025de:	4965      	ldr	r1, [pc, #404]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e6:	4b63      	ldr	r3, [pc, #396]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d001      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0b8      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d020      	beq.n	8002646 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002610:	4b59      	ldr	r3, [pc, #356]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4a58      	ldr	r2, [pc, #352]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800261a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002628:	4b53      	ldr	r3, [pc, #332]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	4a52      	ldr	r2, [pc, #328]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002632:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002634:	4b50      	ldr	r3, [pc, #320]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	494d      	ldr	r1, [pc, #308]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	4313      	orrs	r3, r2
 8002644:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d040      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d107      	bne.n	800266a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265a:	4b47      	ldr	r3, [pc, #284]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d115      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e07f      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d107      	bne.n	8002682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002672:	4b41      	ldr	r3, [pc, #260]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d109      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e073      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002682:	4b3d      	ldr	r3, [pc, #244]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e06b      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002692:	4b39      	ldr	r3, [pc, #228]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f023 0203 	bic.w	r2, r3, #3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	4936      	ldr	r1, [pc, #216]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026a4:	f7ff f838 	bl	8001718 <HAL_GetTick>
 80026a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026aa:	e00a      	b.n	80026c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ac:	f7ff f834 	bl	8001718 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e053      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c2:	4b2d      	ldr	r3, [pc, #180]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f003 020c 	and.w	r2, r3, #12
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d1eb      	bne.n	80026ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026d4:	4b27      	ldr	r3, [pc, #156]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d210      	bcs.n	8002704 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e2:	4b24      	ldr	r3, [pc, #144]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 0207 	bic.w	r2, r3, #7
 80026ea:	4922      	ldr	r1, [pc, #136]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	4b20      	ldr	r3, [pc, #128]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e032      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d008      	beq.n	8002722 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002710:	4b19      	ldr	r3, [pc, #100]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4916      	ldr	r1, [pc, #88]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800272e:	4b12      	ldr	r3, [pc, #72]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	490e      	ldr	r1, [pc, #56]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	4313      	orrs	r3, r2
 8002740:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002742:	f000 f821 	bl	8002788 <HAL_RCC_GetSysClockFreq>
 8002746:	4601      	mov	r1, r0
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	091b      	lsrs	r3, r3, #4
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	4a0a      	ldr	r2, [pc, #40]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002754:	5cd3      	ldrb	r3, [r2, r3]
 8002756:	fa21 f303 	lsr.w	r3, r1, r3
 800275a:	4a09      	ldr	r2, [pc, #36]	; (8002780 <HAL_RCC_ClockConfig+0x1cc>)
 800275c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800275e:	4b09      	ldr	r3, [pc, #36]	; (8002784 <HAL_RCC_ClockConfig+0x1d0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe ff96 	bl	8001694 <HAL_InitTick>

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40022000 	.word	0x40022000
 8002778:	40021000 	.word	0x40021000
 800277c:	08003d2c 	.word	0x08003d2c
 8002780:	20000008 	.word	0x20000008
 8002784:	2000000c 	.word	0x2000000c

08002788 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002788:	b490      	push	{r4, r7}
 800278a:	b08a      	sub	sp, #40	; 0x28
 800278c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800278e:	4b2a      	ldr	r3, [pc, #168]	; (8002838 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002790:	1d3c      	adds	r4, r7, #4
 8002792:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002794:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002798:	4b28      	ldr	r3, [pc, #160]	; (800283c <HAL_RCC_GetSysClockFreq+0xb4>)
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
 80027a6:	2300      	movs	r3, #0
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027b2:	4b23      	ldr	r3, [pc, #140]	; (8002840 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d002      	beq.n	80027c8 <HAL_RCC_GetSysClockFreq+0x40>
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d003      	beq.n	80027ce <HAL_RCC_GetSysClockFreq+0x46>
 80027c6:	e02d      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027c8:	4b1e      	ldr	r3, [pc, #120]	; (8002844 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027ca:	623b      	str	r3, [r7, #32]
      break;
 80027cc:	e02d      	b.n	800282a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	0c9b      	lsrs	r3, r3, #18
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027da:	4413      	add	r3, r2
 80027dc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027e0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d013      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027ec:	4b14      	ldr	r3, [pc, #80]	; (8002840 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	0c5b      	lsrs	r3, r3, #17
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027fa:	4413      	add	r3, r2
 80027fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002800:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	4a0f      	ldr	r2, [pc, #60]	; (8002844 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002806:	fb02 f203 	mul.w	r2, r2, r3
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
 8002812:	e004      	b.n	800281e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	4a0c      	ldr	r2, [pc, #48]	; (8002848 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002818:	fb02 f303 	mul.w	r3, r2, r3
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	623b      	str	r3, [r7, #32]
      break;
 8002822:	e002      	b.n	800282a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002824:	4b07      	ldr	r3, [pc, #28]	; (8002844 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002826:	623b      	str	r3, [r7, #32]
      break;
 8002828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800282a:	6a3b      	ldr	r3, [r7, #32]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3728      	adds	r7, #40	; 0x28
 8002830:	46bd      	mov	sp, r7
 8002832:	bc90      	pop	{r4, r7}
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	08003d18 	.word	0x08003d18
 800283c:	08003d28 	.word	0x08003d28
 8002840:	40021000 	.word	0x40021000
 8002844:	007a1200 	.word	0x007a1200
 8002848:	003d0900 	.word	0x003d0900

0800284c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002850:	4b02      	ldr	r3, [pc, #8]	; (800285c <HAL_RCC_GetHCLKFreq+0x10>)
 8002852:	681b      	ldr	r3, [r3, #0]
}
 8002854:	4618      	mov	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr
 800285c:	20000008 	.word	0x20000008

08002860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002864:	f7ff fff2 	bl	800284c <HAL_RCC_GetHCLKFreq>
 8002868:	4601      	mov	r1, r0
 800286a:	4b05      	ldr	r3, [pc, #20]	; (8002880 <HAL_RCC_GetPCLK1Freq+0x20>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	0a1b      	lsrs	r3, r3, #8
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	4a03      	ldr	r2, [pc, #12]	; (8002884 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002876:	5cd3      	ldrb	r3, [r2, r3]
 8002878:	fa21 f303 	lsr.w	r3, r1, r3
}
 800287c:	4618      	mov	r0, r3
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40021000 	.word	0x40021000
 8002884:	08003d3c 	.word	0x08003d3c

08002888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800288c:	f7ff ffde 	bl	800284c <HAL_RCC_GetHCLKFreq>
 8002890:	4601      	mov	r1, r0
 8002892:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	0adb      	lsrs	r3, r3, #11
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	4a03      	ldr	r2, [pc, #12]	; (80028ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800289e:	5cd3      	ldrb	r3, [r2, r3]
 80028a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40021000 	.word	0x40021000
 80028ac:	08003d3c 	.word	0x08003d3c

080028b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028b8:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <RCC_Delay+0x34>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <RCC_Delay+0x38>)
 80028be:	fba2 2303 	umull	r2, r3, r2, r3
 80028c2:	0a5b      	lsrs	r3, r3, #9
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	fb02 f303 	mul.w	r3, r2, r3
 80028ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028cc:	bf00      	nop
  }
  while (Delay --);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1e5a      	subs	r2, r3, #1
 80028d2:	60fa      	str	r2, [r7, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f9      	bne.n	80028cc <RCC_Delay+0x1c>
}
 80028d8:	bf00      	nop
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	20000008 	.word	0x20000008
 80028e8:	10624dd3 	.word	0x10624dd3

080028ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d07d      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002908:	2300      	movs	r3, #0
 800290a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800290c:	4b4f      	ldr	r3, [pc, #316]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10d      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002918:	4b4c      	ldr	r3, [pc, #304]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	4a4b      	ldr	r2, [pc, #300]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002922:	61d3      	str	r3, [r2, #28]
 8002924:	4b49      	ldr	r3, [pc, #292]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002930:	2301      	movs	r3, #1
 8002932:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002934:	4b46      	ldr	r3, [pc, #280]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d118      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002940:	4b43      	ldr	r3, [pc, #268]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a42      	ldr	r2, [pc, #264]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800294c:	f7fe fee4 	bl	8001718 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002952:	e008      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002954:	f7fe fee0 	bl	8001718 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b64      	cmp	r3, #100	; 0x64
 8002960:	d901      	bls.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e06d      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002966:	4b3a      	ldr	r3, [pc, #232]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002972:	4b36      	ldr	r3, [pc, #216]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800297a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d02e      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	429a      	cmp	r2, r3
 800298e:	d027      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002990:	4b2e      	ldr	r3, [pc, #184]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002998:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800299a:	4b2e      	ldr	r3, [pc, #184]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800299c:	2201      	movs	r2, #1
 800299e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029a0:	4b2c      	ldr	r3, [pc, #176]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029a6:	4a29      	ldr	r2, [pc, #164]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d014      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b6:	f7fe feaf 	bl	8001718 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029bc:	e00a      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029be:	f7fe feab 	bl	8001718 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e036      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d4:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0ee      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029e0:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	4917      	ldr	r1, [pc, #92]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029f2:	7dfb      	ldrb	r3, [r7, #23]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d105      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f8:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	4a13      	ldr	r2, [pc, #76]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a10:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	490b      	ldr	r1, [pc, #44]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0310 	and.w	r3, r3, #16
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d008      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a2e:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	4904      	ldr	r1, [pc, #16]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40007000 	.word	0x40007000
 8002a54:	42420440 	.word	0x42420440

08002a58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e01d      	b.n	8002aa6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d106      	bne.n	8002a84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7fe fcc8 	bl	8001414 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3304      	adds	r3, #4
 8002a94:	4619      	mov	r1, r3
 8002a96:	4610      	mov	r0, r2
 8002a98:	f000 fa18 	bl	8002ecc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b085      	sub	sp, #20
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f042 0201 	orr.w	r2, r2, #1
 8002ac4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2b06      	cmp	r3, #6
 8002ad6:	d007      	beq.n	8002ae8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0201 	orr.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr

08002af4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d122      	bne.n	8002b50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d11b      	bne.n	8002b50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f06f 0202 	mvn.w	r2, #2
 8002b20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f9ad 	bl	8002e96 <HAL_TIM_IC_CaptureCallback>
 8002b3c:	e005      	b.n	8002b4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f9a0 	bl	8002e84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f9af 	bl	8002ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d122      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d11b      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f06f 0204 	mvn.w	r2, #4
 8002b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2202      	movs	r2, #2
 8002b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f983 	bl	8002e96 <HAL_TIM_IC_CaptureCallback>
 8002b90:	e005      	b.n	8002b9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f976 	bl	8002e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f985 	bl	8002ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d122      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d11b      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 0208 	mvn.w	r2, #8
 8002bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2204      	movs	r2, #4
 8002bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f959 	bl	8002e96 <HAL_TIM_IC_CaptureCallback>
 8002be4:	e005      	b.n	8002bf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f94c 	bl	8002e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f95b 	bl	8002ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	2b10      	cmp	r3, #16
 8002c04:	d122      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	2b10      	cmp	r3, #16
 8002c12:	d11b      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f06f 0210 	mvn.w	r2, #16
 8002c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2208      	movs	r2, #8
 8002c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f92f 	bl	8002e96 <HAL_TIM_IC_CaptureCallback>
 8002c38:	e005      	b.n	8002c46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f922 	bl	8002e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f931 	bl	8002ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d10e      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d107      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0201 	mvn.w	r2, #1
 8002c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f8fd 	bl	8002e72 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c82:	2b80      	cmp	r3, #128	; 0x80
 8002c84:	d10e      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c90:	2b80      	cmp	r3, #128	; 0x80
 8002c92:	d107      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 fa59 	bl	8003156 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cae:	2b40      	cmp	r3, #64	; 0x40
 8002cb0:	d10e      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cbc:	2b40      	cmp	r3, #64	; 0x40
 8002cbe:	d107      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f8f5 	bl	8002eba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f003 0320 	and.w	r3, r3, #32
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	d10e      	bne.n	8002cfc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f003 0320 	and.w	r3, r3, #32
 8002ce8:	2b20      	cmp	r3, #32
 8002cea:	d107      	bne.n	8002cfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f06f 0220 	mvn.w	r2, #32
 8002cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fa24 	bl	8003144 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <HAL_TIM_ConfigClockSource+0x18>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e0a6      	b.n	8002e6a <HAL_TIM_ConfigClockSource+0x166>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d42:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b40      	cmp	r3, #64	; 0x40
 8002d52:	d067      	beq.n	8002e24 <HAL_TIM_ConfigClockSource+0x120>
 8002d54:	2b40      	cmp	r3, #64	; 0x40
 8002d56:	d80b      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x6c>
 8002d58:	2b10      	cmp	r3, #16
 8002d5a:	d073      	beq.n	8002e44 <HAL_TIM_ConfigClockSource+0x140>
 8002d5c:	2b10      	cmp	r3, #16
 8002d5e:	d802      	bhi.n	8002d66 <HAL_TIM_ConfigClockSource+0x62>
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d06f      	beq.n	8002e44 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002d64:	e078      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	d06c      	beq.n	8002e44 <HAL_TIM_ConfigClockSource+0x140>
 8002d6a:	2b30      	cmp	r3, #48	; 0x30
 8002d6c:	d06a      	beq.n	8002e44 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002d6e:	e073      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d70:	2b70      	cmp	r3, #112	; 0x70
 8002d72:	d00d      	beq.n	8002d90 <HAL_TIM_ConfigClockSource+0x8c>
 8002d74:	2b70      	cmp	r3, #112	; 0x70
 8002d76:	d804      	bhi.n	8002d82 <HAL_TIM_ConfigClockSource+0x7e>
 8002d78:	2b50      	cmp	r3, #80	; 0x50
 8002d7a:	d033      	beq.n	8002de4 <HAL_TIM_ConfigClockSource+0xe0>
 8002d7c:	2b60      	cmp	r3, #96	; 0x60
 8002d7e:	d041      	beq.n	8002e04 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002d80:	e06a      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d86:	d066      	beq.n	8002e56 <HAL_TIM_ConfigClockSource+0x152>
 8002d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d8c:	d017      	beq.n	8002dbe <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002d8e:	e063      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	6899      	ldr	r1, [r3, #8]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f000 f96d 	bl	800307e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002db2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	609a      	str	r2, [r3, #8]
      break;
 8002dbc:	e04c      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	6899      	ldr	r1, [r3, #8]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f000 f956 	bl	800307e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002de0:	609a      	str	r2, [r3, #8]
      break;
 8002de2:	e039      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6818      	ldr	r0, [r3, #0]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	6859      	ldr	r1, [r3, #4]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	461a      	mov	r2, r3
 8002df2:	f000 f8cd 	bl	8002f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2150      	movs	r1, #80	; 0x50
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 f924 	bl	800304a <TIM_ITRx_SetConfig>
      break;
 8002e02:	e029      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	6859      	ldr	r1, [r3, #4]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	461a      	mov	r2, r3
 8002e12:	f000 f8eb 	bl	8002fec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2160      	movs	r1, #96	; 0x60
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 f914 	bl	800304a <TIM_ITRx_SetConfig>
      break;
 8002e22:	e019      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	6859      	ldr	r1, [r3, #4]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	461a      	mov	r2, r3
 8002e32:	f000 f8ad 	bl	8002f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2140      	movs	r1, #64	; 0x40
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 f904 	bl	800304a <TIM_ITRx_SetConfig>
      break;
 8002e42:	e009      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4610      	mov	r0, r2
 8002e50:	f000 f8fb 	bl	800304a <TIM_ITRx_SetConfig>
      break;
 8002e54:	e000      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002e56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr

08002e96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr

08002eba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a29      	ldr	r2, [pc, #164]	; (8002f84 <TIM_Base_SetConfig+0xb8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d00b      	beq.n	8002efc <TIM_Base_SetConfig+0x30>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eea:	d007      	beq.n	8002efc <TIM_Base_SetConfig+0x30>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a26      	ldr	r2, [pc, #152]	; (8002f88 <TIM_Base_SetConfig+0xbc>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d003      	beq.n	8002efc <TIM_Base_SetConfig+0x30>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a25      	ldr	r2, [pc, #148]	; (8002f8c <TIM_Base_SetConfig+0xc0>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d108      	bne.n	8002f0e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a1c      	ldr	r2, [pc, #112]	; (8002f84 <TIM_Base_SetConfig+0xb8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d00b      	beq.n	8002f2e <TIM_Base_SetConfig+0x62>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f1c:	d007      	beq.n	8002f2e <TIM_Base_SetConfig+0x62>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a19      	ldr	r2, [pc, #100]	; (8002f88 <TIM_Base_SetConfig+0xbc>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d003      	beq.n	8002f2e <TIM_Base_SetConfig+0x62>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a18      	ldr	r2, [pc, #96]	; (8002f8c <TIM_Base_SetConfig+0xc0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d108      	bne.n	8002f40 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a07      	ldr	r2, [pc, #28]	; (8002f84 <TIM_Base_SetConfig+0xb8>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d103      	bne.n	8002f74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	615a      	str	r2, [r3, #20]
}
 8002f7a:	bf00      	nop
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr
 8002f84:	40012c00 	.word	0x40012c00
 8002f88:	40000400 	.word	0x40000400
 8002f8c:	40000800 	.word	0x40000800

08002f90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	f023 0201 	bic.w	r2, r3, #1
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f023 030a 	bic.w	r3, r3, #10
 8002fcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	621a      	str	r2, [r3, #32]
}
 8002fe2:	bf00      	nop
 8002fe4:	371c      	adds	r7, #28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr

08002fec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	f023 0210 	bic.w	r2, r3, #16
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003016:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	031b      	lsls	r3, r3, #12
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	4313      	orrs	r3, r2
 8003020:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003028:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	621a      	str	r2, [r3, #32]
}
 8003040:	bf00      	nop
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr

0800304a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800304a:	b480      	push	{r7}
 800304c:	b085      	sub	sp, #20
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003060:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	f043 0307 	orr.w	r3, r3, #7
 800306c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	609a      	str	r2, [r3, #8]
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr

0800307e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800307e:	b480      	push	{r7}
 8003080:	b087      	sub	sp, #28
 8003082:	af00      	add	r7, sp, #0
 8003084:	60f8      	str	r0, [r7, #12]
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	607a      	str	r2, [r7, #4]
 800308a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003098:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	021a      	lsls	r2, r3, #8
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	431a      	orrs	r2, r3
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	609a      	str	r2, [r3, #8]
}
 80030b2:	bf00      	nop
 80030b4:	371c      	adds	r7, #28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e032      	b.n	800313a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800310c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	4313      	orrs	r3, r2
 8003116:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr

08003144 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr

08003156 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr

08003168 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e03f      	b.n	80031fa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d106      	bne.n	8003194 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7fe f964 	bl	800145c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2224      	movs	r2, #36	; 0x24
 8003198:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f829 	bl	8003204 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695a      	ldr	r2, [r3, #20]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	4313      	orrs	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800323e:	f023 030c 	bic.w	r3, r3, #12
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6812      	ldr	r2, [r2, #0]
 8003246:	68f9      	ldr	r1, [r7, #12]
 8003248:	430b      	orrs	r3, r1
 800324a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699a      	ldr	r2, [r3, #24]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a52      	ldr	r2, [pc, #328]	; (80033b0 <UART_SetConfig+0x1ac>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d14e      	bne.n	800330a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800326c:	f7ff fb0c 	bl	8002888 <HAL_RCC_GetPCLK2Freq>
 8003270:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	009a      	lsls	r2, r3, #2
 800327c:	441a      	add	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	fbb2 f3f3 	udiv	r3, r2, r3
 8003288:	4a4a      	ldr	r2, [pc, #296]	; (80033b4 <UART_SetConfig+0x1b0>)
 800328a:	fba2 2303 	umull	r2, r3, r2, r3
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	0119      	lsls	r1, r3, #4
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	009a      	lsls	r2, r3, #2
 800329c:	441a      	add	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80032a8:	4b42      	ldr	r3, [pc, #264]	; (80033b4 <UART_SetConfig+0x1b0>)
 80032aa:	fba3 0302 	umull	r0, r3, r3, r2
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	2064      	movs	r0, #100	; 0x64
 80032b2:	fb00 f303 	mul.w	r3, r0, r3
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	3332      	adds	r3, #50	; 0x32
 80032bc:	4a3d      	ldr	r2, [pc, #244]	; (80033b4 <UART_SetConfig+0x1b0>)
 80032be:	fba2 2303 	umull	r2, r3, r2, r3
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032c8:	4419      	add	r1, r3
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	009a      	lsls	r2, r3, #2
 80032d4:	441a      	add	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80032e0:	4b34      	ldr	r3, [pc, #208]	; (80033b4 <UART_SetConfig+0x1b0>)
 80032e2:	fba3 0302 	umull	r0, r3, r3, r2
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	2064      	movs	r0, #100	; 0x64
 80032ea:	fb00 f303 	mul.w	r3, r0, r3
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	3332      	adds	r3, #50	; 0x32
 80032f4:	4a2f      	ldr	r2, [pc, #188]	; (80033b4 <UART_SetConfig+0x1b0>)
 80032f6:	fba2 2303 	umull	r2, r3, r2, r3
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	f003 020f 	and.w	r2, r3, #15
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	440a      	add	r2, r1
 8003306:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003308:	e04d      	b.n	80033a6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800330a:	f7ff faa9 	bl	8002860 <HAL_RCC_GetPCLK1Freq>
 800330e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	4613      	mov	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	009a      	lsls	r2, r3, #2
 800331a:	441a      	add	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	fbb2 f3f3 	udiv	r3, r2, r3
 8003326:	4a23      	ldr	r2, [pc, #140]	; (80033b4 <UART_SetConfig+0x1b0>)
 8003328:	fba2 2303 	umull	r2, r3, r2, r3
 800332c:	095b      	lsrs	r3, r3, #5
 800332e:	0119      	lsls	r1, r3, #4
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	009a      	lsls	r2, r3, #2
 800333a:	441a      	add	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	fbb2 f2f3 	udiv	r2, r2, r3
 8003346:	4b1b      	ldr	r3, [pc, #108]	; (80033b4 <UART_SetConfig+0x1b0>)
 8003348:	fba3 0302 	umull	r0, r3, r3, r2
 800334c:	095b      	lsrs	r3, r3, #5
 800334e:	2064      	movs	r0, #100	; 0x64
 8003350:	fb00 f303 	mul.w	r3, r0, r3
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	3332      	adds	r3, #50	; 0x32
 800335a:	4a16      	ldr	r2, [pc, #88]	; (80033b4 <UART_SetConfig+0x1b0>)
 800335c:	fba2 2303 	umull	r2, r3, r2, r3
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003366:	4419      	add	r1, r3
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	009a      	lsls	r2, r3, #2
 8003372:	441a      	add	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	fbb2 f2f3 	udiv	r2, r2, r3
 800337e:	4b0d      	ldr	r3, [pc, #52]	; (80033b4 <UART_SetConfig+0x1b0>)
 8003380:	fba3 0302 	umull	r0, r3, r3, r2
 8003384:	095b      	lsrs	r3, r3, #5
 8003386:	2064      	movs	r0, #100	; 0x64
 8003388:	fb00 f303 	mul.w	r3, r0, r3
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	3332      	adds	r3, #50	; 0x32
 8003392:	4a08      	ldr	r2, [pc, #32]	; (80033b4 <UART_SetConfig+0x1b0>)
 8003394:	fba2 2303 	umull	r2, r3, r2, r3
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	f003 020f 	and.w	r2, r3, #15
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	440a      	add	r2, r1
 80033a4:	609a      	str	r2, [r3, #8]
}
 80033a6:	bf00      	nop
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40013800 	.word	0x40013800
 80033b4:	51eb851f 	.word	0x51eb851f

080033b8 <__errno>:
 80033b8:	4b01      	ldr	r3, [pc, #4]	; (80033c0 <__errno+0x8>)
 80033ba:	6818      	ldr	r0, [r3, #0]
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	20000014 	.word	0x20000014

080033c4 <__libc_init_array>:
 80033c4:	b570      	push	{r4, r5, r6, lr}
 80033c6:	2500      	movs	r5, #0
 80033c8:	4e0c      	ldr	r6, [pc, #48]	; (80033fc <__libc_init_array+0x38>)
 80033ca:	4c0d      	ldr	r4, [pc, #52]	; (8003400 <__libc_init_array+0x3c>)
 80033cc:	1ba4      	subs	r4, r4, r6
 80033ce:	10a4      	asrs	r4, r4, #2
 80033d0:	42a5      	cmp	r5, r4
 80033d2:	d109      	bne.n	80033e8 <__libc_init_array+0x24>
 80033d4:	f000 fc34 	bl	8003c40 <_init>
 80033d8:	2500      	movs	r5, #0
 80033da:	4e0a      	ldr	r6, [pc, #40]	; (8003404 <__libc_init_array+0x40>)
 80033dc:	4c0a      	ldr	r4, [pc, #40]	; (8003408 <__libc_init_array+0x44>)
 80033de:	1ba4      	subs	r4, r4, r6
 80033e0:	10a4      	asrs	r4, r4, #2
 80033e2:	42a5      	cmp	r5, r4
 80033e4:	d105      	bne.n	80033f2 <__libc_init_array+0x2e>
 80033e6:	bd70      	pop	{r4, r5, r6, pc}
 80033e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033ec:	4798      	blx	r3
 80033ee:	3501      	adds	r5, #1
 80033f0:	e7ee      	b.n	80033d0 <__libc_init_array+0xc>
 80033f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033f6:	4798      	blx	r3
 80033f8:	3501      	adds	r5, #1
 80033fa:	e7f2      	b.n	80033e2 <__libc_init_array+0x1e>
 80033fc:	08003d78 	.word	0x08003d78
 8003400:	08003d78 	.word	0x08003d78
 8003404:	08003d78 	.word	0x08003d78
 8003408:	08003d7c 	.word	0x08003d7c

0800340c <memset>:
 800340c:	4603      	mov	r3, r0
 800340e:	4402      	add	r2, r0
 8003410:	4293      	cmp	r3, r2
 8003412:	d100      	bne.n	8003416 <memset+0xa>
 8003414:	4770      	bx	lr
 8003416:	f803 1b01 	strb.w	r1, [r3], #1
 800341a:	e7f9      	b.n	8003410 <memset+0x4>

0800341c <siprintf>:
 800341c:	b40e      	push	{r1, r2, r3}
 800341e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003422:	b500      	push	{lr}
 8003424:	b09c      	sub	sp, #112	; 0x70
 8003426:	ab1d      	add	r3, sp, #116	; 0x74
 8003428:	9002      	str	r0, [sp, #8]
 800342a:	9006      	str	r0, [sp, #24]
 800342c:	9107      	str	r1, [sp, #28]
 800342e:	9104      	str	r1, [sp, #16]
 8003430:	4808      	ldr	r0, [pc, #32]	; (8003454 <siprintf+0x38>)
 8003432:	4909      	ldr	r1, [pc, #36]	; (8003458 <siprintf+0x3c>)
 8003434:	f853 2b04 	ldr.w	r2, [r3], #4
 8003438:	9105      	str	r1, [sp, #20]
 800343a:	6800      	ldr	r0, [r0, #0]
 800343c:	a902      	add	r1, sp, #8
 800343e:	9301      	str	r3, [sp, #4]
 8003440:	f000 f866 	bl	8003510 <_svfiprintf_r>
 8003444:	2200      	movs	r2, #0
 8003446:	9b02      	ldr	r3, [sp, #8]
 8003448:	701a      	strb	r2, [r3, #0]
 800344a:	b01c      	add	sp, #112	; 0x70
 800344c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003450:	b003      	add	sp, #12
 8003452:	4770      	bx	lr
 8003454:	20000014 	.word	0x20000014
 8003458:	ffff0208 	.word	0xffff0208

0800345c <__ssputs_r>:
 800345c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003460:	688e      	ldr	r6, [r1, #8]
 8003462:	4682      	mov	sl, r0
 8003464:	429e      	cmp	r6, r3
 8003466:	460c      	mov	r4, r1
 8003468:	4690      	mov	r8, r2
 800346a:	4699      	mov	r9, r3
 800346c:	d837      	bhi.n	80034de <__ssputs_r+0x82>
 800346e:	898a      	ldrh	r2, [r1, #12]
 8003470:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003474:	d031      	beq.n	80034da <__ssputs_r+0x7e>
 8003476:	2302      	movs	r3, #2
 8003478:	6825      	ldr	r5, [r4, #0]
 800347a:	6909      	ldr	r1, [r1, #16]
 800347c:	1a6f      	subs	r7, r5, r1
 800347e:	6965      	ldr	r5, [r4, #20]
 8003480:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003484:	fb95 f5f3 	sdiv	r5, r5, r3
 8003488:	f109 0301 	add.w	r3, r9, #1
 800348c:	443b      	add	r3, r7
 800348e:	429d      	cmp	r5, r3
 8003490:	bf38      	it	cc
 8003492:	461d      	movcc	r5, r3
 8003494:	0553      	lsls	r3, r2, #21
 8003496:	d530      	bpl.n	80034fa <__ssputs_r+0x9e>
 8003498:	4629      	mov	r1, r5
 800349a:	f000 fb37 	bl	8003b0c <_malloc_r>
 800349e:	4606      	mov	r6, r0
 80034a0:	b950      	cbnz	r0, 80034b8 <__ssputs_r+0x5c>
 80034a2:	230c      	movs	r3, #12
 80034a4:	f04f 30ff 	mov.w	r0, #4294967295
 80034a8:	f8ca 3000 	str.w	r3, [sl]
 80034ac:	89a3      	ldrh	r3, [r4, #12]
 80034ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034b2:	81a3      	strh	r3, [r4, #12]
 80034b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034b8:	463a      	mov	r2, r7
 80034ba:	6921      	ldr	r1, [r4, #16]
 80034bc:	f000 fab6 	bl	8003a2c <memcpy>
 80034c0:	89a3      	ldrh	r3, [r4, #12]
 80034c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80034c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ca:	81a3      	strh	r3, [r4, #12]
 80034cc:	6126      	str	r6, [r4, #16]
 80034ce:	443e      	add	r6, r7
 80034d0:	6026      	str	r6, [r4, #0]
 80034d2:	464e      	mov	r6, r9
 80034d4:	6165      	str	r5, [r4, #20]
 80034d6:	1bed      	subs	r5, r5, r7
 80034d8:	60a5      	str	r5, [r4, #8]
 80034da:	454e      	cmp	r6, r9
 80034dc:	d900      	bls.n	80034e0 <__ssputs_r+0x84>
 80034de:	464e      	mov	r6, r9
 80034e0:	4632      	mov	r2, r6
 80034e2:	4641      	mov	r1, r8
 80034e4:	6820      	ldr	r0, [r4, #0]
 80034e6:	f000 faac 	bl	8003a42 <memmove>
 80034ea:	68a3      	ldr	r3, [r4, #8]
 80034ec:	2000      	movs	r0, #0
 80034ee:	1b9b      	subs	r3, r3, r6
 80034f0:	60a3      	str	r3, [r4, #8]
 80034f2:	6823      	ldr	r3, [r4, #0]
 80034f4:	441e      	add	r6, r3
 80034f6:	6026      	str	r6, [r4, #0]
 80034f8:	e7dc      	b.n	80034b4 <__ssputs_r+0x58>
 80034fa:	462a      	mov	r2, r5
 80034fc:	f000 fb60 	bl	8003bc0 <_realloc_r>
 8003500:	4606      	mov	r6, r0
 8003502:	2800      	cmp	r0, #0
 8003504:	d1e2      	bne.n	80034cc <__ssputs_r+0x70>
 8003506:	6921      	ldr	r1, [r4, #16]
 8003508:	4650      	mov	r0, sl
 800350a:	f000 fab3 	bl	8003a74 <_free_r>
 800350e:	e7c8      	b.n	80034a2 <__ssputs_r+0x46>

08003510 <_svfiprintf_r>:
 8003510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003514:	461d      	mov	r5, r3
 8003516:	898b      	ldrh	r3, [r1, #12]
 8003518:	b09d      	sub	sp, #116	; 0x74
 800351a:	061f      	lsls	r7, r3, #24
 800351c:	4680      	mov	r8, r0
 800351e:	460c      	mov	r4, r1
 8003520:	4616      	mov	r6, r2
 8003522:	d50f      	bpl.n	8003544 <_svfiprintf_r+0x34>
 8003524:	690b      	ldr	r3, [r1, #16]
 8003526:	b96b      	cbnz	r3, 8003544 <_svfiprintf_r+0x34>
 8003528:	2140      	movs	r1, #64	; 0x40
 800352a:	f000 faef 	bl	8003b0c <_malloc_r>
 800352e:	6020      	str	r0, [r4, #0]
 8003530:	6120      	str	r0, [r4, #16]
 8003532:	b928      	cbnz	r0, 8003540 <_svfiprintf_r+0x30>
 8003534:	230c      	movs	r3, #12
 8003536:	f8c8 3000 	str.w	r3, [r8]
 800353a:	f04f 30ff 	mov.w	r0, #4294967295
 800353e:	e0c8      	b.n	80036d2 <_svfiprintf_r+0x1c2>
 8003540:	2340      	movs	r3, #64	; 0x40
 8003542:	6163      	str	r3, [r4, #20]
 8003544:	2300      	movs	r3, #0
 8003546:	9309      	str	r3, [sp, #36]	; 0x24
 8003548:	2320      	movs	r3, #32
 800354a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800354e:	2330      	movs	r3, #48	; 0x30
 8003550:	f04f 0b01 	mov.w	fp, #1
 8003554:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003558:	9503      	str	r5, [sp, #12]
 800355a:	4637      	mov	r7, r6
 800355c:	463d      	mov	r5, r7
 800355e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003562:	b10b      	cbz	r3, 8003568 <_svfiprintf_r+0x58>
 8003564:	2b25      	cmp	r3, #37	; 0x25
 8003566:	d13e      	bne.n	80035e6 <_svfiprintf_r+0xd6>
 8003568:	ebb7 0a06 	subs.w	sl, r7, r6
 800356c:	d00b      	beq.n	8003586 <_svfiprintf_r+0x76>
 800356e:	4653      	mov	r3, sl
 8003570:	4632      	mov	r2, r6
 8003572:	4621      	mov	r1, r4
 8003574:	4640      	mov	r0, r8
 8003576:	f7ff ff71 	bl	800345c <__ssputs_r>
 800357a:	3001      	adds	r0, #1
 800357c:	f000 80a4 	beq.w	80036c8 <_svfiprintf_r+0x1b8>
 8003580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003582:	4453      	add	r3, sl
 8003584:	9309      	str	r3, [sp, #36]	; 0x24
 8003586:	783b      	ldrb	r3, [r7, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 809d 	beq.w	80036c8 <_svfiprintf_r+0x1b8>
 800358e:	2300      	movs	r3, #0
 8003590:	f04f 32ff 	mov.w	r2, #4294967295
 8003594:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003598:	9304      	str	r3, [sp, #16]
 800359a:	9307      	str	r3, [sp, #28]
 800359c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035a0:	931a      	str	r3, [sp, #104]	; 0x68
 80035a2:	462f      	mov	r7, r5
 80035a4:	2205      	movs	r2, #5
 80035a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80035aa:	4850      	ldr	r0, [pc, #320]	; (80036ec <_svfiprintf_r+0x1dc>)
 80035ac:	f000 fa30 	bl	8003a10 <memchr>
 80035b0:	9b04      	ldr	r3, [sp, #16]
 80035b2:	b9d0      	cbnz	r0, 80035ea <_svfiprintf_r+0xda>
 80035b4:	06d9      	lsls	r1, r3, #27
 80035b6:	bf44      	itt	mi
 80035b8:	2220      	movmi	r2, #32
 80035ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80035be:	071a      	lsls	r2, r3, #28
 80035c0:	bf44      	itt	mi
 80035c2:	222b      	movmi	r2, #43	; 0x2b
 80035c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80035c8:	782a      	ldrb	r2, [r5, #0]
 80035ca:	2a2a      	cmp	r2, #42	; 0x2a
 80035cc:	d015      	beq.n	80035fa <_svfiprintf_r+0xea>
 80035ce:	462f      	mov	r7, r5
 80035d0:	2000      	movs	r0, #0
 80035d2:	250a      	movs	r5, #10
 80035d4:	9a07      	ldr	r2, [sp, #28]
 80035d6:	4639      	mov	r1, r7
 80035d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035dc:	3b30      	subs	r3, #48	; 0x30
 80035de:	2b09      	cmp	r3, #9
 80035e0:	d94d      	bls.n	800367e <_svfiprintf_r+0x16e>
 80035e2:	b1b8      	cbz	r0, 8003614 <_svfiprintf_r+0x104>
 80035e4:	e00f      	b.n	8003606 <_svfiprintf_r+0xf6>
 80035e6:	462f      	mov	r7, r5
 80035e8:	e7b8      	b.n	800355c <_svfiprintf_r+0x4c>
 80035ea:	4a40      	ldr	r2, [pc, #256]	; (80036ec <_svfiprintf_r+0x1dc>)
 80035ec:	463d      	mov	r5, r7
 80035ee:	1a80      	subs	r0, r0, r2
 80035f0:	fa0b f000 	lsl.w	r0, fp, r0
 80035f4:	4318      	orrs	r0, r3
 80035f6:	9004      	str	r0, [sp, #16]
 80035f8:	e7d3      	b.n	80035a2 <_svfiprintf_r+0x92>
 80035fa:	9a03      	ldr	r2, [sp, #12]
 80035fc:	1d11      	adds	r1, r2, #4
 80035fe:	6812      	ldr	r2, [r2, #0]
 8003600:	9103      	str	r1, [sp, #12]
 8003602:	2a00      	cmp	r2, #0
 8003604:	db01      	blt.n	800360a <_svfiprintf_r+0xfa>
 8003606:	9207      	str	r2, [sp, #28]
 8003608:	e004      	b.n	8003614 <_svfiprintf_r+0x104>
 800360a:	4252      	negs	r2, r2
 800360c:	f043 0302 	orr.w	r3, r3, #2
 8003610:	9207      	str	r2, [sp, #28]
 8003612:	9304      	str	r3, [sp, #16]
 8003614:	783b      	ldrb	r3, [r7, #0]
 8003616:	2b2e      	cmp	r3, #46	; 0x2e
 8003618:	d10c      	bne.n	8003634 <_svfiprintf_r+0x124>
 800361a:	787b      	ldrb	r3, [r7, #1]
 800361c:	2b2a      	cmp	r3, #42	; 0x2a
 800361e:	d133      	bne.n	8003688 <_svfiprintf_r+0x178>
 8003620:	9b03      	ldr	r3, [sp, #12]
 8003622:	3702      	adds	r7, #2
 8003624:	1d1a      	adds	r2, r3, #4
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	9203      	str	r2, [sp, #12]
 800362a:	2b00      	cmp	r3, #0
 800362c:	bfb8      	it	lt
 800362e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003632:	9305      	str	r3, [sp, #20]
 8003634:	4d2e      	ldr	r5, [pc, #184]	; (80036f0 <_svfiprintf_r+0x1e0>)
 8003636:	2203      	movs	r2, #3
 8003638:	7839      	ldrb	r1, [r7, #0]
 800363a:	4628      	mov	r0, r5
 800363c:	f000 f9e8 	bl	8003a10 <memchr>
 8003640:	b138      	cbz	r0, 8003652 <_svfiprintf_r+0x142>
 8003642:	2340      	movs	r3, #64	; 0x40
 8003644:	1b40      	subs	r0, r0, r5
 8003646:	fa03 f000 	lsl.w	r0, r3, r0
 800364a:	9b04      	ldr	r3, [sp, #16]
 800364c:	3701      	adds	r7, #1
 800364e:	4303      	orrs	r3, r0
 8003650:	9304      	str	r3, [sp, #16]
 8003652:	7839      	ldrb	r1, [r7, #0]
 8003654:	2206      	movs	r2, #6
 8003656:	4827      	ldr	r0, [pc, #156]	; (80036f4 <_svfiprintf_r+0x1e4>)
 8003658:	1c7e      	adds	r6, r7, #1
 800365a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800365e:	f000 f9d7 	bl	8003a10 <memchr>
 8003662:	2800      	cmp	r0, #0
 8003664:	d038      	beq.n	80036d8 <_svfiprintf_r+0x1c8>
 8003666:	4b24      	ldr	r3, [pc, #144]	; (80036f8 <_svfiprintf_r+0x1e8>)
 8003668:	bb13      	cbnz	r3, 80036b0 <_svfiprintf_r+0x1a0>
 800366a:	9b03      	ldr	r3, [sp, #12]
 800366c:	3307      	adds	r3, #7
 800366e:	f023 0307 	bic.w	r3, r3, #7
 8003672:	3308      	adds	r3, #8
 8003674:	9303      	str	r3, [sp, #12]
 8003676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003678:	444b      	add	r3, r9
 800367a:	9309      	str	r3, [sp, #36]	; 0x24
 800367c:	e76d      	b.n	800355a <_svfiprintf_r+0x4a>
 800367e:	fb05 3202 	mla	r2, r5, r2, r3
 8003682:	2001      	movs	r0, #1
 8003684:	460f      	mov	r7, r1
 8003686:	e7a6      	b.n	80035d6 <_svfiprintf_r+0xc6>
 8003688:	2300      	movs	r3, #0
 800368a:	250a      	movs	r5, #10
 800368c:	4619      	mov	r1, r3
 800368e:	3701      	adds	r7, #1
 8003690:	9305      	str	r3, [sp, #20]
 8003692:	4638      	mov	r0, r7
 8003694:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003698:	3a30      	subs	r2, #48	; 0x30
 800369a:	2a09      	cmp	r2, #9
 800369c:	d903      	bls.n	80036a6 <_svfiprintf_r+0x196>
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0c8      	beq.n	8003634 <_svfiprintf_r+0x124>
 80036a2:	9105      	str	r1, [sp, #20]
 80036a4:	e7c6      	b.n	8003634 <_svfiprintf_r+0x124>
 80036a6:	fb05 2101 	mla	r1, r5, r1, r2
 80036aa:	2301      	movs	r3, #1
 80036ac:	4607      	mov	r7, r0
 80036ae:	e7f0      	b.n	8003692 <_svfiprintf_r+0x182>
 80036b0:	ab03      	add	r3, sp, #12
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	4622      	mov	r2, r4
 80036b6:	4b11      	ldr	r3, [pc, #68]	; (80036fc <_svfiprintf_r+0x1ec>)
 80036b8:	a904      	add	r1, sp, #16
 80036ba:	4640      	mov	r0, r8
 80036bc:	f3af 8000 	nop.w
 80036c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80036c4:	4681      	mov	r9, r0
 80036c6:	d1d6      	bne.n	8003676 <_svfiprintf_r+0x166>
 80036c8:	89a3      	ldrh	r3, [r4, #12]
 80036ca:	065b      	lsls	r3, r3, #25
 80036cc:	f53f af35 	bmi.w	800353a <_svfiprintf_r+0x2a>
 80036d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036d2:	b01d      	add	sp, #116	; 0x74
 80036d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036d8:	ab03      	add	r3, sp, #12
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	4622      	mov	r2, r4
 80036de:	4b07      	ldr	r3, [pc, #28]	; (80036fc <_svfiprintf_r+0x1ec>)
 80036e0:	a904      	add	r1, sp, #16
 80036e2:	4640      	mov	r0, r8
 80036e4:	f000 f882 	bl	80037ec <_printf_i>
 80036e8:	e7ea      	b.n	80036c0 <_svfiprintf_r+0x1b0>
 80036ea:	bf00      	nop
 80036ec:	08003d44 	.word	0x08003d44
 80036f0:	08003d4a 	.word	0x08003d4a
 80036f4:	08003d4e 	.word	0x08003d4e
 80036f8:	00000000 	.word	0x00000000
 80036fc:	0800345d 	.word	0x0800345d

08003700 <_printf_common>:
 8003700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003704:	4691      	mov	r9, r2
 8003706:	461f      	mov	r7, r3
 8003708:	688a      	ldr	r2, [r1, #8]
 800370a:	690b      	ldr	r3, [r1, #16]
 800370c:	4606      	mov	r6, r0
 800370e:	4293      	cmp	r3, r2
 8003710:	bfb8      	it	lt
 8003712:	4613      	movlt	r3, r2
 8003714:	f8c9 3000 	str.w	r3, [r9]
 8003718:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800371c:	460c      	mov	r4, r1
 800371e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003722:	b112      	cbz	r2, 800372a <_printf_common+0x2a>
 8003724:	3301      	adds	r3, #1
 8003726:	f8c9 3000 	str.w	r3, [r9]
 800372a:	6823      	ldr	r3, [r4, #0]
 800372c:	0699      	lsls	r1, r3, #26
 800372e:	bf42      	ittt	mi
 8003730:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003734:	3302      	addmi	r3, #2
 8003736:	f8c9 3000 	strmi.w	r3, [r9]
 800373a:	6825      	ldr	r5, [r4, #0]
 800373c:	f015 0506 	ands.w	r5, r5, #6
 8003740:	d107      	bne.n	8003752 <_printf_common+0x52>
 8003742:	f104 0a19 	add.w	sl, r4, #25
 8003746:	68e3      	ldr	r3, [r4, #12]
 8003748:	f8d9 2000 	ldr.w	r2, [r9]
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	42ab      	cmp	r3, r5
 8003750:	dc29      	bgt.n	80037a6 <_printf_common+0xa6>
 8003752:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003756:	6822      	ldr	r2, [r4, #0]
 8003758:	3300      	adds	r3, #0
 800375a:	bf18      	it	ne
 800375c:	2301      	movne	r3, #1
 800375e:	0692      	lsls	r2, r2, #26
 8003760:	d42e      	bmi.n	80037c0 <_printf_common+0xc0>
 8003762:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003766:	4639      	mov	r1, r7
 8003768:	4630      	mov	r0, r6
 800376a:	47c0      	blx	r8
 800376c:	3001      	adds	r0, #1
 800376e:	d021      	beq.n	80037b4 <_printf_common+0xb4>
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	68e5      	ldr	r5, [r4, #12]
 8003774:	f003 0306 	and.w	r3, r3, #6
 8003778:	2b04      	cmp	r3, #4
 800377a:	bf18      	it	ne
 800377c:	2500      	movne	r5, #0
 800377e:	f8d9 2000 	ldr.w	r2, [r9]
 8003782:	f04f 0900 	mov.w	r9, #0
 8003786:	bf08      	it	eq
 8003788:	1aad      	subeq	r5, r5, r2
 800378a:	68a3      	ldr	r3, [r4, #8]
 800378c:	6922      	ldr	r2, [r4, #16]
 800378e:	bf08      	it	eq
 8003790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003794:	4293      	cmp	r3, r2
 8003796:	bfc4      	itt	gt
 8003798:	1a9b      	subgt	r3, r3, r2
 800379a:	18ed      	addgt	r5, r5, r3
 800379c:	341a      	adds	r4, #26
 800379e:	454d      	cmp	r5, r9
 80037a0:	d11a      	bne.n	80037d8 <_printf_common+0xd8>
 80037a2:	2000      	movs	r0, #0
 80037a4:	e008      	b.n	80037b8 <_printf_common+0xb8>
 80037a6:	2301      	movs	r3, #1
 80037a8:	4652      	mov	r2, sl
 80037aa:	4639      	mov	r1, r7
 80037ac:	4630      	mov	r0, r6
 80037ae:	47c0      	blx	r8
 80037b0:	3001      	adds	r0, #1
 80037b2:	d103      	bne.n	80037bc <_printf_common+0xbc>
 80037b4:	f04f 30ff 	mov.w	r0, #4294967295
 80037b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037bc:	3501      	adds	r5, #1
 80037be:	e7c2      	b.n	8003746 <_printf_common+0x46>
 80037c0:	2030      	movs	r0, #48	; 0x30
 80037c2:	18e1      	adds	r1, r4, r3
 80037c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037ce:	4422      	add	r2, r4
 80037d0:	3302      	adds	r3, #2
 80037d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037d6:	e7c4      	b.n	8003762 <_printf_common+0x62>
 80037d8:	2301      	movs	r3, #1
 80037da:	4622      	mov	r2, r4
 80037dc:	4639      	mov	r1, r7
 80037de:	4630      	mov	r0, r6
 80037e0:	47c0      	blx	r8
 80037e2:	3001      	adds	r0, #1
 80037e4:	d0e6      	beq.n	80037b4 <_printf_common+0xb4>
 80037e6:	f109 0901 	add.w	r9, r9, #1
 80037ea:	e7d8      	b.n	800379e <_printf_common+0x9e>

080037ec <_printf_i>:
 80037ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80037f4:	460c      	mov	r4, r1
 80037f6:	7e09      	ldrb	r1, [r1, #24]
 80037f8:	b085      	sub	sp, #20
 80037fa:	296e      	cmp	r1, #110	; 0x6e
 80037fc:	4617      	mov	r7, r2
 80037fe:	4606      	mov	r6, r0
 8003800:	4698      	mov	r8, r3
 8003802:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003804:	f000 80b3 	beq.w	800396e <_printf_i+0x182>
 8003808:	d822      	bhi.n	8003850 <_printf_i+0x64>
 800380a:	2963      	cmp	r1, #99	; 0x63
 800380c:	d036      	beq.n	800387c <_printf_i+0x90>
 800380e:	d80a      	bhi.n	8003826 <_printf_i+0x3a>
 8003810:	2900      	cmp	r1, #0
 8003812:	f000 80b9 	beq.w	8003988 <_printf_i+0x19c>
 8003816:	2958      	cmp	r1, #88	; 0x58
 8003818:	f000 8083 	beq.w	8003922 <_printf_i+0x136>
 800381c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003820:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003824:	e032      	b.n	800388c <_printf_i+0xa0>
 8003826:	2964      	cmp	r1, #100	; 0x64
 8003828:	d001      	beq.n	800382e <_printf_i+0x42>
 800382a:	2969      	cmp	r1, #105	; 0x69
 800382c:	d1f6      	bne.n	800381c <_printf_i+0x30>
 800382e:	6820      	ldr	r0, [r4, #0]
 8003830:	6813      	ldr	r3, [r2, #0]
 8003832:	0605      	lsls	r5, r0, #24
 8003834:	f103 0104 	add.w	r1, r3, #4
 8003838:	d52a      	bpl.n	8003890 <_printf_i+0xa4>
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6011      	str	r1, [r2, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	da03      	bge.n	800384a <_printf_i+0x5e>
 8003842:	222d      	movs	r2, #45	; 0x2d
 8003844:	425b      	negs	r3, r3
 8003846:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800384a:	486f      	ldr	r0, [pc, #444]	; (8003a08 <_printf_i+0x21c>)
 800384c:	220a      	movs	r2, #10
 800384e:	e039      	b.n	80038c4 <_printf_i+0xd8>
 8003850:	2973      	cmp	r1, #115	; 0x73
 8003852:	f000 809d 	beq.w	8003990 <_printf_i+0x1a4>
 8003856:	d808      	bhi.n	800386a <_printf_i+0x7e>
 8003858:	296f      	cmp	r1, #111	; 0x6f
 800385a:	d020      	beq.n	800389e <_printf_i+0xb2>
 800385c:	2970      	cmp	r1, #112	; 0x70
 800385e:	d1dd      	bne.n	800381c <_printf_i+0x30>
 8003860:	6823      	ldr	r3, [r4, #0]
 8003862:	f043 0320 	orr.w	r3, r3, #32
 8003866:	6023      	str	r3, [r4, #0]
 8003868:	e003      	b.n	8003872 <_printf_i+0x86>
 800386a:	2975      	cmp	r1, #117	; 0x75
 800386c:	d017      	beq.n	800389e <_printf_i+0xb2>
 800386e:	2978      	cmp	r1, #120	; 0x78
 8003870:	d1d4      	bne.n	800381c <_printf_i+0x30>
 8003872:	2378      	movs	r3, #120	; 0x78
 8003874:	4865      	ldr	r0, [pc, #404]	; (8003a0c <_printf_i+0x220>)
 8003876:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800387a:	e055      	b.n	8003928 <_printf_i+0x13c>
 800387c:	6813      	ldr	r3, [r2, #0]
 800387e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003882:	1d19      	adds	r1, r3, #4
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6011      	str	r1, [r2, #0]
 8003888:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800388c:	2301      	movs	r3, #1
 800388e:	e08c      	b.n	80039aa <_printf_i+0x1be>
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003896:	6011      	str	r1, [r2, #0]
 8003898:	bf18      	it	ne
 800389a:	b21b      	sxthne	r3, r3
 800389c:	e7cf      	b.n	800383e <_printf_i+0x52>
 800389e:	6813      	ldr	r3, [r2, #0]
 80038a0:	6825      	ldr	r5, [r4, #0]
 80038a2:	1d18      	adds	r0, r3, #4
 80038a4:	6010      	str	r0, [r2, #0]
 80038a6:	0628      	lsls	r0, r5, #24
 80038a8:	d501      	bpl.n	80038ae <_printf_i+0xc2>
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	e002      	b.n	80038b4 <_printf_i+0xc8>
 80038ae:	0668      	lsls	r0, r5, #25
 80038b0:	d5fb      	bpl.n	80038aa <_printf_i+0xbe>
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	296f      	cmp	r1, #111	; 0x6f
 80038b6:	bf14      	ite	ne
 80038b8:	220a      	movne	r2, #10
 80038ba:	2208      	moveq	r2, #8
 80038bc:	4852      	ldr	r0, [pc, #328]	; (8003a08 <_printf_i+0x21c>)
 80038be:	2100      	movs	r1, #0
 80038c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038c4:	6865      	ldr	r5, [r4, #4]
 80038c6:	2d00      	cmp	r5, #0
 80038c8:	60a5      	str	r5, [r4, #8]
 80038ca:	f2c0 8095 	blt.w	80039f8 <_printf_i+0x20c>
 80038ce:	6821      	ldr	r1, [r4, #0]
 80038d0:	f021 0104 	bic.w	r1, r1, #4
 80038d4:	6021      	str	r1, [r4, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d13d      	bne.n	8003956 <_printf_i+0x16a>
 80038da:	2d00      	cmp	r5, #0
 80038dc:	f040 808e 	bne.w	80039fc <_printf_i+0x210>
 80038e0:	4665      	mov	r5, ip
 80038e2:	2a08      	cmp	r2, #8
 80038e4:	d10b      	bne.n	80038fe <_printf_i+0x112>
 80038e6:	6823      	ldr	r3, [r4, #0]
 80038e8:	07db      	lsls	r3, r3, #31
 80038ea:	d508      	bpl.n	80038fe <_printf_i+0x112>
 80038ec:	6923      	ldr	r3, [r4, #16]
 80038ee:	6862      	ldr	r2, [r4, #4]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	bfde      	ittt	le
 80038f4:	2330      	movle	r3, #48	; 0x30
 80038f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038fe:	ebac 0305 	sub.w	r3, ip, r5
 8003902:	6123      	str	r3, [r4, #16]
 8003904:	f8cd 8000 	str.w	r8, [sp]
 8003908:	463b      	mov	r3, r7
 800390a:	aa03      	add	r2, sp, #12
 800390c:	4621      	mov	r1, r4
 800390e:	4630      	mov	r0, r6
 8003910:	f7ff fef6 	bl	8003700 <_printf_common>
 8003914:	3001      	adds	r0, #1
 8003916:	d14d      	bne.n	80039b4 <_printf_i+0x1c8>
 8003918:	f04f 30ff 	mov.w	r0, #4294967295
 800391c:	b005      	add	sp, #20
 800391e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003922:	4839      	ldr	r0, [pc, #228]	; (8003a08 <_printf_i+0x21c>)
 8003924:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003928:	6813      	ldr	r3, [r2, #0]
 800392a:	6821      	ldr	r1, [r4, #0]
 800392c:	1d1d      	adds	r5, r3, #4
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6015      	str	r5, [r2, #0]
 8003932:	060a      	lsls	r2, r1, #24
 8003934:	d50b      	bpl.n	800394e <_printf_i+0x162>
 8003936:	07ca      	lsls	r2, r1, #31
 8003938:	bf44      	itt	mi
 800393a:	f041 0120 	orrmi.w	r1, r1, #32
 800393e:	6021      	strmi	r1, [r4, #0]
 8003940:	b91b      	cbnz	r3, 800394a <_printf_i+0x15e>
 8003942:	6822      	ldr	r2, [r4, #0]
 8003944:	f022 0220 	bic.w	r2, r2, #32
 8003948:	6022      	str	r2, [r4, #0]
 800394a:	2210      	movs	r2, #16
 800394c:	e7b7      	b.n	80038be <_printf_i+0xd2>
 800394e:	064d      	lsls	r5, r1, #25
 8003950:	bf48      	it	mi
 8003952:	b29b      	uxthmi	r3, r3
 8003954:	e7ef      	b.n	8003936 <_printf_i+0x14a>
 8003956:	4665      	mov	r5, ip
 8003958:	fbb3 f1f2 	udiv	r1, r3, r2
 800395c:	fb02 3311 	mls	r3, r2, r1, r3
 8003960:	5cc3      	ldrb	r3, [r0, r3]
 8003962:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003966:	460b      	mov	r3, r1
 8003968:	2900      	cmp	r1, #0
 800396a:	d1f5      	bne.n	8003958 <_printf_i+0x16c>
 800396c:	e7b9      	b.n	80038e2 <_printf_i+0xf6>
 800396e:	6813      	ldr	r3, [r2, #0]
 8003970:	6825      	ldr	r5, [r4, #0]
 8003972:	1d18      	adds	r0, r3, #4
 8003974:	6961      	ldr	r1, [r4, #20]
 8003976:	6010      	str	r0, [r2, #0]
 8003978:	0628      	lsls	r0, r5, #24
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	d501      	bpl.n	8003982 <_printf_i+0x196>
 800397e:	6019      	str	r1, [r3, #0]
 8003980:	e002      	b.n	8003988 <_printf_i+0x19c>
 8003982:	066a      	lsls	r2, r5, #25
 8003984:	d5fb      	bpl.n	800397e <_printf_i+0x192>
 8003986:	8019      	strh	r1, [r3, #0]
 8003988:	2300      	movs	r3, #0
 800398a:	4665      	mov	r5, ip
 800398c:	6123      	str	r3, [r4, #16]
 800398e:	e7b9      	b.n	8003904 <_printf_i+0x118>
 8003990:	6813      	ldr	r3, [r2, #0]
 8003992:	1d19      	adds	r1, r3, #4
 8003994:	6011      	str	r1, [r2, #0]
 8003996:	681d      	ldr	r5, [r3, #0]
 8003998:	6862      	ldr	r2, [r4, #4]
 800399a:	2100      	movs	r1, #0
 800399c:	4628      	mov	r0, r5
 800399e:	f000 f837 	bl	8003a10 <memchr>
 80039a2:	b108      	cbz	r0, 80039a8 <_printf_i+0x1bc>
 80039a4:	1b40      	subs	r0, r0, r5
 80039a6:	6060      	str	r0, [r4, #4]
 80039a8:	6863      	ldr	r3, [r4, #4]
 80039aa:	6123      	str	r3, [r4, #16]
 80039ac:	2300      	movs	r3, #0
 80039ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039b2:	e7a7      	b.n	8003904 <_printf_i+0x118>
 80039b4:	6923      	ldr	r3, [r4, #16]
 80039b6:	462a      	mov	r2, r5
 80039b8:	4639      	mov	r1, r7
 80039ba:	4630      	mov	r0, r6
 80039bc:	47c0      	blx	r8
 80039be:	3001      	adds	r0, #1
 80039c0:	d0aa      	beq.n	8003918 <_printf_i+0x12c>
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	079b      	lsls	r3, r3, #30
 80039c6:	d413      	bmi.n	80039f0 <_printf_i+0x204>
 80039c8:	68e0      	ldr	r0, [r4, #12]
 80039ca:	9b03      	ldr	r3, [sp, #12]
 80039cc:	4298      	cmp	r0, r3
 80039ce:	bfb8      	it	lt
 80039d0:	4618      	movlt	r0, r3
 80039d2:	e7a3      	b.n	800391c <_printf_i+0x130>
 80039d4:	2301      	movs	r3, #1
 80039d6:	464a      	mov	r2, r9
 80039d8:	4639      	mov	r1, r7
 80039da:	4630      	mov	r0, r6
 80039dc:	47c0      	blx	r8
 80039de:	3001      	adds	r0, #1
 80039e0:	d09a      	beq.n	8003918 <_printf_i+0x12c>
 80039e2:	3501      	adds	r5, #1
 80039e4:	68e3      	ldr	r3, [r4, #12]
 80039e6:	9a03      	ldr	r2, [sp, #12]
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	42ab      	cmp	r3, r5
 80039ec:	dcf2      	bgt.n	80039d4 <_printf_i+0x1e8>
 80039ee:	e7eb      	b.n	80039c8 <_printf_i+0x1dc>
 80039f0:	2500      	movs	r5, #0
 80039f2:	f104 0919 	add.w	r9, r4, #25
 80039f6:	e7f5      	b.n	80039e4 <_printf_i+0x1f8>
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1ac      	bne.n	8003956 <_printf_i+0x16a>
 80039fc:	7803      	ldrb	r3, [r0, #0]
 80039fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a02:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a06:	e76c      	b.n	80038e2 <_printf_i+0xf6>
 8003a08:	08003d55 	.word	0x08003d55
 8003a0c:	08003d66 	.word	0x08003d66

08003a10 <memchr>:
 8003a10:	b510      	push	{r4, lr}
 8003a12:	b2c9      	uxtb	r1, r1
 8003a14:	4402      	add	r2, r0
 8003a16:	4290      	cmp	r0, r2
 8003a18:	4603      	mov	r3, r0
 8003a1a:	d101      	bne.n	8003a20 <memchr+0x10>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	e003      	b.n	8003a28 <memchr+0x18>
 8003a20:	781c      	ldrb	r4, [r3, #0]
 8003a22:	3001      	adds	r0, #1
 8003a24:	428c      	cmp	r4, r1
 8003a26:	d1f6      	bne.n	8003a16 <memchr+0x6>
 8003a28:	4618      	mov	r0, r3
 8003a2a:	bd10      	pop	{r4, pc}

08003a2c <memcpy>:
 8003a2c:	b510      	push	{r4, lr}
 8003a2e:	1e43      	subs	r3, r0, #1
 8003a30:	440a      	add	r2, r1
 8003a32:	4291      	cmp	r1, r2
 8003a34:	d100      	bne.n	8003a38 <memcpy+0xc>
 8003a36:	bd10      	pop	{r4, pc}
 8003a38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a40:	e7f7      	b.n	8003a32 <memcpy+0x6>

08003a42 <memmove>:
 8003a42:	4288      	cmp	r0, r1
 8003a44:	b510      	push	{r4, lr}
 8003a46:	eb01 0302 	add.w	r3, r1, r2
 8003a4a:	d807      	bhi.n	8003a5c <memmove+0x1a>
 8003a4c:	1e42      	subs	r2, r0, #1
 8003a4e:	4299      	cmp	r1, r3
 8003a50:	d00a      	beq.n	8003a68 <memmove+0x26>
 8003a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a56:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003a5a:	e7f8      	b.n	8003a4e <memmove+0xc>
 8003a5c:	4283      	cmp	r3, r0
 8003a5e:	d9f5      	bls.n	8003a4c <memmove+0xa>
 8003a60:	1881      	adds	r1, r0, r2
 8003a62:	1ad2      	subs	r2, r2, r3
 8003a64:	42d3      	cmn	r3, r2
 8003a66:	d100      	bne.n	8003a6a <memmove+0x28>
 8003a68:	bd10      	pop	{r4, pc}
 8003a6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a6e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003a72:	e7f7      	b.n	8003a64 <memmove+0x22>

08003a74 <_free_r>:
 8003a74:	b538      	push	{r3, r4, r5, lr}
 8003a76:	4605      	mov	r5, r0
 8003a78:	2900      	cmp	r1, #0
 8003a7a:	d043      	beq.n	8003b04 <_free_r+0x90>
 8003a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a80:	1f0c      	subs	r4, r1, #4
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	bfb8      	it	lt
 8003a86:	18e4      	addlt	r4, r4, r3
 8003a88:	f000 f8d0 	bl	8003c2c <__malloc_lock>
 8003a8c:	4a1e      	ldr	r2, [pc, #120]	; (8003b08 <_free_r+0x94>)
 8003a8e:	6813      	ldr	r3, [r2, #0]
 8003a90:	4610      	mov	r0, r2
 8003a92:	b933      	cbnz	r3, 8003aa2 <_free_r+0x2e>
 8003a94:	6063      	str	r3, [r4, #4]
 8003a96:	6014      	str	r4, [r2, #0]
 8003a98:	4628      	mov	r0, r5
 8003a9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a9e:	f000 b8c6 	b.w	8003c2e <__malloc_unlock>
 8003aa2:	42a3      	cmp	r3, r4
 8003aa4:	d90b      	bls.n	8003abe <_free_r+0x4a>
 8003aa6:	6821      	ldr	r1, [r4, #0]
 8003aa8:	1862      	adds	r2, r4, r1
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	bf01      	itttt	eq
 8003aae:	681a      	ldreq	r2, [r3, #0]
 8003ab0:	685b      	ldreq	r3, [r3, #4]
 8003ab2:	1852      	addeq	r2, r2, r1
 8003ab4:	6022      	streq	r2, [r4, #0]
 8003ab6:	6063      	str	r3, [r4, #4]
 8003ab8:	6004      	str	r4, [r0, #0]
 8003aba:	e7ed      	b.n	8003a98 <_free_r+0x24>
 8003abc:	4613      	mov	r3, r2
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	b10a      	cbz	r2, 8003ac6 <_free_r+0x52>
 8003ac2:	42a2      	cmp	r2, r4
 8003ac4:	d9fa      	bls.n	8003abc <_free_r+0x48>
 8003ac6:	6819      	ldr	r1, [r3, #0]
 8003ac8:	1858      	adds	r0, r3, r1
 8003aca:	42a0      	cmp	r0, r4
 8003acc:	d10b      	bne.n	8003ae6 <_free_r+0x72>
 8003ace:	6820      	ldr	r0, [r4, #0]
 8003ad0:	4401      	add	r1, r0
 8003ad2:	1858      	adds	r0, r3, r1
 8003ad4:	4282      	cmp	r2, r0
 8003ad6:	6019      	str	r1, [r3, #0]
 8003ad8:	d1de      	bne.n	8003a98 <_free_r+0x24>
 8003ada:	6810      	ldr	r0, [r2, #0]
 8003adc:	6852      	ldr	r2, [r2, #4]
 8003ade:	4401      	add	r1, r0
 8003ae0:	6019      	str	r1, [r3, #0]
 8003ae2:	605a      	str	r2, [r3, #4]
 8003ae4:	e7d8      	b.n	8003a98 <_free_r+0x24>
 8003ae6:	d902      	bls.n	8003aee <_free_r+0x7a>
 8003ae8:	230c      	movs	r3, #12
 8003aea:	602b      	str	r3, [r5, #0]
 8003aec:	e7d4      	b.n	8003a98 <_free_r+0x24>
 8003aee:	6820      	ldr	r0, [r4, #0]
 8003af0:	1821      	adds	r1, r4, r0
 8003af2:	428a      	cmp	r2, r1
 8003af4:	bf01      	itttt	eq
 8003af6:	6811      	ldreq	r1, [r2, #0]
 8003af8:	6852      	ldreq	r2, [r2, #4]
 8003afa:	1809      	addeq	r1, r1, r0
 8003afc:	6021      	streq	r1, [r4, #0]
 8003afe:	6062      	str	r2, [r4, #4]
 8003b00:	605c      	str	r4, [r3, #4]
 8003b02:	e7c9      	b.n	8003a98 <_free_r+0x24>
 8003b04:	bd38      	pop	{r3, r4, r5, pc}
 8003b06:	bf00      	nop
 8003b08:	200000a0 	.word	0x200000a0

08003b0c <_malloc_r>:
 8003b0c:	b570      	push	{r4, r5, r6, lr}
 8003b0e:	1ccd      	adds	r5, r1, #3
 8003b10:	f025 0503 	bic.w	r5, r5, #3
 8003b14:	3508      	adds	r5, #8
 8003b16:	2d0c      	cmp	r5, #12
 8003b18:	bf38      	it	cc
 8003b1a:	250c      	movcc	r5, #12
 8003b1c:	2d00      	cmp	r5, #0
 8003b1e:	4606      	mov	r6, r0
 8003b20:	db01      	blt.n	8003b26 <_malloc_r+0x1a>
 8003b22:	42a9      	cmp	r1, r5
 8003b24:	d903      	bls.n	8003b2e <_malloc_r+0x22>
 8003b26:	230c      	movs	r3, #12
 8003b28:	6033      	str	r3, [r6, #0]
 8003b2a:	2000      	movs	r0, #0
 8003b2c:	bd70      	pop	{r4, r5, r6, pc}
 8003b2e:	f000 f87d 	bl	8003c2c <__malloc_lock>
 8003b32:	4a21      	ldr	r2, [pc, #132]	; (8003bb8 <_malloc_r+0xac>)
 8003b34:	6814      	ldr	r4, [r2, #0]
 8003b36:	4621      	mov	r1, r4
 8003b38:	b991      	cbnz	r1, 8003b60 <_malloc_r+0x54>
 8003b3a:	4c20      	ldr	r4, [pc, #128]	; (8003bbc <_malloc_r+0xb0>)
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	b91b      	cbnz	r3, 8003b48 <_malloc_r+0x3c>
 8003b40:	4630      	mov	r0, r6
 8003b42:	f000 f863 	bl	8003c0c <_sbrk_r>
 8003b46:	6020      	str	r0, [r4, #0]
 8003b48:	4629      	mov	r1, r5
 8003b4a:	4630      	mov	r0, r6
 8003b4c:	f000 f85e 	bl	8003c0c <_sbrk_r>
 8003b50:	1c43      	adds	r3, r0, #1
 8003b52:	d124      	bne.n	8003b9e <_malloc_r+0x92>
 8003b54:	230c      	movs	r3, #12
 8003b56:	4630      	mov	r0, r6
 8003b58:	6033      	str	r3, [r6, #0]
 8003b5a:	f000 f868 	bl	8003c2e <__malloc_unlock>
 8003b5e:	e7e4      	b.n	8003b2a <_malloc_r+0x1e>
 8003b60:	680b      	ldr	r3, [r1, #0]
 8003b62:	1b5b      	subs	r3, r3, r5
 8003b64:	d418      	bmi.n	8003b98 <_malloc_r+0x8c>
 8003b66:	2b0b      	cmp	r3, #11
 8003b68:	d90f      	bls.n	8003b8a <_malloc_r+0x7e>
 8003b6a:	600b      	str	r3, [r1, #0]
 8003b6c:	18cc      	adds	r4, r1, r3
 8003b6e:	50cd      	str	r5, [r1, r3]
 8003b70:	4630      	mov	r0, r6
 8003b72:	f000 f85c 	bl	8003c2e <__malloc_unlock>
 8003b76:	f104 000b 	add.w	r0, r4, #11
 8003b7a:	1d23      	adds	r3, r4, #4
 8003b7c:	f020 0007 	bic.w	r0, r0, #7
 8003b80:	1ac3      	subs	r3, r0, r3
 8003b82:	d0d3      	beq.n	8003b2c <_malloc_r+0x20>
 8003b84:	425a      	negs	r2, r3
 8003b86:	50e2      	str	r2, [r4, r3]
 8003b88:	e7d0      	b.n	8003b2c <_malloc_r+0x20>
 8003b8a:	684b      	ldr	r3, [r1, #4]
 8003b8c:	428c      	cmp	r4, r1
 8003b8e:	bf16      	itet	ne
 8003b90:	6063      	strne	r3, [r4, #4]
 8003b92:	6013      	streq	r3, [r2, #0]
 8003b94:	460c      	movne	r4, r1
 8003b96:	e7eb      	b.n	8003b70 <_malloc_r+0x64>
 8003b98:	460c      	mov	r4, r1
 8003b9a:	6849      	ldr	r1, [r1, #4]
 8003b9c:	e7cc      	b.n	8003b38 <_malloc_r+0x2c>
 8003b9e:	1cc4      	adds	r4, r0, #3
 8003ba0:	f024 0403 	bic.w	r4, r4, #3
 8003ba4:	42a0      	cmp	r0, r4
 8003ba6:	d005      	beq.n	8003bb4 <_malloc_r+0xa8>
 8003ba8:	1a21      	subs	r1, r4, r0
 8003baa:	4630      	mov	r0, r6
 8003bac:	f000 f82e 	bl	8003c0c <_sbrk_r>
 8003bb0:	3001      	adds	r0, #1
 8003bb2:	d0cf      	beq.n	8003b54 <_malloc_r+0x48>
 8003bb4:	6025      	str	r5, [r4, #0]
 8003bb6:	e7db      	b.n	8003b70 <_malloc_r+0x64>
 8003bb8:	200000a0 	.word	0x200000a0
 8003bbc:	200000a4 	.word	0x200000a4

08003bc0 <_realloc_r>:
 8003bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc2:	4607      	mov	r7, r0
 8003bc4:	4614      	mov	r4, r2
 8003bc6:	460e      	mov	r6, r1
 8003bc8:	b921      	cbnz	r1, 8003bd4 <_realloc_r+0x14>
 8003bca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003bce:	4611      	mov	r1, r2
 8003bd0:	f7ff bf9c 	b.w	8003b0c <_malloc_r>
 8003bd4:	b922      	cbnz	r2, 8003be0 <_realloc_r+0x20>
 8003bd6:	f7ff ff4d 	bl	8003a74 <_free_r>
 8003bda:	4625      	mov	r5, r4
 8003bdc:	4628      	mov	r0, r5
 8003bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003be0:	f000 f826 	bl	8003c30 <_malloc_usable_size_r>
 8003be4:	42a0      	cmp	r0, r4
 8003be6:	d20f      	bcs.n	8003c08 <_realloc_r+0x48>
 8003be8:	4621      	mov	r1, r4
 8003bea:	4638      	mov	r0, r7
 8003bec:	f7ff ff8e 	bl	8003b0c <_malloc_r>
 8003bf0:	4605      	mov	r5, r0
 8003bf2:	2800      	cmp	r0, #0
 8003bf4:	d0f2      	beq.n	8003bdc <_realloc_r+0x1c>
 8003bf6:	4631      	mov	r1, r6
 8003bf8:	4622      	mov	r2, r4
 8003bfa:	f7ff ff17 	bl	8003a2c <memcpy>
 8003bfe:	4631      	mov	r1, r6
 8003c00:	4638      	mov	r0, r7
 8003c02:	f7ff ff37 	bl	8003a74 <_free_r>
 8003c06:	e7e9      	b.n	8003bdc <_realloc_r+0x1c>
 8003c08:	4635      	mov	r5, r6
 8003c0a:	e7e7      	b.n	8003bdc <_realloc_r+0x1c>

08003c0c <_sbrk_r>:
 8003c0c:	b538      	push	{r3, r4, r5, lr}
 8003c0e:	2300      	movs	r3, #0
 8003c10:	4c05      	ldr	r4, [pc, #20]	; (8003c28 <_sbrk_r+0x1c>)
 8003c12:	4605      	mov	r5, r0
 8003c14:	4608      	mov	r0, r1
 8003c16:	6023      	str	r3, [r4, #0]
 8003c18:	f7fd fca0 	bl	800155c <_sbrk>
 8003c1c:	1c43      	adds	r3, r0, #1
 8003c1e:	d102      	bne.n	8003c26 <_sbrk_r+0x1a>
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	b103      	cbz	r3, 8003c26 <_sbrk_r+0x1a>
 8003c24:	602b      	str	r3, [r5, #0]
 8003c26:	bd38      	pop	{r3, r4, r5, pc}
 8003c28:	20000164 	.word	0x20000164

08003c2c <__malloc_lock>:
 8003c2c:	4770      	bx	lr

08003c2e <__malloc_unlock>:
 8003c2e:	4770      	bx	lr

08003c30 <_malloc_usable_size_r>:
 8003c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c34:	1f18      	subs	r0, r3, #4
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	bfbc      	itt	lt
 8003c3a:	580b      	ldrlt	r3, [r1, r0]
 8003c3c:	18c0      	addlt	r0, r0, r3
 8003c3e:	4770      	bx	lr

08003c40 <_init>:
 8003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c42:	bf00      	nop
 8003c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c46:	bc08      	pop	{r3}
 8003c48:	469e      	mov	lr, r3
 8003c4a:	4770      	bx	lr

08003c4c <_fini>:
 8003c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4e:	bf00      	nop
 8003c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c52:	bc08      	pop	{r3}
 8003c54:	469e      	mov	lr, r3
 8003c56:	4770      	bx	lr
