
Vending_Machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003630  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800373c  0800373c  0001373c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003860  08003860  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003860  08003860  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003860  08003860  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003860  08003860  00013860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003864  08003864  00013864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000078  080038e0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  080038e0  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba23  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001deb  00000000  00000000  0002bac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd0  00000000  00000000  0002d8b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc8  00000000  00000000  0002e580  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001547e  00000000  00000000  0002f148  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009a55  00000000  00000000  000445c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00077444  00000000  00000000  0004e01b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c545f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c0  00000000  00000000  000c54dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003724 	.word	0x08003724

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003724 	.word	0x08003724

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fffc 	bl	800114c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f810 	bl	8000178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f91e 	bl	8000398 <MX_GPIO_Init>
  MX_ADC1_Init();
 800015c:	f000 f868 	bl	8000230 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000160:	f000 f8f0 	bl	8000344 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000164:	f000 f8a2 	bl	80002ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  myTask_init();
 8000168:	f000 fab2 	bl	80006d0 <myTask_init>
  HAL_TIM_Base_Start_IT(&htim2);
 800016c:	4801      	ldr	r0, [pc, #4]	; (8000174 <main+0x28>)
 800016e:	f002 fa10 	bl	8002592 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000172:	e7fe      	b.n	8000172 <main+0x26>
 8000174:	200000d8 	.word	0x200000d8

08000178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b094      	sub	sp, #80	; 0x50
 800017c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000182:	2228      	movs	r2, #40	; 0x28
 8000184:	2100      	movs	r1, #0
 8000186:	4618      	mov	r0, r3
 8000188:	f002 feb2 	bl	8002ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018c:	f107 0314 	add.w	r3, r7, #20
 8000190:	2200      	movs	r2, #0
 8000192:	601a      	str	r2, [r3, #0]
 8000194:	605a      	str	r2, [r3, #4]
 8000196:	609a      	str	r2, [r3, #8]
 8000198:	60da      	str	r2, [r3, #12]
 800019a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001a8:	2301      	movs	r3, #1
 80001aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b2:	2300      	movs	r3, #0
 80001b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b6:	2301      	movs	r3, #1
 80001b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ba:	2302      	movs	r3, #2
 80001bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ce:	4618      	mov	r0, r3
 80001d0:	f001 fce2 	bl	8001b98 <HAL_RCC_OscConfig>
 80001d4:	4603      	mov	r3, r0
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d001      	beq.n	80001de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001da:	f000 f967 	bl	80004ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001de:	230f      	movs	r3, #15
 80001e0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e2:	2302      	movs	r3, #2
 80001e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f0:	2300      	movs	r3, #0
 80001f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f4:	f107 0314 	add.w	r3, r7, #20
 80001f8:	2102      	movs	r1, #2
 80001fa:	4618      	mov	r0, r3
 80001fc:	f001 ff4c 	bl	8002098 <HAL_RCC_ClockConfig>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000206:	f000 f951 	bl	80004ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800020a:	2302      	movs	r3, #2
 800020c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800020e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000212:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	4618      	mov	r0, r3
 8000218:	f002 f8da 	bl	80023d0 <HAL_RCCEx_PeriphCLKConfig>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000222:	f000 f943 	bl	80004ac <Error_Handler>
  }
}
 8000226:	bf00      	nop
 8000228:	3750      	adds	r7, #80	; 0x50
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
	...

08000230 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000240:	4b18      	ldr	r3, [pc, #96]	; (80002a4 <MX_ADC1_Init+0x74>)
 8000242:	4a19      	ldr	r2, [pc, #100]	; (80002a8 <MX_ADC1_Init+0x78>)
 8000244:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000246:	4b17      	ldr	r3, [pc, #92]	; (80002a4 <MX_ADC1_Init+0x74>)
 8000248:	2200      	movs	r2, #0
 800024a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800024c:	4b15      	ldr	r3, [pc, #84]	; (80002a4 <MX_ADC1_Init+0x74>)
 800024e:	2200      	movs	r2, #0
 8000250:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000252:	4b14      	ldr	r3, [pc, #80]	; (80002a4 <MX_ADC1_Init+0x74>)
 8000254:	2200      	movs	r2, #0
 8000256:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000258:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <MX_ADC1_Init+0x74>)
 800025a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800025e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000260:	4b10      	ldr	r3, [pc, #64]	; (80002a4 <MX_ADC1_Init+0x74>)
 8000262:	2200      	movs	r2, #0
 8000264:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000266:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <MX_ADC1_Init+0x74>)
 8000268:	2201      	movs	r2, #1
 800026a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800026c:	480d      	ldr	r0, [pc, #52]	; (80002a4 <MX_ADC1_Init+0x74>)
 800026e:	f000 fff1 	bl	8001254 <HAL_ADC_Init>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000278:	f000 f918 	bl	80004ac <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800027c:	2300      	movs	r3, #0
 800027e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000280:	2301      	movs	r3, #1
 8000282:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	4619      	mov	r1, r3
 800028c:	4805      	ldr	r0, [pc, #20]	; (80002a4 <MX_ADC1_Init+0x74>)
 800028e:	f001 f8b9 	bl	8001404 <HAL_ADC_ConfigChannel>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000298:	f000 f908 	bl	80004ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800029c:	bf00      	nop
 800029e:	3710      	adds	r7, #16
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	200000a8 	.word	0x200000a8
 80002a8:	40012400 	.word	0x40012400

080002ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b086      	sub	sp, #24
 80002b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002b2:	f107 0308 	add.w	r3, r7, #8
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c0:	463b      	mov	r3, r7
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002c8:	4b1d      	ldr	r3, [pc, #116]	; (8000340 <MX_TIM2_Init+0x94>)
 80002ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 80002d0:	4b1b      	ldr	r3, [pc, #108]	; (8000340 <MX_TIM2_Init+0x94>)
 80002d2:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80002d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002d8:	4b19      	ldr	r3, [pc, #100]	; (8000340 <MX_TIM2_Init+0x94>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3;
 80002de:	4b18      	ldr	r3, [pc, #96]	; (8000340 <MX_TIM2_Init+0x94>)
 80002e0:	2203      	movs	r2, #3
 80002e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002e4:	4b16      	ldr	r3, [pc, #88]	; (8000340 <MX_TIM2_Init+0x94>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ea:	4b15      	ldr	r3, [pc, #84]	; (8000340 <MX_TIM2_Init+0x94>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002f0:	4813      	ldr	r0, [pc, #76]	; (8000340 <MX_TIM2_Init+0x94>)
 80002f2:	f002 f923 	bl	800253c <HAL_TIM_Base_Init>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002fc:	f000 f8d6 	bl	80004ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000304:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000306:	f107 0308 	add.w	r3, r7, #8
 800030a:	4619      	mov	r1, r3
 800030c:	480c      	ldr	r0, [pc, #48]	; (8000340 <MX_TIM2_Init+0x94>)
 800030e:	f002 fa6b 	bl	80027e8 <HAL_TIM_ConfigClockSource>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000318:	f000 f8c8 	bl	80004ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800031c:	2300      	movs	r3, #0
 800031e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000320:	2300      	movs	r3, #0
 8000322:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000324:	463b      	mov	r3, r7
 8000326:	4619      	mov	r1, r3
 8000328:	4805      	ldr	r0, [pc, #20]	; (8000340 <MX_TIM2_Init+0x94>)
 800032a:	f002 fc39 	bl	8002ba0 <HAL_TIMEx_MasterConfigSynchronization>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000334:	f000 f8ba 	bl	80004ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000338:	bf00      	nop
 800033a:	3718      	adds	r7, #24
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	200000d8 	.word	0x200000d8

08000344 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000348:	4b11      	ldr	r3, [pc, #68]	; (8000390 <MX_USART2_UART_Init+0x4c>)
 800034a:	4a12      	ldr	r2, [pc, #72]	; (8000394 <MX_USART2_UART_Init+0x50>)
 800034c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800034e:	4b10      	ldr	r3, [pc, #64]	; (8000390 <MX_USART2_UART_Init+0x4c>)
 8000350:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000354:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000356:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <MX_USART2_UART_Init+0x4c>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800035c:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <MX_USART2_UART_Init+0x4c>)
 800035e:	2200      	movs	r2, #0
 8000360:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000362:	4b0b      	ldr	r3, [pc, #44]	; (8000390 <MX_USART2_UART_Init+0x4c>)
 8000364:	2200      	movs	r2, #0
 8000366:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000368:	4b09      	ldr	r3, [pc, #36]	; (8000390 <MX_USART2_UART_Init+0x4c>)
 800036a:	220c      	movs	r2, #12
 800036c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800036e:	4b08      	ldr	r3, [pc, #32]	; (8000390 <MX_USART2_UART_Init+0x4c>)
 8000370:	2200      	movs	r2, #0
 8000372:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <MX_USART2_UART_Init+0x4c>)
 8000376:	2200      	movs	r2, #0
 8000378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800037a:	4805      	ldr	r0, [pc, #20]	; (8000390 <MX_USART2_UART_Init+0x4c>)
 800037c:	f002 fc66 	bl	8002c4c <HAL_UART_Init>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000386:	f000 f891 	bl	80004ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	20000118 	.word	0x20000118
 8000394:	40004400 	.word	0x40004400

08000398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b088      	sub	sp, #32
 800039c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039e:	f107 0310 	add.w	r3, r7, #16
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ac:	4b3b      	ldr	r3, [pc, #236]	; (800049c <MX_GPIO_Init+0x104>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a3a      	ldr	r2, [pc, #232]	; (800049c <MX_GPIO_Init+0x104>)
 80003b2:	f043 0310 	orr.w	r3, r3, #16
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b38      	ldr	r3, [pc, #224]	; (800049c <MX_GPIO_Init+0x104>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0310 	and.w	r3, r3, #16
 80003c0:	60fb      	str	r3, [r7, #12]
 80003c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003c4:	4b35      	ldr	r3, [pc, #212]	; (800049c <MX_GPIO_Init+0x104>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a34      	ldr	r2, [pc, #208]	; (800049c <MX_GPIO_Init+0x104>)
 80003ca:	f043 0320 	orr.w	r3, r3, #32
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b32      	ldr	r3, [pc, #200]	; (800049c <MX_GPIO_Init+0x104>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f003 0320 	and.w	r3, r3, #32
 80003d8:	60bb      	str	r3, [r7, #8]
 80003da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003dc:	4b2f      	ldr	r3, [pc, #188]	; (800049c <MX_GPIO_Init+0x104>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a2e      	ldr	r2, [pc, #184]	; (800049c <MX_GPIO_Init+0x104>)
 80003e2:	f043 0304 	orr.w	r3, r3, #4
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	4b2c      	ldr	r3, [pc, #176]	; (800049c <MX_GPIO_Init+0x104>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f003 0304 	and.w	r3, r3, #4
 80003f0:	607b      	str	r3, [r7, #4]
 80003f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f4:	4b29      	ldr	r3, [pc, #164]	; (800049c <MX_GPIO_Init+0x104>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a28      	ldr	r2, [pc, #160]	; (800049c <MX_GPIO_Init+0x104>)
 80003fa:	f043 0308 	orr.w	r3, r3, #8
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b26      	ldr	r3, [pc, #152]	; (800049c <MX_GPIO_Init+0x104>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0308 	and.w	r3, r3, #8
 8000408:	603b      	str	r3, [r7, #0]
 800040a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_BLUE_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin 
 800040c:	2200      	movs	r2, #0
 800040e:	f640 71fb 	movw	r1, #4091	; 0xffb
 8000412:	4823      	ldr	r0, [pc, #140]	; (80004a0 <MX_GPIO_Init+0x108>)
 8000414:	f001 fba7 	bl	8001b66 <HAL_GPIO_WritePin>
                          |LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin 
                          |LCD_D6_Pin|LCD_D7_Pin|LCD_BKL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800041e:	4821      	ldr	r0, [pc, #132]	; (80004a4 <MX_GPIO_Init+0x10c>)
 8000420:	f001 fba1 	bl	8001b66 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : u500_Pin u1000_Pin */
  GPIO_InitStruct.Pin = u500_Pin|u1000_Pin;
 8000424:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000428:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800042a:	2300      	movs	r3, #0
 800042c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800042e:	2301      	movs	r3, #1
 8000430:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000432:	f107 0310 	add.w	r3, r7, #16
 8000436:	4619      	mov	r1, r3
 8000438:	481b      	ldr	r0, [pc, #108]	; (80004a8 <MX_GPIO_Init+0x110>)
 800043a:	f001 fa23 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB_PROCESS_Pin PB_CANCEL_Pin */
  GPIO_InitStruct.Pin = PB_PROCESS_Pin|PB_CANCEL_Pin;
 800043e:	2330      	movs	r3, #48	; 0x30
 8000440:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000442:	2300      	movs	r3, #0
 8000444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000446:	2301      	movs	r3, #1
 8000448:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044a:	f107 0310 	add.w	r3, r7, #16
 800044e:	4619      	mov	r1, r3
 8000450:	4814      	ldr	r0, [pc, #80]	; (80004a4 <MX_GPIO_Init+0x10c>)
 8000452:	f001 fa17 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin 
                           LCD_RS_Pin LCD_E_Pin LCD_D4_Pin LCD_D5_Pin 
                           LCD_D6_Pin LCD_D7_Pin LCD_BKL_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin 
 8000456:	f640 73fb 	movw	r3, #4091	; 0xffb
 800045a:	613b      	str	r3, [r7, #16]
                          |LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin 
                          |LCD_D6_Pin|LCD_D7_Pin|LCD_BKL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045c:	2301      	movs	r3, #1
 800045e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000460:	2300      	movs	r3, #0
 8000462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000464:	2302      	movs	r3, #2
 8000466:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000468:	f107 0310 	add.w	r3, r7, #16
 800046c:	4619      	mov	r1, r3
 800046e:	480c      	ldr	r0, [pc, #48]	; (80004a0 <MX_GPIO_Init+0x108>)
 8000470:	f001 fa08 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8000474:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047a:	2301      	movs	r3, #1
 800047c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047e:	2300      	movs	r3, #0
 8000480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000482:	2302      	movs	r3, #2
 8000484:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000486:	f107 0310 	add.w	r3, r7, #16
 800048a:	4619      	mov	r1, r3
 800048c:	4805      	ldr	r0, [pc, #20]	; (80004a4 <MX_GPIO_Init+0x10c>)
 800048e:	f001 f9f9 	bl	8001884 <HAL_GPIO_Init>

}
 8000492:	bf00      	nop
 8000494:	3720      	adds	r7, #32
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40021000 	.word	0x40021000
 80004a0:	40010c00 	.word	0x40010c00
 80004a4:	40010800 	.word	0x40010800
 80004a8:	40011000 	.word	0x40011000

080004ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr

080004b8 <myLCD_init>:
#include "stm32f1xx_hal.h"
#include "main.h"
#include "myLCD.h"
#include <stdio.h>

void myLCD_init(void){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	HAL_Delay(25);
 80004bc:	2019      	movs	r0, #25
 80004be:	f000 fea7 	bl	8001210 <HAL_Delay>
	myLCD_command(0x33);
 80004c2:	2033      	movs	r0, #51	; 0x33
 80004c4:	f000 f894 	bl	80005f0 <myLCD_command>
	myLCD_command(0x32);
 80004c8:	2032      	movs	r0, #50	; 0x32
 80004ca:	f000 f891 	bl	80005f0 <myLCD_command>
	myLCD_command(0x28);
 80004ce:	2028      	movs	r0, #40	; 0x28
 80004d0:	f000 f88e 	bl	80005f0 <myLCD_command>
	myLCD_command(0x0C);
 80004d4:	200c      	movs	r0, #12
 80004d6:	f000 f88b 	bl	80005f0 <myLCD_command>
	myLCD_command(0x01);
 80004da:	2001      	movs	r0, #1
 80004dc:	f000 f888 	bl	80005f0 <myLCD_command>
}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <myLCD_write4bit>:
void myLCD_write4bit(uint8_t data){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, ((data>>0)&1)? GPIO_PIN_SET:GPIO_PIN_RESET);
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	f003 0301 	and.w	r3, r3, #1
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	461a      	mov	r2, r3
 80004f8:	2120      	movs	r1, #32
 80004fa:	4814      	ldr	r0, [pc, #80]	; (800054c <myLCD_write4bit+0x68>)
 80004fc:	f001 fb33 	bl	8001b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, ((data>>1)&1)? GPIO_PIN_SET:GPIO_PIN_RESET);
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	085b      	lsrs	r3, r3, #1
 8000504:	b2db      	uxtb	r3, r3
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	b2db      	uxtb	r3, r3
 800050c:	461a      	mov	r2, r3
 800050e:	2140      	movs	r1, #64	; 0x40
 8000510:	480e      	ldr	r0, [pc, #56]	; (800054c <myLCD_write4bit+0x68>)
 8000512:	f001 fb28 	bl	8001b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, ((data>>2)&1)? GPIO_PIN_SET:GPIO_PIN_RESET);
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	089b      	lsrs	r3, r3, #2
 800051a:	b2db      	uxtb	r3, r3
 800051c:	f003 0301 	and.w	r3, r3, #1
 8000520:	b2db      	uxtb	r3, r3
 8000522:	461a      	mov	r2, r3
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	4809      	ldr	r0, [pc, #36]	; (800054c <myLCD_write4bit+0x68>)
 8000528:	f001 fb1d 	bl	8001b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, ((data>>3)&1)? GPIO_PIN_SET:GPIO_PIN_RESET);
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	08db      	lsrs	r3, r3, #3
 8000530:	b2db      	uxtb	r3, r3
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	b2db      	uxtb	r3, r3
 8000538:	461a      	mov	r2, r3
 800053a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800053e:	4803      	ldr	r0, [pc, #12]	; (800054c <myLCD_write4bit+0x68>)
 8000540:	f001 fb11 	bl	8001b66 <HAL_GPIO_WritePin>
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40010c00 	.word	0x40010c00

08000550 <myLCD_send>:

void myLCD_send(_Bool mode, uint8_t data){
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	460a      	mov	r2, r1
 800055a:	71fb      	strb	r3, [r7, #7]
 800055c:	4613      	mov	r3, r2
 800055e:	71bb      	strb	r3, [r7, #6]
	if(mode){ myLCD_RS(1); }
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d005      	beq.n	8000572 <myLCD_send+0x22>
 8000566:	2201      	movs	r2, #1
 8000568:	2108      	movs	r1, #8
 800056a:	4820      	ldr	r0, [pc, #128]	; (80005ec <myLCD_send+0x9c>)
 800056c:	f001 fafb 	bl	8001b66 <HAL_GPIO_WritePin>
 8000570:	e004      	b.n	800057c <myLCD_send+0x2c>
	else	{ myLCD_RS(0); }
 8000572:	2200      	movs	r2, #0
 8000574:	2108      	movs	r1, #8
 8000576:	481d      	ldr	r0, [pc, #116]	; (80005ec <myLCD_send+0x9c>)
 8000578:	f001 faf5 	bl	8001b66 <HAL_GPIO_WritePin>

	myLCD_write4bit(data>>4);
 800057c:	79bb      	ldrb	r3, [r7, #6]
 800057e:	091b      	lsrs	r3, r3, #4
 8000580:	b2db      	uxtb	r3, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff ffae 	bl	80004e4 <myLCD_write4bit>
	myLCD_E();
 8000588:	2201      	movs	r2, #1
 800058a:	2110      	movs	r1, #16
 800058c:	4817      	ldr	r0, [pc, #92]	; (80005ec <myLCD_send+0x9c>)
 800058e:	f001 faea 	bl	8001b66 <HAL_GPIO_WritePin>
 8000592:	2300      	movs	r3, #0
 8000594:	81fb      	strh	r3, [r7, #14]
 8000596:	e002      	b.n	800059e <myLCD_send+0x4e>
 8000598:	89fb      	ldrh	r3, [r7, #14]
 800059a:	3301      	adds	r3, #1
 800059c:	81fb      	strh	r3, [r7, #14]
 800059e:	89fb      	ldrh	r3, [r7, #14]
 80005a0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d9f7      	bls.n	8000598 <myLCD_send+0x48>
 80005a8:	2200      	movs	r2, #0
 80005aa:	2110      	movs	r1, #16
 80005ac:	480f      	ldr	r0, [pc, #60]	; (80005ec <myLCD_send+0x9c>)
 80005ae:	f001 fada 	bl	8001b66 <HAL_GPIO_WritePin>
	myLCD_write4bit(data);
 80005b2:	79bb      	ldrb	r3, [r7, #6]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff ff95 	bl	80004e4 <myLCD_write4bit>
	myLCD_E();
 80005ba:	2201      	movs	r2, #1
 80005bc:	2110      	movs	r1, #16
 80005be:	480b      	ldr	r0, [pc, #44]	; (80005ec <myLCD_send+0x9c>)
 80005c0:	f001 fad1 	bl	8001b66 <HAL_GPIO_WritePin>
 80005c4:	2300      	movs	r3, #0
 80005c6:	81bb      	strh	r3, [r7, #12]
 80005c8:	e002      	b.n	80005d0 <myLCD_send+0x80>
 80005ca:	89bb      	ldrh	r3, [r7, #12]
 80005cc:	3301      	adds	r3, #1
 80005ce:	81bb      	strh	r3, [r7, #12]
 80005d0:	89bb      	ldrh	r3, [r7, #12]
 80005d2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d9f7      	bls.n	80005ca <myLCD_send+0x7a>
 80005da:	2200      	movs	r2, #0
 80005dc:	2110      	movs	r1, #16
 80005de:	4803      	ldr	r0, [pc, #12]	; (80005ec <myLCD_send+0x9c>)
 80005e0:	f001 fac1 	bl	8001b66 <HAL_GPIO_WritePin>

}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40010c00 	.word	0x40010c00

080005f0 <myLCD_command>:
void myLCD_command(uint8_t data){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	myLCD_send(0, data);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	4619      	mov	r1, r3
 80005fe:	2000      	movs	r0, #0
 8000600:	f7ff ffa6 	bl	8000550 <myLCD_send>
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <myLCD_data>:
void myLCD_data(uint8_t data){
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
	myLCD_send(1, data);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	4619      	mov	r1, r3
 800061a:	2001      	movs	r0, #1
 800061c:	f7ff ff98 	bl	8000550 <myLCD_send>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <myLCD_setCursor>:
void myLCD_setCursor(uint8_t x, uint8_t y){
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	460a      	mov	r2, r1
 8000632:	71fb      	strb	r3, [r7, #7]
 8000634:	4613      	mov	r3, r2
 8000636:	71bb      	strb	r3, [r7, #6]
	if(y==0) {myLCD_command(0x80 + x); }
 8000638:	79bb      	ldrb	r3, [r7, #6]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d105      	bne.n	800064a <myLCD_setCursor+0x22>
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	3b80      	subs	r3, #128	; 0x80
 8000642:	b2db      	uxtb	r3, r3
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff ffd3 	bl	80005f0 <myLCD_command>
	if(y==1) {myLCD_command(0xC0 + x); }
 800064a:	79bb      	ldrb	r3, [r7, #6]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d105      	bne.n	800065c <myLCD_setCursor+0x34>
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	3b40      	subs	r3, #64	; 0x40
 8000654:	b2db      	uxtb	r3, r3
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ffca 	bl	80005f0 <myLCD_command>
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <myLCD_print>:
void myLCD_print(char *pData){
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	while(*pData){
 800066c:	e007      	b.n	800067e <myLCD_print+0x1a>
		myLCD_data(*pData);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ffca 	bl	800060c <myLCD_data>
		pData++;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	3301      	adds	r3, #1
 800067c:	607b      	str	r3, [r7, #4]
	while(*pData){
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d1f3      	bne.n	800066e <myLCD_print+0xa>
	}
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <myLCD_printNum>:
void myLCD_printNum(int16_t number){
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	80fb      	strh	r3, [r7, #6]
	char buff[20];
	sprintf(buff,"%d",number);
 800069a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	4906      	ldr	r1, [pc, #24]	; (80006bc <myLCD_printNum+0x2c>)
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 fc2b 	bl	8002f00 <siprintf>
	myLCD_print(buff);
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ffd8 	bl	8000664 <myLCD_print>
}
 80006b4:	bf00      	nop
 80006b6:	3720      	adds	r7, #32
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	0800373c 	.word	0x0800373c

080006c0 <myLCD_clear>:
void myLCD_clear(void){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	myLCD_command(0x01);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff ff93 	bl	80005f0 <myLCD_command>
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <myTask_init>:
volatile uint16_t saldo=0;
volatile uint8_t i=0,j=0;
_Bool pressed=0;
_Bool toggle=0;

void myTask_init(void){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	myLCD_init();
 80006d4:	f7ff fef0 	bl	80004b8 <myLCD_init>
	myLCD_Bkl(1);
 80006d8:	2201      	movs	r2, #1
 80006da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006de:	480d      	ldr	r0, [pc, #52]	; (8000714 <myTask_init+0x44>)
 80006e0:	f001 fa41 	bl	8001b66 <HAL_GPIO_WritePin>
	ledProcess(0);
 80006e4:	2201      	movs	r2, #1
 80006e6:	2101      	movs	r1, #1
 80006e8:	480a      	ldr	r0, [pc, #40]	; (8000714 <myTask_init+0x44>)
 80006ea:	f001 fa3c 	bl	8001b66 <HAL_GPIO_WritePin>
	ledCancel(0);
 80006ee:	2201      	movs	r2, #1
 80006f0:	2102      	movs	r1, #2
 80006f2:	4808      	ldr	r0, [pc, #32]	; (8000714 <myTask_init+0x44>)
 80006f4:	f001 fa37 	bl	8001b66 <HAL_GPIO_WritePin>
	ledBack(0);
 80006f8:	2201      	movs	r2, #1
 80006fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <myTask_init+0x44>)
 8000700:	f001 fa31 	bl	8001b66 <HAL_GPIO_WritePin>
	ledDrop(0);
 8000704:	2201      	movs	r2, #1
 8000706:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800070a:	4802      	ldr	r0, [pc, #8]	; (8000714 <myTask_init+0x44>)
 800070c:	f001 fa2b 	bl	8001b66 <HAL_GPIO_WritePin>
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40010c00 	.word	0x40010c00

08000718 <myTask_Run>:

void myTask_Run(void){
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	switch (myState){
 800071c:	4ba5      	ldr	r3, [pc, #660]	; (80009b4 <myTask_Run+0x29c>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b0b      	cmp	r3, #11
 8000722:	f200 829f 	bhi.w	8000c64 <myTask_Run+0x54c>
 8000726:	a201      	add	r2, pc, #4	; (adr r2, 800072c <myTask_Run+0x14>)
 8000728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072c:	0800075d 	.word	0x0800075d
 8000730:	08000781 	.word	0x08000781
 8000734:	08000c65 	.word	0x08000c65
 8000738:	08000c65 	.word	0x08000c65
 800073c:	080007b9 	.word	0x080007b9
 8000740:	08000899 	.word	0x08000899
 8000744:	08000921 	.word	0x08000921
 8000748:	08000ae5 	.word	0x08000ae5
 800074c:	08000b6d 	.word	0x08000b6d
 8000750:	08000bbd 	.word	0x08000bbd
 8000754:	08000bfd 	.word	0x08000bfd
 8000758:	08000a01 	.word	0x08000a01
	case start:{
		myLCD_setCursor(0, 0); myLCD_print("Vending Machine");
 800075c:	2100      	movs	r1, #0
 800075e:	2000      	movs	r0, #0
 8000760:	f7ff ff62 	bl	8000628 <myLCD_setCursor>
 8000764:	4894      	ldr	r0, [pc, #592]	; (80009b8 <myTask_Run+0x2a0>)
 8000766:	f7ff ff7d 	bl	8000664 <myLCD_print>
		myLCD_setCursor(0, 1); myLCD_print("Andi Mei");
 800076a:	2101      	movs	r1, #1
 800076c:	2000      	movs	r0, #0
 800076e:	f7ff ff5b 	bl	8000628 <myLCD_setCursor>
 8000772:	4892      	ldr	r0, [pc, #584]	; (80009bc <myTask_Run+0x2a4>)
 8000774:	f7ff ff76 	bl	8000664 <myLCD_print>
		myState=startDelay;
 8000778:	4b8e      	ldr	r3, [pc, #568]	; (80009b4 <myTask_Run+0x29c>)
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
	}break;
 800077e:	e271      	b.n	8000c64 <myTask_Run+0x54c>

	case startDelay:{
		if(++delay1 > 1000){
 8000780:	4b8f      	ldr	r3, [pc, #572]	; (80009c0 <myTask_Run+0x2a8>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	b29b      	uxth	r3, r3
 8000786:	3301      	adds	r3, #1
 8000788:	b29b      	uxth	r3, r3
 800078a:	4a8d      	ldr	r2, [pc, #564]	; (80009c0 <myTask_Run+0x2a8>)
 800078c:	4619      	mov	r1, r3
 800078e:	8011      	strh	r1, [r2, #0]
 8000790:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000794:	f240 8255 	bls.w	8000c42 <myTask_Run+0x52a>
			delay1=0;
 8000798:	4b89      	ldr	r3, [pc, #548]	; (80009c0 <myTask_Run+0x2a8>)
 800079a:	2200      	movs	r2, #0
 800079c:	801a      	strh	r2, [r3, #0]
			myLCD_clear();
 800079e:	f7ff ff8f 	bl	80006c0 <myLCD_clear>
			myLCD_setCursor(0, 0); myLCD_print("Insert Coin !");
 80007a2:	2100      	movs	r1, #0
 80007a4:	2000      	movs	r0, #0
 80007a6:	f7ff ff3f 	bl	8000628 <myLCD_setCursor>
 80007aa:	4886      	ldr	r0, [pc, #536]	; (80009c4 <myTask_Run+0x2ac>)
 80007ac:	f7ff ff5a 	bl	8000664 <myLCD_print>
			myState=checkCoin;
 80007b0:	4b80      	ldr	r3, [pc, #512]	; (80009b4 <myTask_Run+0x29c>)
 80007b2:	2204      	movs	r2, #4
 80007b4:	701a      	strb	r2, [r3, #0]
		}

	}break;
 80007b6:	e244      	b.n	8000c42 <myTask_Run+0x52a>

	case checkCoin:{
		if(PB_u500()){
 80007b8:	f000 fad0 	bl	8000d5c <PB_u500>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d012      	beq.n	80007e8 <myTask_Run+0xd0>
			myLCD_clear();
 80007c2:	f7ff ff7d 	bl	80006c0 <myLCD_clear>
			myLCD_setCursor(0, 0); myLCD_print("Success !");
 80007c6:	2100      	movs	r1, #0
 80007c8:	2000      	movs	r0, #0
 80007ca:	f7ff ff2d 	bl	8000628 <myLCD_setCursor>
 80007ce:	487e      	ldr	r0, [pc, #504]	; (80009c8 <myTask_Run+0x2b0>)
 80007d0:	f7ff ff48 	bl	8000664 <myLCD_print>
			myLCD_setCursor(0, 1); myLCD_print("500 inserted");
 80007d4:	2101      	movs	r1, #1
 80007d6:	2000      	movs	r0, #0
 80007d8:	f7ff ff26 	bl	8000628 <myLCD_setCursor>
 80007dc:	487b      	ldr	r0, [pc, #492]	; (80009cc <myTask_Run+0x2b4>)
 80007de:	f7ff ff41 	bl	8000664 <myLCD_print>
			myState=in500;
 80007e2:	4b74      	ldr	r3, [pc, #464]	; (80009b4 <myTask_Run+0x29c>)
 80007e4:	2207      	movs	r2, #7
 80007e6:	701a      	strb	r2, [r3, #0]
		}
		if(PB_u1000()){
 80007e8:	f000 fae8 	bl	8000dbc <PB_u1000>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d012      	beq.n	8000818 <myTask_Run+0x100>
			myLCD_clear();
 80007f2:	f7ff ff65 	bl	80006c0 <myLCD_clear>
			myLCD_setCursor(0, 0); myLCD_print("Success !");
 80007f6:	2100      	movs	r1, #0
 80007f8:	2000      	movs	r0, #0
 80007fa:	f7ff ff15 	bl	8000628 <myLCD_setCursor>
 80007fe:	4872      	ldr	r0, [pc, #456]	; (80009c8 <myTask_Run+0x2b0>)
 8000800:	f7ff ff30 	bl	8000664 <myLCD_print>
			myLCD_setCursor(0, 1); myLCD_print("1000 inserted");
 8000804:	2101      	movs	r1, #1
 8000806:	2000      	movs	r0, #0
 8000808:	f7ff ff0e 	bl	8000628 <myLCD_setCursor>
 800080c:	4870      	ldr	r0, [pc, #448]	; (80009d0 <myTask_Run+0x2b8>)
 800080e:	f7ff ff29 	bl	8000664 <myLCD_print>
			myState=in1000;
 8000812:	4b68      	ldr	r3, [pc, #416]	; (80009b4 <myTask_Run+0x29c>)
 8000814:	2208      	movs	r2, #8
 8000816:	701a      	strb	r2, [r3, #0]
		}

		if(saldo==500){
 8000818:	4b6e      	ldr	r3, [pc, #440]	; (80009d4 <myTask_Run+0x2bc>)
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	b29b      	uxth	r3, r3
 800081e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000822:	d10a      	bne.n	800083a <myTask_Run+0x122>
			if(PB_Cancel()){
 8000824:	f000 fa6a 	bl	8000cfc <PB_Cancel>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d005      	beq.n	800083a <myTask_Run+0x122>
				saldo=0;
 800082e:	4b69      	ldr	r3, [pc, #420]	; (80009d4 <myTask_Run+0x2bc>)
 8000830:	2200      	movs	r2, #0
 8000832:	801a      	strh	r2, [r3, #0]
				myState=cancel;
 8000834:	4b5f      	ldr	r3, [pc, #380]	; (80009b4 <myTask_Run+0x29c>)
 8000836:	220b      	movs	r2, #11
 8000838:	701a      	strb	r2, [r3, #0]
			}
		}

		if(saldo==1000){
 800083a:	4b66      	ldr	r3, [pc, #408]	; (80009d4 <myTask_Run+0x2bc>)
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	b29b      	uxth	r3, r3
 8000840:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000844:	d104      	bne.n	8000850 <myTask_Run+0x138>
			myLCD_clear();
 8000846:	f7ff ff3b 	bl	80006c0 <myLCD_clear>
			myState=ready;
 800084a:	4b5a      	ldr	r3, [pc, #360]	; (80009b4 <myTask_Run+0x29c>)
 800084c:	2205      	movs	r2, #5
 800084e:	701a      	strb	r2, [r3, #0]
		}

		if(saldo==1500){
 8000850:	4b60      	ldr	r3, [pc, #384]	; (80009d4 <myTask_Run+0x2bc>)
 8000852:	881b      	ldrh	r3, [r3, #0]
 8000854:	b29b      	uxth	r3, r3
 8000856:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800085a:	4293      	cmp	r3, r2
 800085c:	f040 81f3 	bne.w	8000c46 <myTask_Run+0x52e>
			myLCD_clear();
 8000860:	f7ff ff2e 	bl	80006c0 <myLCD_clear>
			myLCD_setCursor(0, 0); myLCD_print("Money Returned !");
 8000864:	2100      	movs	r1, #0
 8000866:	2000      	movs	r0, #0
 8000868:	f7ff fede 	bl	8000628 <myLCD_setCursor>
 800086c:	485a      	ldr	r0, [pc, #360]	; (80009d8 <myTask_Run+0x2c0>)
 800086e:	f7ff fef9 	bl	8000664 <myLCD_print>
			myLCD_setCursor(0, 1); myLCD_print("Rp.500");
 8000872:	2101      	movs	r1, #1
 8000874:	2000      	movs	r0, #0
 8000876:	f7ff fed7 	bl	8000628 <myLCD_setCursor>
 800087a:	4858      	ldr	r0, [pc, #352]	; (80009dc <myTask_Run+0x2c4>)
 800087c:	f7ff fef2 	bl	8000664 <myLCD_print>
			saldo-=500;		//Saldo dikurangi 500
 8000880:	4b54      	ldr	r3, [pc, #336]	; (80009d4 <myTask_Run+0x2bc>)
 8000882:	881b      	ldrh	r3, [r3, #0]
 8000884:	b29b      	uxth	r3, r3
 8000886:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800088a:	b29a      	uxth	r2, r3
 800088c:	4b51      	ldr	r3, [pc, #324]	; (80009d4 <myTask_Run+0x2bc>)
 800088e:	801a      	strh	r2, [r3, #0]
			myState=out500;
 8000890:	4b48      	ldr	r3, [pc, #288]	; (80009b4 <myTask_Run+0x29c>)
 8000892:	2209      	movs	r2, #9
 8000894:	701a      	strb	r2, [r3, #0]
		}
	}break;
 8000896:	e1d6      	b.n	8000c46 <myTask_Run+0x52e>

	case ready:{
		myLCD_setCursor(0, 0); myLCD_print("Process? (Y/N)");
 8000898:	2100      	movs	r1, #0
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff fec4 	bl	8000628 <myLCD_setCursor>
 80008a0:	484f      	ldr	r0, [pc, #316]	; (80009e0 <myTask_Run+0x2c8>)
 80008a2:	f7ff fedf 	bl	8000664 <myLCD_print>
		ledProcess(1);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2101      	movs	r1, #1
 80008aa:	484e      	ldr	r0, [pc, #312]	; (80009e4 <myTask_Run+0x2cc>)
 80008ac:	f001 f95b 	bl	8001b66 <HAL_GPIO_WritePin>
		if(PB_Process()){
 80008b0:	f000 f9f4 	bl	8000c9c <PB_Process>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d015      	beq.n	80008e6 <myTask_Run+0x1ce>
			myLCD_clear();
 80008ba:	f7ff ff01 	bl	80006c0 <myLCD_clear>
			myLCD_setCursor(0, 0); myLCD_print("Success !");
 80008be:	2100      	movs	r1, #0
 80008c0:	2000      	movs	r0, #0
 80008c2:	f7ff feb1 	bl	8000628 <myLCD_setCursor>
 80008c6:	4840      	ldr	r0, [pc, #256]	; (80009c8 <myTask_Run+0x2b0>)
 80008c8:	f7ff fecc 	bl	8000664 <myLCD_print>
			myLCD_setCursor(0, 1); myLCD_print("Candy Dropped");
 80008cc:	2101      	movs	r1, #1
 80008ce:	2000      	movs	r0, #0
 80008d0:	f7ff feaa 	bl	8000628 <myLCD_setCursor>
 80008d4:	4844      	ldr	r0, [pc, #272]	; (80009e8 <myTask_Run+0x2d0>)
 80008d6:	f7ff fec5 	bl	8000664 <myLCD_print>
			saldo=0;
 80008da:	4b3e      	ldr	r3, [pc, #248]	; (80009d4 <myTask_Run+0x2bc>)
 80008dc:	2200      	movs	r2, #0
 80008de:	801a      	strh	r2, [r3, #0]
			myState=drop;
 80008e0:	4b34      	ldr	r3, [pc, #208]	; (80009b4 <myTask_Run+0x29c>)
 80008e2:	2206      	movs	r2, #6
 80008e4:	701a      	strb	r2, [r3, #0]
		}

		if(PB_Cancel()){
 80008e6:	f000 fa09 	bl	8000cfc <PB_Cancel>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	f000 81ac 	beq.w	8000c4a <myTask_Run+0x532>
			myLCD_clear();
 80008f2:	f7ff fee5 	bl	80006c0 <myLCD_clear>
			myLCD_setCursor(0, 0); myLCD_print("Transaction");
 80008f6:	2100      	movs	r1, #0
 80008f8:	2000      	movs	r0, #0
 80008fa:	f7ff fe95 	bl	8000628 <myLCD_setCursor>
 80008fe:	483b      	ldr	r0, [pc, #236]	; (80009ec <myTask_Run+0x2d4>)
 8000900:	f7ff feb0 	bl	8000664 <myLCD_print>
			myLCD_setCursor(0, 1); myLCD_print("Canceled");
 8000904:	2101      	movs	r1, #1
 8000906:	2000      	movs	r0, #0
 8000908:	f7ff fe8e 	bl	8000628 <myLCD_setCursor>
 800090c:	4838      	ldr	r0, [pc, #224]	; (80009f0 <myTask_Run+0x2d8>)
 800090e:	f7ff fea9 	bl	8000664 <myLCD_print>
			saldo=0;
 8000912:	4b30      	ldr	r3, [pc, #192]	; (80009d4 <myTask_Run+0x2bc>)
 8000914:	2200      	movs	r2, #0
 8000916:	801a      	strh	r2, [r3, #0]
			myState=cancel;
 8000918:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <myTask_Run+0x29c>)
 800091a:	220b      	movs	r2, #11
 800091c:	701a      	strb	r2, [r3, #0]

		}
	}break;
 800091e:	e194      	b.n	8000c4a <myTask_Run+0x532>

	case drop:{
		ledProcess(0);
 8000920:	2201      	movs	r2, #1
 8000922:	2101      	movs	r1, #1
 8000924:	482f      	ldr	r0, [pc, #188]	; (80009e4 <myTask_Run+0x2cc>)
 8000926:	f001 f91e 	bl	8001b66 <HAL_GPIO_WritePin>
		if(++delay1 > 80){
 800092a:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <myTask_Run+0x2a8>)
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	b29b      	uxth	r3, r3
 8000930:	3301      	adds	r3, #1
 8000932:	b29b      	uxth	r3, r3
 8000934:	4a22      	ldr	r2, [pc, #136]	; (80009c0 <myTask_Run+0x2a8>)
 8000936:	4619      	mov	r1, r3
 8000938:	8011      	strh	r1, [r2, #0]
 800093a:	2b50      	cmp	r3, #80	; 0x50
 800093c:	d92b      	bls.n	8000996 <myTask_Run+0x27e>
			delay1=0;
 800093e:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <myTask_Run+0x2a8>)
 8000940:	2200      	movs	r2, #0
 8000942:	801a      	strh	r2, [r3, #0]
			toggle=!(toggle);
 8000944:	4b2b      	ldr	r3, [pc, #172]	; (80009f4 <myTask_Run+0x2dc>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	bf14      	ite	ne
 800094c:	2301      	movne	r3, #1
 800094e:	2300      	moveq	r3, #0
 8000950:	b2db      	uxtb	r3, r3
 8000952:	f083 0301 	eor.w	r3, r3, #1
 8000956:	b2db      	uxtb	r3, r3
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4b25      	ldr	r3, [pc, #148]	; (80009f4 <myTask_Run+0x2dc>)
 8000960:	701a      	strb	r2, [r3, #0]
			i++;
 8000962:	4b25      	ldr	r3, [pc, #148]	; (80009f8 <myTask_Run+0x2e0>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	b2db      	uxtb	r3, r3
 8000968:	3301      	adds	r3, #1
 800096a:	b2da      	uxtb	r2, r3
 800096c:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <myTask_Run+0x2e0>)
 800096e:	701a      	strb	r2, [r3, #0]
			buzzer(toggle);
 8000970:	4b20      	ldr	r3, [pc, #128]	; (80009f4 <myTask_Run+0x2dc>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800097a:	4820      	ldr	r0, [pc, #128]	; (80009fc <myTask_Run+0x2e4>)
 800097c:	f001 f8f3 	bl	8001b66 <HAL_GPIO_WritePin>
			ledDrop(toggle);
 8000980:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <myTask_Run+0x2dc>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	f083 0301 	eor.w	r3, r3, #1
 8000988:	b2db      	uxtb	r3, r3
 800098a:	461a      	mov	r2, r3
 800098c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000990:	4814      	ldr	r0, [pc, #80]	; (80009e4 <myTask_Run+0x2cc>)
 8000992:	f001 f8e8 	bl	8001b66 <HAL_GPIO_WritePin>
		}

		if(i>5) {
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <myTask_Run+0x2e0>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	b2db      	uxtb	r3, r3
 800099c:	2b05      	cmp	r3, #5
 800099e:	f240 8156 	bls.w	8000c4e <myTask_Run+0x536>
			i=0;
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <myTask_Run+0x2e0>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
			myLCD_clear();
 80009a8:	f7ff fe8a 	bl	80006c0 <myLCD_clear>
			myState=start;
 80009ac:	4b01      	ldr	r3, [pc, #4]	; (80009b4 <myTask_Run+0x29c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]
		}

	}break;
 80009b2:	e14c      	b.n	8000c4e <myTask_Run+0x536>
 80009b4:	20000158 	.word	0x20000158
 80009b8:	08003740 	.word	0x08003740
 80009bc:	08003750 	.word	0x08003750
 80009c0:	20000094 	.word	0x20000094
 80009c4:	0800375c 	.word	0x0800375c
 80009c8:	0800376c 	.word	0x0800376c
 80009cc:	08003778 	.word	0x08003778
 80009d0:	08003788 	.word	0x08003788
 80009d4:	20000096 	.word	0x20000096
 80009d8:	08003798 	.word	0x08003798
 80009dc:	080037ac 	.word	0x080037ac
 80009e0:	080037b4 	.word	0x080037b4
 80009e4:	40010c00 	.word	0x40010c00
 80009e8:	080037c4 	.word	0x080037c4
 80009ec:	080037d4 	.word	0x080037d4
 80009f0:	080037e0 	.word	0x080037e0
 80009f4:	20000099 	.word	0x20000099
 80009f8:	20000098 	.word	0x20000098
 80009fc:	40010800 	.word	0x40010800

	case cancel:{
		ledProcess(0);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2101      	movs	r1, #1
 8000a04:	4898      	ldr	r0, [pc, #608]	; (8000c68 <myTask_Run+0x550>)
 8000a06:	f001 f8ae 	bl	8001b66 <HAL_GPIO_WritePin>
		if((++delay > 80) && (i<6)){
 8000a0a:	4b98      	ldr	r3, [pc, #608]	; (8000c6c <myTask_Run+0x554>)
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	3301      	adds	r3, #1
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	4a95      	ldr	r2, [pc, #596]	; (8000c6c <myTask_Run+0x554>)
 8000a16:	4619      	mov	r1, r3
 8000a18:	8011      	strh	r1, [r2, #0]
 8000a1a:	2b50      	cmp	r3, #80	; 0x50
 8000a1c:	d92f      	bls.n	8000a7e <myTask_Run+0x366>
 8000a1e:	4b94      	ldr	r3, [pc, #592]	; (8000c70 <myTask_Run+0x558>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	2b05      	cmp	r3, #5
 8000a26:	d82a      	bhi.n	8000a7e <myTask_Run+0x366>
			delay=0;
 8000a28:	4b90      	ldr	r3, [pc, #576]	; (8000c6c <myTask_Run+0x554>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	801a      	strh	r2, [r3, #0]
			toggle=!(toggle);
 8000a2e:	4b91      	ldr	r3, [pc, #580]	; (8000c74 <myTask_Run+0x55c>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	bf14      	ite	ne
 8000a36:	2301      	movne	r3, #1
 8000a38:	2300      	moveq	r3, #0
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	f083 0301 	eor.w	r3, r3, #1
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	4b8a      	ldr	r3, [pc, #552]	; (8000c74 <myTask_Run+0x55c>)
 8000a4a:	701a      	strb	r2, [r3, #0]
			buzzer(toggle);
 8000a4c:	4b89      	ldr	r3, [pc, #548]	; (8000c74 <myTask_Run+0x55c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a56:	4888      	ldr	r0, [pc, #544]	; (8000c78 <myTask_Run+0x560>)
 8000a58:	f001 f885 	bl	8001b66 <HAL_GPIO_WritePin>
			ledCancel(toggle);
 8000a5c:	4b85      	ldr	r3, [pc, #532]	; (8000c74 <myTask_Run+0x55c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	f083 0301 	eor.w	r3, r3, #1
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	461a      	mov	r2, r3
 8000a68:	2102      	movs	r1, #2
 8000a6a:	487f      	ldr	r0, [pc, #508]	; (8000c68 <myTask_Run+0x550>)
 8000a6c:	f001 f87b 	bl	8001b66 <HAL_GPIO_WritePin>
			i++;
 8000a70:	4b7f      	ldr	r3, [pc, #508]	; (8000c70 <myTask_Run+0x558>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	3301      	adds	r3, #1
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4b7d      	ldr	r3, [pc, #500]	; (8000c70 <myTask_Run+0x558>)
 8000a7c:	701a      	strb	r2, [r3, #0]
		}

		if(++delay1 > 500){
 8000a7e:	4b7f      	ldr	r3, [pc, #508]	; (8000c7c <myTask_Run+0x564>)
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	3301      	adds	r3, #1
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	4a7c      	ldr	r2, [pc, #496]	; (8000c7c <myTask_Run+0x564>)
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	8011      	strh	r1, [r2, #0]
 8000a8e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a92:	f240 80de 	bls.w	8000c52 <myTask_Run+0x53a>
			i=0;
 8000a96:	4b76      	ldr	r3, [pc, #472]	; (8000c70 <myTask_Run+0x558>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
			delay1=0;
 8000a9c:	4b77      	ldr	r3, [pc, #476]	; (8000c7c <myTask_Run+0x564>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	801a      	strh	r2, [r3, #0]
			myLCD_clear();
 8000aa2:	f7ff fe0d 	bl	80006c0 <myLCD_clear>
			myLCD_setCursor(0, 0); myLCD_print("Money Returned !");
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f7ff fdbd 	bl	8000628 <myLCD_setCursor>
 8000aae:	4874      	ldr	r0, [pc, #464]	; (8000c80 <myTask_Run+0x568>)
 8000ab0:	f7ff fdd8 	bl	8000664 <myLCD_print>
			if(saldo==0){
 8000ab4:	4b73      	ldr	r3, [pc, #460]	; (8000c84 <myTask_Run+0x56c>)
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d107      	bne.n	8000ace <myTask_Run+0x3b6>
				myLCD_setCursor(0, 1); myLCD_print("Rp.500");
 8000abe:	2101      	movs	r1, #1
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f7ff fdb1 	bl	8000628 <myLCD_setCursor>
 8000ac6:	4870      	ldr	r0, [pc, #448]	; (8000c88 <myTask_Run+0x570>)
 8000ac8:	f7ff fdcc 	bl	8000664 <myLCD_print>
 8000acc:	e006      	b.n	8000adc <myTask_Run+0x3c4>
			}
			else {
				myLCD_setCursor(0, 1); myLCD_print("Rp.1000");
 8000ace:	2101      	movs	r1, #1
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f7ff fda9 	bl	8000628 <myLCD_setCursor>
 8000ad6:	486d      	ldr	r0, [pc, #436]	; (8000c8c <myTask_Run+0x574>)
 8000ad8:	f7ff fdc4 	bl	8000664 <myLCD_print>
			}
			myState=out1000;
 8000adc:	4b6c      	ldr	r3, [pc, #432]	; (8000c90 <myTask_Run+0x578>)
 8000ade:	220a      	movs	r2, #10
 8000ae0:	701a      	strb	r2, [r3, #0]
		}
	}break;
 8000ae2:	e0b6      	b.n	8000c52 <myTask_Run+0x53a>

	case in500:{
		buzzer(1);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aea:	4863      	ldr	r0, [pc, #396]	; (8000c78 <myTask_Run+0x560>)
 8000aec:	f001 f83b 	bl	8001b66 <HAL_GPIO_WritePin>
		if(++delay1 > 500){
 8000af0:	4b62      	ldr	r3, [pc, #392]	; (8000c7c <myTask_Run+0x564>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	3301      	adds	r3, #1
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	4a60      	ldr	r2, [pc, #384]	; (8000c7c <myTask_Run+0x564>)
 8000afc:	4619      	mov	r1, r3
 8000afe:	8011      	strh	r1, [r2, #0]
 8000b00:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b04:	f240 80a7 	bls.w	8000c56 <myTask_Run+0x53e>
			delay1=0;
 8000b08:	4b5c      	ldr	r3, [pc, #368]	; (8000c7c <myTask_Run+0x564>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	801a      	strh	r2, [r3, #0]
			buzzer(0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b14:	4858      	ldr	r0, [pc, #352]	; (8000c78 <myTask_Run+0x560>)
 8000b16:	f001 f826 	bl	8001b66 <HAL_GPIO_WritePin>
			myLCD_clear();
 8000b1a:	f7ff fdd1 	bl	80006c0 <myLCD_clear>
			saldo+=500;
 8000b1e:	4b59      	ldr	r3, [pc, #356]	; (8000c84 <myTask_Run+0x56c>)
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	4b56      	ldr	r3, [pc, #344]	; (8000c84 <myTask_Run+0x56c>)
 8000b2c:	801a      	strh	r2, [r3, #0]
			if(saldo<1000){
 8000b2e:	4b55      	ldr	r3, [pc, #340]	; (8000c84 <myTask_Run+0x56c>)
 8000b30:	881b      	ldrh	r3, [r3, #0]
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b38:	d206      	bcs.n	8000b48 <myTask_Run+0x430>
				myLCD_setCursor(0, 0); myLCD_print("Insert Coin !");
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f7ff fd73 	bl	8000628 <myLCD_setCursor>
 8000b42:	4854      	ldr	r0, [pc, #336]	; (8000c94 <myTask_Run+0x57c>)
 8000b44:	f7ff fd8e 	bl	8000664 <myLCD_print>
			}
			myLCD_setCursor(0, 1); myLCD_print("Saldo: Rp."); myLCD_printNum(saldo);
 8000b48:	2101      	movs	r1, #1
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f7ff fd6c 	bl	8000628 <myLCD_setCursor>
 8000b50:	4851      	ldr	r0, [pc, #324]	; (8000c98 <myTask_Run+0x580>)
 8000b52:	f7ff fd87 	bl	8000664 <myLCD_print>
 8000b56:	4b4b      	ldr	r3, [pc, #300]	; (8000c84 <myTask_Run+0x56c>)
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	b21b      	sxth	r3, r3
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fd96 	bl	8000690 <myLCD_printNum>
			myState=checkCoin;
 8000b64:	4b4a      	ldr	r3, [pc, #296]	; (8000c90 <myTask_Run+0x578>)
 8000b66:	2204      	movs	r2, #4
 8000b68:	701a      	strb	r2, [r3, #0]
		}
	}break;
 8000b6a:	e074      	b.n	8000c56 <myTask_Run+0x53e>

	case in1000:{
		buzzer(1);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b72:	4841      	ldr	r0, [pc, #260]	; (8000c78 <myTask_Run+0x560>)
 8000b74:	f000 fff7 	bl	8001b66 <HAL_GPIO_WritePin>
		if(++delay1 > 500){
 8000b78:	4b40      	ldr	r3, [pc, #256]	; (8000c7c <myTask_Run+0x564>)
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	3301      	adds	r3, #1
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	4a3e      	ldr	r2, [pc, #248]	; (8000c7c <myTask_Run+0x564>)
 8000b84:	4619      	mov	r1, r3
 8000b86:	8011      	strh	r1, [r2, #0]
 8000b88:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b8c:	d965      	bls.n	8000c5a <myTask_Run+0x542>
			delay1=0;
 8000b8e:	4b3b      	ldr	r3, [pc, #236]	; (8000c7c <myTask_Run+0x564>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	801a      	strh	r2, [r3, #0]
			buzzer(0);
 8000b94:	2200      	movs	r2, #0
 8000b96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b9a:	4837      	ldr	r0, [pc, #220]	; (8000c78 <myTask_Run+0x560>)
 8000b9c:	f000 ffe3 	bl	8001b66 <HAL_GPIO_WritePin>
			myLCD_clear();
 8000ba0:	f7ff fd8e 	bl	80006c0 <myLCD_clear>
			saldo+=1000;
 8000ba4:	4b37      	ldr	r3, [pc, #220]	; (8000c84 <myTask_Run+0x56c>)
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	4b34      	ldr	r3, [pc, #208]	; (8000c84 <myTask_Run+0x56c>)
 8000bb2:	801a      	strh	r2, [r3, #0]
			myState=checkCoin;
 8000bb4:	4b36      	ldr	r3, [pc, #216]	; (8000c90 <myTask_Run+0x578>)
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	701a      	strb	r2, [r3, #0]
		}
	}break;
 8000bba:	e04e      	b.n	8000c5a <myTask_Run+0x542>

	case out500:{
		ledBack(1);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bc2:	4829      	ldr	r0, [pc, #164]	; (8000c68 <myTask_Run+0x550>)
 8000bc4:	f000 ffcf 	bl	8001b66 <HAL_GPIO_WritePin>
		if(++delay1 > 1000){
 8000bc8:	4b2c      	ldr	r3, [pc, #176]	; (8000c7c <myTask_Run+0x564>)
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	3301      	adds	r3, #1
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	4a2a      	ldr	r2, [pc, #168]	; (8000c7c <myTask_Run+0x564>)
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	8011      	strh	r1, [r2, #0]
 8000bd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bdc:	d93f      	bls.n	8000c5e <myTask_Run+0x546>
			delay1=0;
 8000bde:	4b27      	ldr	r3, [pc, #156]	; (8000c7c <myTask_Run+0x564>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	801a      	strh	r2, [r3, #0]
			ledBack(0);
 8000be4:	2201      	movs	r2, #1
 8000be6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bea:	481f      	ldr	r0, [pc, #124]	; (8000c68 <myTask_Run+0x550>)
 8000bec:	f000 ffbb 	bl	8001b66 <HAL_GPIO_WritePin>
			myLCD_clear();
 8000bf0:	f7ff fd66 	bl	80006c0 <myLCD_clear>
			myState=checkCoin;
 8000bf4:	4b26      	ldr	r3, [pc, #152]	; (8000c90 <myTask_Run+0x578>)
 8000bf6:	2204      	movs	r2, #4
 8000bf8:	701a      	strb	r2, [r3, #0]
		}
	}break;
 8000bfa:	e030      	b.n	8000c5e <myTask_Run+0x546>

	case out1000:{
		saldo=0;
 8000bfc:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <myTask_Run+0x56c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	801a      	strh	r2, [r3, #0]
		ledBack(1);
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c08:	4817      	ldr	r0, [pc, #92]	; (8000c68 <myTask_Run+0x550>)
 8000c0a:	f000 ffac 	bl	8001b66 <HAL_GPIO_WritePin>
		if(++delay1 > 1000){
 8000c0e:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <myTask_Run+0x564>)
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	3301      	adds	r3, #1
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	4a18      	ldr	r2, [pc, #96]	; (8000c7c <myTask_Run+0x564>)
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	8011      	strh	r1, [r2, #0]
 8000c1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c22:	d91e      	bls.n	8000c62 <myTask_Run+0x54a>
			delay1=0;
 8000c24:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <myTask_Run+0x564>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	801a      	strh	r2, [r3, #0]
			ledBack(0);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c30:	480d      	ldr	r0, [pc, #52]	; (8000c68 <myTask_Run+0x550>)
 8000c32:	f000 ff98 	bl	8001b66 <HAL_GPIO_WritePin>
			myLCD_clear();
 8000c36:	f7ff fd43 	bl	80006c0 <myLCD_clear>
			myState=start;
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <myTask_Run+0x578>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
		}
	}break;
 8000c40:	e00f      	b.n	8000c62 <myTask_Run+0x54a>
	}break;
 8000c42:	bf00      	nop
 8000c44:	e00e      	b.n	8000c64 <myTask_Run+0x54c>
	}break;
 8000c46:	bf00      	nop
 8000c48:	e00c      	b.n	8000c64 <myTask_Run+0x54c>
	}break;
 8000c4a:	bf00      	nop
 8000c4c:	e00a      	b.n	8000c64 <myTask_Run+0x54c>
	}break;
 8000c4e:	bf00      	nop
 8000c50:	e008      	b.n	8000c64 <myTask_Run+0x54c>
	}break;
 8000c52:	bf00      	nop
 8000c54:	e006      	b.n	8000c64 <myTask_Run+0x54c>
	}break;
 8000c56:	bf00      	nop
 8000c58:	e004      	b.n	8000c64 <myTask_Run+0x54c>
	}break;
 8000c5a:	bf00      	nop
 8000c5c:	e002      	b.n	8000c64 <myTask_Run+0x54c>
	}break;
 8000c5e:	bf00      	nop
 8000c60:	e000      	b.n	8000c64 <myTask_Run+0x54c>
	}break;
 8000c62:	bf00      	nop

	}

}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40010c00 	.word	0x40010c00
 8000c6c:	2000015a 	.word	0x2000015a
 8000c70:	20000098 	.word	0x20000098
 8000c74:	20000099 	.word	0x20000099
 8000c78:	40010800 	.word	0x40010800
 8000c7c:	20000094 	.word	0x20000094
 8000c80:	08003798 	.word	0x08003798
 8000c84:	20000096 	.word	0x20000096
 8000c88:	080037ac 	.word	0x080037ac
 8000c8c:	080037ec 	.word	0x080037ec
 8000c90:	20000158 	.word	0x20000158
 8000c94:	0800375c 	.word	0x0800375c
 8000c98:	080037f4 	.word	0x080037f4

08000c9c <PB_Process>:

/* ---------------------------------------------------------------------------------------- */
_Bool PB_Process(void){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
	_Bool flagDetect=0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(PB_PROCESS_GPIO_Port, PB_PROCESS_Pin)==0)
 8000ca6:	2110      	movs	r1, #16
 8000ca8:	4812      	ldr	r0, [pc, #72]	; (8000cf4 <PB_Process+0x58>)
 8000caa:	f000 ff45 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d107      	bne.n	8000cc4 <PB_Process+0x28>
		debounce1 = debounce1<<1;
 8000cb4:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <PB_Process+0x5c>)
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <PB_Process+0x5c>)
 8000cc0:	801a      	strh	r2, [r3, #0]
 8000cc2:	e00a      	b.n	8000cda <PB_Process+0x3e>
	else
		debounce1 = (debounce1<<1)|1;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <PB_Process+0x5c>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	b21b      	sxth	r3, r3
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	b21b      	sxth	r3, r3
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <PB_Process+0x5c>)
 8000cd8:	801a      	strh	r2, [r3, #0]
	if(debounce1==3)
 8000cda:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <PB_Process+0x5c>)
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	2b03      	cmp	r3, #3
 8000ce2:	d101      	bne.n	8000ce8 <PB_Process+0x4c>
		flagDetect=1;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	71fb      	strb	r3, [r7, #7]
	return flagDetect;
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40010800 	.word	0x40010800
 8000cf8:	20000000 	.word	0x20000000

08000cfc <PB_Cancel>:

_Bool PB_Cancel(void){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
	_Bool flagDetect=0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(PB_CANCEL_GPIO_Port, PB_CANCEL_Pin)==0)
 8000d06:	2120      	movs	r1, #32
 8000d08:	4812      	ldr	r0, [pc, #72]	; (8000d54 <PB_Cancel+0x58>)
 8000d0a:	f000 ff15 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d107      	bne.n	8000d24 <PB_Cancel+0x28>
		debounce2 = debounce2<<1;
 8000d14:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <PB_Cancel+0x5c>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <PB_Cancel+0x5c>)
 8000d20:	801a      	strh	r2, [r3, #0]
 8000d22:	e00a      	b.n	8000d3a <PB_Cancel+0x3e>
	else
		debounce2 = (debounce2<<1)|1;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <PB_Cancel+0x5c>)
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	b21b      	sxth	r3, r3
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	b21b      	sxth	r3, r3
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <PB_Cancel+0x5c>)
 8000d38:	801a      	strh	r2, [r3, #0]
	if(debounce2==3)
 8000d3a:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <PB_Cancel+0x5c>)
 8000d3c:	881b      	ldrh	r3, [r3, #0]
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	2b03      	cmp	r3, #3
 8000d42:	d101      	bne.n	8000d48 <PB_Cancel+0x4c>
		flagDetect=1;
 8000d44:	2301      	movs	r3, #1
 8000d46:	71fb      	strb	r3, [r7, #7]
	return flagDetect;
 8000d48:	79fb      	ldrb	r3, [r7, #7]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40010800 	.word	0x40010800
 8000d58:	20000002 	.word	0x20000002

08000d5c <PB_u500>:

_Bool PB_u500(void){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
	_Bool flagDetect=0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(u500_GPIO_Port, u500_Pin)==0)
 8000d66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d6a:	4812      	ldr	r0, [pc, #72]	; (8000db4 <PB_u500+0x58>)
 8000d6c:	f000 fee4 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d107      	bne.n	8000d86 <PB_u500+0x2a>
		debounce3 = debounce3<<1;
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <PB_u500+0x5c>)
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <PB_u500+0x5c>)
 8000d82:	801a      	strh	r2, [r3, #0]
 8000d84:	e00a      	b.n	8000d9c <PB_u500+0x40>
	else
		debounce3 = (debounce3<<1)|1;
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <PB_u500+0x5c>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	b21b      	sxth	r3, r3
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	b21b      	sxth	r3, r3
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <PB_u500+0x5c>)
 8000d9a:	801a      	strh	r2, [r3, #0]
	if(debounce3==3)
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <PB_u500+0x5c>)
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	2b03      	cmp	r3, #3
 8000da4:	d101      	bne.n	8000daa <PB_u500+0x4e>
		flagDetect=1;
 8000da6:	2301      	movs	r3, #1
 8000da8:	71fb      	strb	r3, [r7, #7]
	return flagDetect;
 8000daa:	79fb      	ldrb	r3, [r7, #7]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40011000 	.word	0x40011000
 8000db8:	20000004 	.word	0x20000004

08000dbc <PB_u1000>:

_Bool PB_u1000(void){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
	_Bool flagDetect=0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(u1000_GPIO_Port, u1000_Pin)==0)
 8000dc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dca:	4812      	ldr	r0, [pc, #72]	; (8000e14 <PB_u1000+0x58>)
 8000dcc:	f000 feb4 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d107      	bne.n	8000de6 <PB_u1000+0x2a>
		debounce4 = debounce4<<1;
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <PB_u1000+0x5c>)
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <PB_u1000+0x5c>)
 8000de2:	801a      	strh	r2, [r3, #0]
 8000de4:	e00a      	b.n	8000dfc <PB_u1000+0x40>
	else
		debounce4 = (debounce4<<1)|1;
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <PB_u1000+0x5c>)
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	b21b      	sxth	r3, r3
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	b21b      	sxth	r3, r3
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <PB_u1000+0x5c>)
 8000dfa:	801a      	strh	r2, [r3, #0]
	if(debounce4==3)
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <PB_u1000+0x5c>)
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	2b03      	cmp	r3, #3
 8000e04:	d101      	bne.n	8000e0a <PB_u1000+0x4e>
		flagDetect=1;
 8000e06:	2301      	movs	r3, #1
 8000e08:	71fb      	strb	r3, [r7, #7]
	return flagDetect;
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40011000 	.word	0x40011000
 8000e18:	20000006 	.word	0x20000006

08000e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <HAL_MspInit+0x5c>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	4a14      	ldr	r2, [pc, #80]	; (8000e78 <HAL_MspInit+0x5c>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6193      	str	r3, [r2, #24]
 8000e2e:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_MspInit+0x5c>)
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <HAL_MspInit+0x5c>)
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	4a0e      	ldr	r2, [pc, #56]	; (8000e78 <HAL_MspInit+0x5c>)
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e44:	61d3      	str	r3, [r2, #28]
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <HAL_MspInit+0x5c>)
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <HAL_MspInit+0x60>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <HAL_MspInit+0x60>)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40010000 	.word	0x40010000

08000e80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0310 	add.w	r3, r7, #16
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a14      	ldr	r2, [pc, #80]	; (8000eec <HAL_ADC_MspInit+0x6c>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d121      	bne.n	8000ee4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <HAL_ADC_MspInit+0x70>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <HAL_ADC_MspInit+0x70>)
 8000ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eaa:	6193      	str	r3, [r2, #24]
 8000eac:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <HAL_ADC_MspInit+0x70>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <HAL_ADC_MspInit+0x70>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	4a0c      	ldr	r2, [pc, #48]	; (8000ef0 <HAL_ADC_MspInit+0x70>)
 8000ebe:	f043 0304 	orr.w	r3, r3, #4
 8000ec2:	6193      	str	r3, [r2, #24]
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <HAL_ADC_MspInit+0x70>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	f003 0304 	and.w	r3, r3, #4
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	4619      	mov	r1, r3
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <HAL_ADC_MspInit+0x74>)
 8000ee0:	f000 fcd0 	bl	8001884 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ee4:	bf00      	nop
 8000ee6:	3720      	adds	r7, #32
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40012400 	.word	0x40012400
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	40010800 	.word	0x40010800

08000ef8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f08:	d113      	bne.n	8000f32 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <HAL_TIM_Base_MspInit+0x44>)
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	4a0b      	ldr	r2, [pc, #44]	; (8000f3c <HAL_TIM_Base_MspInit+0x44>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	61d3      	str	r3, [r2, #28]
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <HAL_TIM_Base_MspInit+0x44>)
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2100      	movs	r1, #0
 8000f26:	201c      	movs	r0, #28
 8000f28:	f000 fc75 	bl	8001816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f2c:	201c      	movs	r0, #28
 8000f2e:	f000 fc8e 	bl	800184e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40021000 	.word	0x40021000

08000f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a1b      	ldr	r2, [pc, #108]	; (8000fc8 <HAL_UART_MspInit+0x88>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d12f      	bne.n	8000fc0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f60:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <HAL_UART_MspInit+0x8c>)
 8000f62:	69db      	ldr	r3, [r3, #28]
 8000f64:	4a19      	ldr	r2, [pc, #100]	; (8000fcc <HAL_UART_MspInit+0x8c>)
 8000f66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6a:	61d3      	str	r3, [r2, #28]
 8000f6c:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <HAL_UART_MspInit+0x8c>)
 8000f6e:	69db      	ldr	r3, [r3, #28]
 8000f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <HAL_UART_MspInit+0x8c>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	4a13      	ldr	r2, [pc, #76]	; (8000fcc <HAL_UART_MspInit+0x8c>)
 8000f7e:	f043 0304 	orr.w	r3, r3, #4
 8000f82:	6193      	str	r3, [r2, #24]
 8000f84:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <HAL_UART_MspInit+0x8c>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f90:	2304      	movs	r3, #4
 8000f92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9c:	f107 0310 	add.w	r3, r7, #16
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	480b      	ldr	r0, [pc, #44]	; (8000fd0 <HAL_UART_MspInit+0x90>)
 8000fa4:	f000 fc6e 	bl	8001884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fa8:	2308      	movs	r3, #8
 8000faa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb4:	f107 0310 	add.w	r3, r7, #16
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <HAL_UART_MspInit+0x90>)
 8000fbc:	f000 fc62 	bl	8001884 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fc0:	bf00      	nop
 8000fc2:	3720      	adds	r7, #32
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40004400 	.word	0x40004400
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	40010800 	.word	0x40010800

08000fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <HardFault_Handler+0x4>

08000fe6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <MemManage_Handler+0x4>

08000fec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <BusFault_Handler+0x4>

08000ff2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <UsageFault_Handler+0x4>

08000ff8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001020:	f000 f8da 	bl	80011d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800102c:	4803      	ldr	r0, [pc, #12]	; (800103c <TIM2_IRQHandler+0x14>)
 800102e:	f001 fad3 	bl	80025d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  myTask_Run();
 8001032:	f7ff fb71 	bl	8000718 <myTask_Run>

  /* USER CODE END TIM2_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200000d8 	.word	0x200000d8

08001040 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <_sbrk+0x50>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d102      	bne.n	8001056 <_sbrk+0x16>
		heap_end = &end;
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <_sbrk+0x50>)
 8001052:	4a10      	ldr	r2, [pc, #64]	; (8001094 <_sbrk+0x54>)
 8001054:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <_sbrk+0x50>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <_sbrk+0x50>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4413      	add	r3, r2
 8001064:	466a      	mov	r2, sp
 8001066:	4293      	cmp	r3, r2
 8001068:	d907      	bls.n	800107a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800106a:	f001 ff17 	bl	8002e9c <__errno>
 800106e:	4602      	mov	r2, r0
 8001070:	230c      	movs	r3, #12
 8001072:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001074:	f04f 33ff 	mov.w	r3, #4294967295
 8001078:	e006      	b.n	8001088 <_sbrk+0x48>
	}

	heap_end += incr;
 800107a:	4b05      	ldr	r3, [pc, #20]	; (8001090 <_sbrk+0x50>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	4a03      	ldr	r2, [pc, #12]	; (8001090 <_sbrk+0x50>)
 8001084:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001086:	68fb      	ldr	r3, [r7, #12]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000009c 	.word	0x2000009c
 8001094:	20000168 	.word	0x20000168

08001098 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800109c:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <SystemInit+0x5c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a14      	ldr	r2, [pc, #80]	; (80010f4 <SystemInit+0x5c>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <SystemInit+0x5c>)
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	4911      	ldr	r1, [pc, #68]	; (80010f4 <SystemInit+0x5c>)
 80010ae:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <SystemInit+0x60>)
 80010b0:	4013      	ands	r3, r2
 80010b2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <SystemInit+0x5c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <SystemInit+0x5c>)
 80010ba:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80010be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010c2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <SystemInit+0x5c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <SystemInit+0x5c>)
 80010ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ce:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <SystemInit+0x5c>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <SystemInit+0x5c>)
 80010d6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80010da:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <SystemInit+0x5c>)
 80010de:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80010e2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <SystemInit+0x64>)
 80010e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010ea:	609a      	str	r2, [r3, #8]
#endif 
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr
 80010f4:	40021000 	.word	0x40021000
 80010f8:	f8ff0000 	.word	0xf8ff0000
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001100:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001102:	e003      	b.n	800110c <LoopCopyDataInit>

08001104 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001106:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001108:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800110a:	3104      	adds	r1, #4

0800110c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800110c:	480a      	ldr	r0, [pc, #40]	; (8001138 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001110:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001112:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001114:	d3f6      	bcc.n	8001104 <CopyDataInit>
  ldr r2, =_sbss
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001118:	e002      	b.n	8001120 <LoopFillZerobss>

0800111a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800111c:	f842 3b04 	str.w	r3, [r2], #4

08001120 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001122:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001124:	d3f9      	bcc.n	800111a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001126:	f7ff ffb7 	bl	8001098 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800112a:	f001 febd 	bl	8002ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800112e:	f7ff f80d 	bl	800014c <main>
  bx lr
 8001132:	4770      	bx	lr
  ldr r3, =_sidata
 8001134:	08003868 	.word	0x08003868
  ldr r0, =_sdata
 8001138:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800113c:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8001140:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8001144:	20000164 	.word	0x20000164

08001148 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001148:	e7fe      	b.n	8001148 <ADC1_2_IRQHandler>
	...

0800114c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <HAL_Init+0x28>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a07      	ldr	r2, [pc, #28]	; (8001174 <HAL_Init+0x28>)
 8001156:	f043 0310 	orr.w	r3, r3, #16
 800115a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115c:	2003      	movs	r0, #3
 800115e:	f000 fb4f 	bl	8001800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001162:	2000      	movs	r0, #0
 8001164:	f000 f808 	bl	8001178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001168:	f7ff fe58 	bl	8000e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40022000 	.word	0x40022000

08001178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_InitTick+0x54>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_InitTick+0x58>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4619      	mov	r1, r3
 800118a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001192:	fbb2 f3f3 	udiv	r3, r2, r3
 8001196:	4618      	mov	r0, r3
 8001198:	f000 fb67 	bl	800186a <HAL_SYSTICK_Config>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00e      	b.n	80011c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b0f      	cmp	r3, #15
 80011aa:	d80a      	bhi.n	80011c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ac:	2200      	movs	r2, #0
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	f000 fb2f 	bl	8001816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b8:	4a06      	ldr	r2, [pc, #24]	; (80011d4 <HAL_InitTick+0x5c>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	e000      	b.n	80011c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000008 	.word	0x20000008
 80011d0:	20000010 	.word	0x20000010
 80011d4:	2000000c 	.word	0x2000000c

080011d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <HAL_IncTick+0x1c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <HAL_IncTick+0x20>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	4a03      	ldr	r2, [pc, #12]	; (80011f8 <HAL_IncTick+0x20>)
 80011ea:	6013      	str	r3, [r2, #0]
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	20000010 	.word	0x20000010
 80011f8:	2000015c 	.word	0x2000015c

080011fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001200:	4b02      	ldr	r3, [pc, #8]	; (800120c <HAL_GetTick+0x10>)
 8001202:	681b      	ldr	r3, [r3, #0]
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	2000015c 	.word	0x2000015c

08001210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001218:	f7ff fff0 	bl	80011fc <HAL_GetTick>
 800121c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001228:	d005      	beq.n	8001236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <HAL_Delay+0x40>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4413      	add	r3, r2
 8001234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001236:	bf00      	nop
 8001238:	f7ff ffe0 	bl	80011fc <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	429a      	cmp	r2, r3
 8001246:	d8f7      	bhi.n	8001238 <HAL_Delay+0x28>
  {
  }
}
 8001248:	bf00      	nop
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000010 	.word	0x20000010

08001254 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800125c:	2300      	movs	r3, #0
 800125e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001264:	2300      	movs	r3, #0
 8001266:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e0be      	b.n	80013f4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001280:	2b00      	cmp	r3, #0
 8001282:	d109      	bne.n	8001298 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff fdf4 	bl	8000e80 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 f9ab 	bl	80015f4 <ADC_ConversionStop_Disable>
 800129e:	4603      	mov	r3, r0
 80012a0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a6:	f003 0310 	and.w	r3, r3, #16
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f040 8099 	bne.w	80013e2 <HAL_ADC_Init+0x18e>
 80012b0:	7dfb      	ldrb	r3, [r7, #23]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f040 8095 	bne.w	80013e2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012c0:	f023 0302 	bic.w	r3, r3, #2
 80012c4:	f043 0202 	orr.w	r2, r3, #2
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012d4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	7b1b      	ldrb	r3, [r3, #12]
 80012da:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012dc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012ec:	d003      	beq.n	80012f6 <HAL_ADC_Init+0xa2>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d102      	bne.n	80012fc <HAL_ADC_Init+0xa8>
 80012f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012fa:	e000      	b.n	80012fe <HAL_ADC_Init+0xaa>
 80012fc:	2300      	movs	r3, #0
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	7d1b      	ldrb	r3, [r3, #20]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d119      	bne.n	8001340 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7b1b      	ldrb	r3, [r3, #12]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d109      	bne.n	8001328 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	3b01      	subs	r3, #1
 800131a:	035a      	lsls	r2, r3, #13
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	e00b      	b.n	8001340 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132c:	f043 0220 	orr.w	r2, r3, #32
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	f043 0201 	orr.w	r2, r3, #1
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	430a      	orrs	r2, r1
 8001352:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	4b28      	ldr	r3, [pc, #160]	; (80013fc <HAL_ADC_Init+0x1a8>)
 800135c:	4013      	ands	r3, r2
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	6812      	ldr	r2, [r2, #0]
 8001362:	68b9      	ldr	r1, [r7, #8]
 8001364:	430b      	orrs	r3, r1
 8001366:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001370:	d003      	beq.n	800137a <HAL_ADC_Init+0x126>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d104      	bne.n	8001384 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	3b01      	subs	r3, #1
 8001380:	051b      	lsls	r3, r3, #20
 8001382:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	430a      	orrs	r2, r1
 8001396:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <HAL_ADC_Init+0x1ac>)
 80013a0:	4013      	ands	r3, r2
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d10b      	bne.n	80013c0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b2:	f023 0303 	bic.w	r3, r3, #3
 80013b6:	f043 0201 	orr.w	r2, r3, #1
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013be:	e018      	b.n	80013f2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	f023 0312 	bic.w	r3, r3, #18
 80013c8:	f043 0210 	orr.w	r2, r3, #16
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d4:	f043 0201 	orr.w	r2, r3, #1
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013e0:	e007      	b.n	80013f2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e6:	f043 0210 	orr.w	r2, r3, #16
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	ffe1f7fd 	.word	0xffe1f7fd
 8001400:	ff1f0efe 	.word	0xff1f0efe

08001404 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800141c:	2b01      	cmp	r3, #1
 800141e:	d101      	bne.n	8001424 <HAL_ADC_ConfigChannel+0x20>
 8001420:	2302      	movs	r3, #2
 8001422:	e0dc      	b.n	80015de <HAL_ADC_ConfigChannel+0x1da>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b06      	cmp	r3, #6
 8001432:	d81c      	bhi.n	800146e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	4613      	mov	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	3b05      	subs	r3, #5
 8001446:	221f      	movs	r2, #31
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	4019      	ands	r1, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	6818      	ldr	r0, [r3, #0]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	4613      	mov	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	3b05      	subs	r3, #5
 8001460:	fa00 f203 	lsl.w	r2, r0, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	430a      	orrs	r2, r1
 800146a:	635a      	str	r2, [r3, #52]	; 0x34
 800146c:	e03c      	b.n	80014e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b0c      	cmp	r3, #12
 8001474:	d81c      	bhi.n	80014b0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	3b23      	subs	r3, #35	; 0x23
 8001488:	221f      	movs	r2, #31
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	4019      	ands	r1, r3
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	6818      	ldr	r0, [r3, #0]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	3b23      	subs	r3, #35	; 0x23
 80014a2:	fa00 f203 	lsl.w	r2, r0, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	631a      	str	r2, [r3, #48]	; 0x30
 80014ae:	e01b      	b.n	80014e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	3b41      	subs	r3, #65	; 0x41
 80014c2:	221f      	movs	r2, #31
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	4019      	ands	r1, r3
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	6818      	ldr	r0, [r3, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	3b41      	subs	r3, #65	; 0x41
 80014dc:	fa00 f203 	lsl.w	r2, r0, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b09      	cmp	r3, #9
 80014ee:	d91c      	bls.n	800152a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68d9      	ldr	r1, [r3, #12]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4613      	mov	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4413      	add	r3, r2
 8001500:	3b1e      	subs	r3, #30
 8001502:	2207      	movs	r2, #7
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	4019      	ands	r1, r3
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	6898      	ldr	r0, [r3, #8]
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4613      	mov	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	4413      	add	r3, r2
 800151a:	3b1e      	subs	r3, #30
 800151c:	fa00 f203 	lsl.w	r2, r0, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	e019      	b.n	800155e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6919      	ldr	r1, [r3, #16]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4613      	mov	r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4413      	add	r3, r2
 800153a:	2207      	movs	r2, #7
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	4019      	ands	r1, r3
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	6898      	ldr	r0, [r3, #8]
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4613      	mov	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	4413      	add	r3, r2
 8001552:	fa00 f203 	lsl.w	r2, r0, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b10      	cmp	r3, #16
 8001564:	d003      	beq.n	800156e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800156a:	2b11      	cmp	r3, #17
 800156c:	d132      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a1d      	ldr	r2, [pc, #116]	; (80015e8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d125      	bne.n	80015c4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d126      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001594:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b10      	cmp	r3, #16
 800159c:	d11a      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800159e:	4b13      	ldr	r3, [pc, #76]	; (80015ec <HAL_ADC_ConfigChannel+0x1e8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a13      	ldr	r2, [pc, #76]	; (80015f0 <HAL_ADC_ConfigChannel+0x1ec>)
 80015a4:	fba2 2303 	umull	r2, r3, r2, r3
 80015a8:	0c9a      	lsrs	r2, r3, #18
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015b4:	e002      	b.n	80015bc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	3b01      	subs	r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f9      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x1b2>
 80015c2:	e007      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c8:	f043 0220 	orr.w	r2, r3, #32
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	40012400 	.word	0x40012400
 80015ec:	20000008 	.word	0x20000008
 80015f0:	431bde83 	.word	0x431bde83

080015f4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b01      	cmp	r3, #1
 800160c:	d127      	bne.n	800165e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0201 	bic.w	r2, r2, #1
 800161c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800161e:	f7ff fded 	bl	80011fc <HAL_GetTick>
 8001622:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001624:	e014      	b.n	8001650 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001626:	f7ff fde9 	bl	80011fc <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d90d      	bls.n	8001650 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001638:	f043 0210 	orr.w	r2, r3, #16
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001644:	f043 0201 	orr.w	r2, r3, #1
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e007      	b.n	8001660 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b01      	cmp	r3, #1
 800165c:	d0e3      	beq.n	8001626 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001684:	4013      	ands	r3, r2
 8001686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169a:	4a04      	ldr	r2, [pc, #16]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	60d3      	str	r3, [r2, #12]
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <__NVIC_GetPriorityGrouping+0x18>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	f003 0307 	and.w	r3, r3, #7
}
 80016be:	4618      	mov	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	db0b      	blt.n	80016f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	f003 021f 	and.w	r2, r3, #31
 80016e4:	4906      	ldr	r1, [pc, #24]	; (8001700 <__NVIC_EnableIRQ+0x34>)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	2001      	movs	r0, #1
 80016ee:	fa00 f202 	lsl.w	r2, r0, r2
 80016f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	e000e100 	.word	0xe000e100

08001704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001714:	2b00      	cmp	r3, #0
 8001716:	db0a      	blt.n	800172e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	b2da      	uxtb	r2, r3
 800171c:	490c      	ldr	r1, [pc, #48]	; (8001750 <__NVIC_SetPriority+0x4c>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	0112      	lsls	r2, r2, #4
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	440b      	add	r3, r1
 8001728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800172c:	e00a      	b.n	8001744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4908      	ldr	r1, [pc, #32]	; (8001754 <__NVIC_SetPriority+0x50>)
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	3b04      	subs	r3, #4
 800173c:	0112      	lsls	r2, r2, #4
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	440b      	add	r3, r1
 8001742:	761a      	strb	r2, [r3, #24]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000e100 	.word	0xe000e100
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001758:	b480      	push	{r7}
 800175a:	b089      	sub	sp, #36	; 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f1c3 0307 	rsb	r3, r3, #7
 8001772:	2b04      	cmp	r3, #4
 8001774:	bf28      	it	cs
 8001776:	2304      	movcs	r3, #4
 8001778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3304      	adds	r3, #4
 800177e:	2b06      	cmp	r3, #6
 8001780:	d902      	bls.n	8001788 <NVIC_EncodePriority+0x30>
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3b03      	subs	r3, #3
 8001786:	e000      	b.n	800178a <NVIC_EncodePriority+0x32>
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	f04f 32ff 	mov.w	r2, #4294967295
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43da      	mvns	r2, r3
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	401a      	ands	r2, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a0:	f04f 31ff 	mov.w	r1, #4294967295
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	43d9      	mvns	r1, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	4313      	orrs	r3, r2
         );
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3724      	adds	r7, #36	; 0x24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017cc:	d301      	bcc.n	80017d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ce:	2301      	movs	r3, #1
 80017d0:	e00f      	b.n	80017f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017d2:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <SysTick_Config+0x40>)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017da:	210f      	movs	r1, #15
 80017dc:	f04f 30ff 	mov.w	r0, #4294967295
 80017e0:	f7ff ff90 	bl	8001704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <SysTick_Config+0x40>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ea:	4b04      	ldr	r3, [pc, #16]	; (80017fc <SysTick_Config+0x40>)
 80017ec:	2207      	movs	r2, #7
 80017ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	e000e010 	.word	0xe000e010

08001800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff ff2d 	bl	8001668 <__NVIC_SetPriorityGrouping>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001816:	b580      	push	{r7, lr}
 8001818:	b086      	sub	sp, #24
 800181a:	af00      	add	r7, sp, #0
 800181c:	4603      	mov	r3, r0
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	607a      	str	r2, [r7, #4]
 8001822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001828:	f7ff ff42 	bl	80016b0 <__NVIC_GetPriorityGrouping>
 800182c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	68b9      	ldr	r1, [r7, #8]
 8001832:	6978      	ldr	r0, [r7, #20]
 8001834:	f7ff ff90 	bl	8001758 <NVIC_EncodePriority>
 8001838:	4602      	mov	r2, r0
 800183a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183e:	4611      	mov	r1, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff5f 	bl	8001704 <__NVIC_SetPriority>
}
 8001846:	bf00      	nop
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	4603      	mov	r3, r0
 8001856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff35 	bl	80016cc <__NVIC_EnableIRQ>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff ffa2 	bl	80017bc <SysTick_Config>
 8001878:	4603      	mov	r3, r0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001884:	b480      	push	{r7}
 8001886:	b08b      	sub	sp, #44	; 0x2c
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800188e:	2300      	movs	r3, #0
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001892:	2300      	movs	r3, #0
 8001894:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001896:	e127      	b.n	8001ae8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001898:	2201      	movs	r2, #1
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	69fa      	ldr	r2, [r7, #28]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	f040 8116 	bne.w	8001ae2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b12      	cmp	r3, #18
 80018bc:	d034      	beq.n	8001928 <HAL_GPIO_Init+0xa4>
 80018be:	2b12      	cmp	r3, #18
 80018c0:	d80d      	bhi.n	80018de <HAL_GPIO_Init+0x5a>
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d02b      	beq.n	800191e <HAL_GPIO_Init+0x9a>
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d804      	bhi.n	80018d4 <HAL_GPIO_Init+0x50>
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d031      	beq.n	8001932 <HAL_GPIO_Init+0xae>
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d01c      	beq.n	800190c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018d2:	e048      	b.n	8001966 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	d043      	beq.n	8001960 <HAL_GPIO_Init+0xdc>
 80018d8:	2b11      	cmp	r3, #17
 80018da:	d01b      	beq.n	8001914 <HAL_GPIO_Init+0x90>
          break;
 80018dc:	e043      	b.n	8001966 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018de:	4a89      	ldr	r2, [pc, #548]	; (8001b04 <HAL_GPIO_Init+0x280>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d026      	beq.n	8001932 <HAL_GPIO_Init+0xae>
 80018e4:	4a87      	ldr	r2, [pc, #540]	; (8001b04 <HAL_GPIO_Init+0x280>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d806      	bhi.n	80018f8 <HAL_GPIO_Init+0x74>
 80018ea:	4a87      	ldr	r2, [pc, #540]	; (8001b08 <HAL_GPIO_Init+0x284>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d020      	beq.n	8001932 <HAL_GPIO_Init+0xae>
 80018f0:	4a86      	ldr	r2, [pc, #536]	; (8001b0c <HAL_GPIO_Init+0x288>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d01d      	beq.n	8001932 <HAL_GPIO_Init+0xae>
          break;
 80018f6:	e036      	b.n	8001966 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018f8:	4a85      	ldr	r2, [pc, #532]	; (8001b10 <HAL_GPIO_Init+0x28c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d019      	beq.n	8001932 <HAL_GPIO_Init+0xae>
 80018fe:	4a85      	ldr	r2, [pc, #532]	; (8001b14 <HAL_GPIO_Init+0x290>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d016      	beq.n	8001932 <HAL_GPIO_Init+0xae>
 8001904:	4a84      	ldr	r2, [pc, #528]	; (8001b18 <HAL_GPIO_Init+0x294>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d013      	beq.n	8001932 <HAL_GPIO_Init+0xae>
          break;
 800190a:	e02c      	b.n	8001966 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	623b      	str	r3, [r7, #32]
          break;
 8001912:	e028      	b.n	8001966 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	3304      	adds	r3, #4
 800191a:	623b      	str	r3, [r7, #32]
          break;
 800191c:	e023      	b.n	8001966 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	3308      	adds	r3, #8
 8001924:	623b      	str	r3, [r7, #32]
          break;
 8001926:	e01e      	b.n	8001966 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	330c      	adds	r3, #12
 800192e:	623b      	str	r3, [r7, #32]
          break;
 8001930:	e019      	b.n	8001966 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d102      	bne.n	8001940 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800193a:	2304      	movs	r3, #4
 800193c:	623b      	str	r3, [r7, #32]
          break;
 800193e:	e012      	b.n	8001966 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d105      	bne.n	8001954 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001948:	2308      	movs	r3, #8
 800194a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	611a      	str	r2, [r3, #16]
          break;
 8001952:	e008      	b.n	8001966 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001954:	2308      	movs	r3, #8
 8001956:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	615a      	str	r2, [r3, #20]
          break;
 800195e:	e002      	b.n	8001966 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001960:	2300      	movs	r3, #0
 8001962:	623b      	str	r3, [r7, #32]
          break;
 8001964:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	2bff      	cmp	r3, #255	; 0xff
 800196a:	d801      	bhi.n	8001970 <HAL_GPIO_Init+0xec>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	e001      	b.n	8001974 <HAL_GPIO_Init+0xf0>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3304      	adds	r3, #4
 8001974:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	2bff      	cmp	r3, #255	; 0xff
 800197a:	d802      	bhi.n	8001982 <HAL_GPIO_Init+0xfe>
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	e002      	b.n	8001988 <HAL_GPIO_Init+0x104>
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	3b08      	subs	r3, #8
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	210f      	movs	r1, #15
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	401a      	ands	r2, r3
 800199a:	6a39      	ldr	r1, [r7, #32]
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	fa01 f303 	lsl.w	r3, r1, r3
 80019a2:	431a      	orrs	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 8096 	beq.w	8001ae2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019b6:	4b59      	ldr	r3, [pc, #356]	; (8001b1c <HAL_GPIO_Init+0x298>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	4a58      	ldr	r2, [pc, #352]	; (8001b1c <HAL_GPIO_Init+0x298>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6193      	str	r3, [r2, #24]
 80019c2:	4b56      	ldr	r3, [pc, #344]	; (8001b1c <HAL_GPIO_Init+0x298>)
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019ce:	4a54      	ldr	r2, [pc, #336]	; (8001b20 <HAL_GPIO_Init+0x29c>)
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	3302      	adds	r3, #2
 80019d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019da:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	220f      	movs	r2, #15
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	4013      	ands	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a4b      	ldr	r2, [pc, #300]	; (8001b24 <HAL_GPIO_Init+0x2a0>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d013      	beq.n	8001a22 <HAL_GPIO_Init+0x19e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4a      	ldr	r2, [pc, #296]	; (8001b28 <HAL_GPIO_Init+0x2a4>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d00d      	beq.n	8001a1e <HAL_GPIO_Init+0x19a>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a49      	ldr	r2, [pc, #292]	; (8001b2c <HAL_GPIO_Init+0x2a8>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d007      	beq.n	8001a1a <HAL_GPIO_Init+0x196>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a48      	ldr	r2, [pc, #288]	; (8001b30 <HAL_GPIO_Init+0x2ac>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d101      	bne.n	8001a16 <HAL_GPIO_Init+0x192>
 8001a12:	2303      	movs	r3, #3
 8001a14:	e006      	b.n	8001a24 <HAL_GPIO_Init+0x1a0>
 8001a16:	2304      	movs	r3, #4
 8001a18:	e004      	b.n	8001a24 <HAL_GPIO_Init+0x1a0>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e002      	b.n	8001a24 <HAL_GPIO_Init+0x1a0>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <HAL_GPIO_Init+0x1a0>
 8001a22:	2300      	movs	r3, #0
 8001a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a26:	f002 0203 	and.w	r2, r2, #3
 8001a2a:	0092      	lsls	r2, r2, #2
 8001a2c:	4093      	lsls	r3, r2
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a34:	493a      	ldr	r1, [pc, #232]	; (8001b20 <HAL_GPIO_Init+0x29c>)
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	089b      	lsrs	r3, r3, #2
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d006      	beq.n	8001a5c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a4e:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	4938      	ldr	r1, [pc, #224]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	600b      	str	r3, [r1, #0]
 8001a5a:	e006      	b.n	8001a6a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a5c:	4b35      	ldr	r3, [pc, #212]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	43db      	mvns	r3, r3
 8001a64:	4933      	ldr	r1, [pc, #204]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d006      	beq.n	8001a84 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a76:	4b2f      	ldr	r3, [pc, #188]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	492e      	ldr	r1, [pc, #184]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	604b      	str	r3, [r1, #4]
 8001a82:	e006      	b.n	8001a92 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a84:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	4929      	ldr	r1, [pc, #164]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d006      	beq.n	8001aac <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a9e:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	4924      	ldr	r1, [pc, #144]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	608b      	str	r3, [r1, #8]
 8001aaa:	e006      	b.n	8001aba <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aac:	4b21      	ldr	r3, [pc, #132]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	491f      	ldr	r1, [pc, #124]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d006      	beq.n	8001ad4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ac6:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	491a      	ldr	r1, [pc, #104]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	60cb      	str	r3, [r1, #12]
 8001ad2:	e006      	b.n	8001ae2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ad4:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	4915      	ldr	r1, [pc, #84]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	fa22 f303 	lsr.w	r3, r2, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f47f aed0 	bne.w	8001898 <HAL_GPIO_Init+0x14>
  }
}
 8001af8:	bf00      	nop
 8001afa:	372c      	adds	r7, #44	; 0x2c
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	10210000 	.word	0x10210000
 8001b08:	10110000 	.word	0x10110000
 8001b0c:	10120000 	.word	0x10120000
 8001b10:	10310000 	.word	0x10310000
 8001b14:	10320000 	.word	0x10320000
 8001b18:	10220000 	.word	0x10220000
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40010000 	.word	0x40010000
 8001b24:	40010800 	.word	0x40010800
 8001b28:	40010c00 	.word	0x40010c00
 8001b2c:	40011000 	.word	0x40011000
 8001b30:	40011400 	.word	0x40011400
 8001b34:	40010400 	.word	0x40010400

08001b38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	887b      	ldrh	r3, [r7, #2]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d002      	beq.n	8001b56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
 8001b54:	e001      	b.n	8001b5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr

08001b66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	807b      	strh	r3, [r7, #2]
 8001b72:	4613      	mov	r3, r2
 8001b74:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b76:	787b      	ldrb	r3, [r7, #1]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b7c:	887a      	ldrh	r2, [r7, #2]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b82:	e003      	b.n	8001b8c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b84:	887b      	ldrh	r3, [r7, #2]
 8001b86:	041a      	lsls	r2, r3, #16
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	611a      	str	r2, [r3, #16]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
	...

08001b98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e26c      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 8087 	beq.w	8001cc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bb8:	4b92      	ldr	r3, [pc, #584]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 030c 	and.w	r3, r3, #12
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d00c      	beq.n	8001bde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bc4:	4b8f      	ldr	r3, [pc, #572]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d112      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x5e>
 8001bd0:	4b8c      	ldr	r3, [pc, #560]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bdc:	d10b      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bde:	4b89      	ldr	r3, [pc, #548]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d06c      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x12c>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d168      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e246      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bfe:	d106      	bne.n	8001c0e <HAL_RCC_OscConfig+0x76>
 8001c00:	4b80      	ldr	r3, [pc, #512]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a7f      	ldr	r2, [pc, #508]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	e02e      	b.n	8001c6c <HAL_RCC_OscConfig+0xd4>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10c      	bne.n	8001c30 <HAL_RCC_OscConfig+0x98>
 8001c16:	4b7b      	ldr	r3, [pc, #492]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a7a      	ldr	r2, [pc, #488]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	4b78      	ldr	r3, [pc, #480]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a77      	ldr	r2, [pc, #476]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	e01d      	b.n	8001c6c <HAL_RCC_OscConfig+0xd4>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c38:	d10c      	bne.n	8001c54 <HAL_RCC_OscConfig+0xbc>
 8001c3a:	4b72      	ldr	r3, [pc, #456]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a71      	ldr	r2, [pc, #452]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	4b6f      	ldr	r3, [pc, #444]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a6e      	ldr	r2, [pc, #440]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	e00b      	b.n	8001c6c <HAL_RCC_OscConfig+0xd4>
 8001c54:	4b6b      	ldr	r3, [pc, #428]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a6a      	ldr	r2, [pc, #424]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c5e:	6013      	str	r3, [r2, #0]
 8001c60:	4b68      	ldr	r3, [pc, #416]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a67      	ldr	r2, [pc, #412]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d013      	beq.n	8001c9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c74:	f7ff fac2 	bl	80011fc <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c7c:	f7ff fabe 	bl	80011fc <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b64      	cmp	r3, #100	; 0x64
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e1fa      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8e:	4b5d      	ldr	r3, [pc, #372]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0xe4>
 8001c9a:	e014      	b.n	8001cc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7ff faae 	bl	80011fc <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca4:	f7ff faaa 	bl	80011fc <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b64      	cmp	r3, #100	; 0x64
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e1e6      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb6:	4b53      	ldr	r3, [pc, #332]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x10c>
 8001cc2:	e000      	b.n	8001cc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d063      	beq.n	8001d9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cd2:	4b4c      	ldr	r3, [pc, #304]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00b      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cde:	4b49      	ldr	r3, [pc, #292]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d11c      	bne.n	8001d24 <HAL_RCC_OscConfig+0x18c>
 8001cea:	4b46      	ldr	r3, [pc, #280]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d116      	bne.n	8001d24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf6:	4b43      	ldr	r3, [pc, #268]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <HAL_RCC_OscConfig+0x176>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d001      	beq.n	8001d0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e1ba      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d0e:	4b3d      	ldr	r3, [pc, #244]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4939      	ldr	r1, [pc, #228]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d22:	e03a      	b.n	8001d9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d020      	beq.n	8001d6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d2c:	4b36      	ldr	r3, [pc, #216]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d32:	f7ff fa63 	bl	80011fc <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3a:	f7ff fa5f 	bl	80011fc <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e19b      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4c:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d58:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4927      	ldr	r1, [pc, #156]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	600b      	str	r3, [r1, #0]
 8001d6c:	e015      	b.n	8001d9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d6e:	4b26      	ldr	r3, [pc, #152]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d74:	f7ff fa42 	bl	80011fc <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7c:	f7ff fa3e 	bl	80011fc <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e17a      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8e:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f0      	bne.n	8001d7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d03a      	beq.n	8001e1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d019      	beq.n	8001de2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dae:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db4:	f7ff fa22 	bl	80011fc <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dbc:	f7ff fa1e 	bl	80011fc <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e15a      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dce:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f0      	beq.n	8001dbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f000 fada 	bl	8002394 <RCC_Delay>
 8001de0:	e01c      	b.n	8001e1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de2:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de8:	f7ff fa08 	bl	80011fc <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dee:	e00f      	b.n	8001e10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df0:	f7ff fa04 	bl	80011fc <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d908      	bls.n	8001e10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e140      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
 8001e08:	42420000 	.word	0x42420000
 8001e0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e10:	4b9e      	ldr	r3, [pc, #632]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1e9      	bne.n	8001df0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 80a6 	beq.w	8001f76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e2e:	4b97      	ldr	r3, [pc, #604]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10d      	bne.n	8001e56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3a:	4b94      	ldr	r3, [pc, #592]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	4a93      	ldr	r2, [pc, #588]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e44:	61d3      	str	r3, [r2, #28]
 8001e46:	4b91      	ldr	r3, [pc, #580]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e52:	2301      	movs	r3, #1
 8001e54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e56:	4b8e      	ldr	r3, [pc, #568]	; (8002090 <HAL_RCC_OscConfig+0x4f8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d118      	bne.n	8001e94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e62:	4b8b      	ldr	r3, [pc, #556]	; (8002090 <HAL_RCC_OscConfig+0x4f8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a8a      	ldr	r2, [pc, #552]	; (8002090 <HAL_RCC_OscConfig+0x4f8>)
 8001e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e6e:	f7ff f9c5 	bl	80011fc <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e76:	f7ff f9c1 	bl	80011fc <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b64      	cmp	r3, #100	; 0x64
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e0fd      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e88:	4b81      	ldr	r3, [pc, #516]	; (8002090 <HAL_RCC_OscConfig+0x4f8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d106      	bne.n	8001eaa <HAL_RCC_OscConfig+0x312>
 8001e9c:	4b7b      	ldr	r3, [pc, #492]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	4a7a      	ldr	r2, [pc, #488]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6213      	str	r3, [r2, #32]
 8001ea8:	e02d      	b.n	8001f06 <HAL_RCC_OscConfig+0x36e>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10c      	bne.n	8001ecc <HAL_RCC_OscConfig+0x334>
 8001eb2:	4b76      	ldr	r3, [pc, #472]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	4a75      	ldr	r2, [pc, #468]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	f023 0301 	bic.w	r3, r3, #1
 8001ebc:	6213      	str	r3, [r2, #32]
 8001ebe:	4b73      	ldr	r3, [pc, #460]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	4a72      	ldr	r2, [pc, #456]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001ec4:	f023 0304 	bic.w	r3, r3, #4
 8001ec8:	6213      	str	r3, [r2, #32]
 8001eca:	e01c      	b.n	8001f06 <HAL_RCC_OscConfig+0x36e>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	2b05      	cmp	r3, #5
 8001ed2:	d10c      	bne.n	8001eee <HAL_RCC_OscConfig+0x356>
 8001ed4:	4b6d      	ldr	r3, [pc, #436]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	4a6c      	ldr	r2, [pc, #432]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001eda:	f043 0304 	orr.w	r3, r3, #4
 8001ede:	6213      	str	r3, [r2, #32]
 8001ee0:	4b6a      	ldr	r3, [pc, #424]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4a69      	ldr	r2, [pc, #420]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6213      	str	r3, [r2, #32]
 8001eec:	e00b      	b.n	8001f06 <HAL_RCC_OscConfig+0x36e>
 8001eee:	4b67      	ldr	r3, [pc, #412]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	4a66      	ldr	r2, [pc, #408]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001ef4:	f023 0301 	bic.w	r3, r3, #1
 8001ef8:	6213      	str	r3, [r2, #32]
 8001efa:	4b64      	ldr	r3, [pc, #400]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	4a63      	ldr	r2, [pc, #396]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001f00:	f023 0304 	bic.w	r3, r3, #4
 8001f04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d015      	beq.n	8001f3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0e:	f7ff f975 	bl	80011fc <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f14:	e00a      	b.n	8001f2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f16:	f7ff f971 	bl	80011fc <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e0ab      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2c:	4b57      	ldr	r3, [pc, #348]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0ee      	beq.n	8001f16 <HAL_RCC_OscConfig+0x37e>
 8001f38:	e014      	b.n	8001f64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3a:	f7ff f95f 	bl	80011fc <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f40:	e00a      	b.n	8001f58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f42:	f7ff f95b 	bl	80011fc <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e095      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f58:	4b4c      	ldr	r3, [pc, #304]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1ee      	bne.n	8001f42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f64:	7dfb      	ldrb	r3, [r7, #23]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d105      	bne.n	8001f76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6a:	4b48      	ldr	r3, [pc, #288]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	4a47      	ldr	r2, [pc, #284]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 8081 	beq.w	8002082 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f80:	4b42      	ldr	r3, [pc, #264]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 030c 	and.w	r3, r3, #12
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d061      	beq.n	8002050 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d146      	bne.n	8002022 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f94:	4b3f      	ldr	r3, [pc, #252]	; (8002094 <HAL_RCC_OscConfig+0x4fc>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9a:	f7ff f92f 	bl	80011fc <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa2:	f7ff f92b 	bl	80011fc <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e067      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb4:	4b35      	ldr	r3, [pc, #212]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1f0      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc8:	d108      	bne.n	8001fdc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fca:	4b30      	ldr	r3, [pc, #192]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	492d      	ldr	r1, [pc, #180]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fdc:	4b2b      	ldr	r3, [pc, #172]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a19      	ldr	r1, [r3, #32]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	430b      	orrs	r3, r1
 8001fee:	4927      	ldr	r1, [pc, #156]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff4:	4b27      	ldr	r3, [pc, #156]	; (8002094 <HAL_RCC_OscConfig+0x4fc>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffa:	f7ff f8ff 	bl	80011fc <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002002:	f7ff f8fb 	bl	80011fc <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e037      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002014:	4b1d      	ldr	r3, [pc, #116]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0f0      	beq.n	8002002 <HAL_RCC_OscConfig+0x46a>
 8002020:	e02f      	b.n	8002082 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002022:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <HAL_RCC_OscConfig+0x4fc>)
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002028:	f7ff f8e8 	bl	80011fc <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002030:	f7ff f8e4 	bl	80011fc <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e020      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002042:	4b12      	ldr	r3, [pc, #72]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0x498>
 800204e:	e018      	b.n	8002082 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e013      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	429a      	cmp	r2, r3
 800206e:	d106      	bne.n	800207e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207a:	429a      	cmp	r2, r3
 800207c:	d001      	beq.n	8002082 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40021000 	.word	0x40021000
 8002090:	40007000 	.word	0x40007000
 8002094:	42420060 	.word	0x42420060

08002098 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0d0      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020ac:	4b6a      	ldr	r3, [pc, #424]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d910      	bls.n	80020dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ba:	4b67      	ldr	r3, [pc, #412]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f023 0207 	bic.w	r2, r3, #7
 80020c2:	4965      	ldr	r1, [pc, #404]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ca:	4b63      	ldr	r3, [pc, #396]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d001      	beq.n	80020dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0b8      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d020      	beq.n	800212a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020f4:	4b59      	ldr	r3, [pc, #356]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4a58      	ldr	r2, [pc, #352]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800210c:	4b53      	ldr	r3, [pc, #332]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4a52      	ldr	r2, [pc, #328]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002116:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002118:	4b50      	ldr	r3, [pc, #320]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	494d      	ldr	r1, [pc, #308]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	4313      	orrs	r3, r2
 8002128:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d040      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d107      	bne.n	800214e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213e:	4b47      	ldr	r3, [pc, #284]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d115      	bne.n	8002176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e07f      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d107      	bne.n	8002166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002156:	4b41      	ldr	r3, [pc, #260]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d109      	bne.n	8002176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e073      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002166:	4b3d      	ldr	r3, [pc, #244]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e06b      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002176:	4b39      	ldr	r3, [pc, #228]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f023 0203 	bic.w	r2, r3, #3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	4936      	ldr	r1, [pc, #216]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	4313      	orrs	r3, r2
 8002186:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002188:	f7ff f838 	bl	80011fc <HAL_GetTick>
 800218c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218e:	e00a      	b.n	80021a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002190:	f7ff f834 	bl	80011fc <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	f241 3288 	movw	r2, #5000	; 0x1388
 800219e:	4293      	cmp	r3, r2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e053      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a6:	4b2d      	ldr	r3, [pc, #180]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 020c 	and.w	r2, r3, #12
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d1eb      	bne.n	8002190 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021b8:	4b27      	ldr	r3, [pc, #156]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d210      	bcs.n	80021e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c6:	4b24      	ldr	r3, [pc, #144]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 0207 	bic.w	r2, r3, #7
 80021ce:	4922      	ldr	r1, [pc, #136]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d6:	4b20      	ldr	r3, [pc, #128]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d001      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e032      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d008      	beq.n	8002206 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4916      	ldr	r1, [pc, #88]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	4313      	orrs	r3, r2
 8002204:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d009      	beq.n	8002226 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002212:	4b12      	ldr	r3, [pc, #72]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	490e      	ldr	r1, [pc, #56]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	4313      	orrs	r3, r2
 8002224:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002226:	f000 f821 	bl	800226c <HAL_RCC_GetSysClockFreq>
 800222a:	4601      	mov	r1, r0
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <HAL_RCC_ClockConfig+0x1c8>)
 8002238:	5cd3      	ldrb	r3, [r2, r3]
 800223a:	fa21 f303 	lsr.w	r3, r1, r3
 800223e:	4a09      	ldr	r2, [pc, #36]	; (8002264 <HAL_RCC_ClockConfig+0x1cc>)
 8002240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <HAL_RCC_ClockConfig+0x1d0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe ff96 	bl	8001178 <HAL_InitTick>

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40022000 	.word	0x40022000
 800225c:	40021000 	.word	0x40021000
 8002260:	08003814 	.word	0x08003814
 8002264:	20000008 	.word	0x20000008
 8002268:	2000000c 	.word	0x2000000c

0800226c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800226c:	b490      	push	{r4, r7}
 800226e:	b08a      	sub	sp, #40	; 0x28
 8002270:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002272:	4b2a      	ldr	r3, [pc, #168]	; (800231c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002274:	1d3c      	adds	r4, r7, #4
 8002276:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800227c:	4b28      	ldr	r3, [pc, #160]	; (8002320 <HAL_RCC_GetSysClockFreq+0xb4>)
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002296:	4b23      	ldr	r3, [pc, #140]	; (8002324 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d002      	beq.n	80022ac <HAL_RCC_GetSysClockFreq+0x40>
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d003      	beq.n	80022b2 <HAL_RCC_GetSysClockFreq+0x46>
 80022aa:	e02d      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022ac:	4b1e      	ldr	r3, [pc, #120]	; (8002328 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022ae:	623b      	str	r3, [r7, #32]
      break;
 80022b0:	e02d      	b.n	800230e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	0c9b      	lsrs	r3, r3, #18
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022be:	4413      	add	r3, r2
 80022c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022c4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d013      	beq.n	80022f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022d0:	4b14      	ldr	r3, [pc, #80]	; (8002324 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	0c5b      	lsrs	r3, r3, #17
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022de:	4413      	add	r3, r2
 80022e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	4a0f      	ldr	r2, [pc, #60]	; (8002328 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022ea:	fb02 f203 	mul.w	r2, r2, r3
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
 80022f6:	e004      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	4a0c      	ldr	r2, [pc, #48]	; (800232c <HAL_RCC_GetSysClockFreq+0xc0>)
 80022fc:	fb02 f303 	mul.w	r3, r2, r3
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	623b      	str	r3, [r7, #32]
      break;
 8002306:	e002      	b.n	800230e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002308:	4b07      	ldr	r3, [pc, #28]	; (8002328 <HAL_RCC_GetSysClockFreq+0xbc>)
 800230a:	623b      	str	r3, [r7, #32]
      break;
 800230c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800230e:	6a3b      	ldr	r3, [r7, #32]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3728      	adds	r7, #40	; 0x28
 8002314:	46bd      	mov	sp, r7
 8002316:	bc90      	pop	{r4, r7}
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	08003800 	.word	0x08003800
 8002320:	08003810 	.word	0x08003810
 8002324:	40021000 	.word	0x40021000
 8002328:	007a1200 	.word	0x007a1200
 800232c:	003d0900 	.word	0x003d0900

08002330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002334:	4b02      	ldr	r3, [pc, #8]	; (8002340 <HAL_RCC_GetHCLKFreq+0x10>)
 8002336:	681b      	ldr	r3, [r3, #0]
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr
 8002340:	20000008 	.word	0x20000008

08002344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002348:	f7ff fff2 	bl	8002330 <HAL_RCC_GetHCLKFreq>
 800234c:	4601      	mov	r1, r0
 800234e:	4b05      	ldr	r3, [pc, #20]	; (8002364 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	0a1b      	lsrs	r3, r3, #8
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	4a03      	ldr	r2, [pc, #12]	; (8002368 <HAL_RCC_GetPCLK1Freq+0x24>)
 800235a:	5cd3      	ldrb	r3, [r2, r3]
 800235c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002360:	4618      	mov	r0, r3
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40021000 	.word	0x40021000
 8002368:	08003824 	.word	0x08003824

0800236c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002370:	f7ff ffde 	bl	8002330 <HAL_RCC_GetHCLKFreq>
 8002374:	4601      	mov	r1, r0
 8002376:	4b05      	ldr	r3, [pc, #20]	; (800238c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	0adb      	lsrs	r3, r3, #11
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	4a03      	ldr	r2, [pc, #12]	; (8002390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002382:	5cd3      	ldrb	r3, [r2, r3]
 8002384:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002388:	4618      	mov	r0, r3
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40021000 	.word	0x40021000
 8002390:	08003824 	.word	0x08003824

08002394 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800239c:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <RCC_Delay+0x34>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <RCC_Delay+0x38>)
 80023a2:	fba2 2303 	umull	r2, r3, r2, r3
 80023a6:	0a5b      	lsrs	r3, r3, #9
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	fb02 f303 	mul.w	r3, r2, r3
 80023ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023b0:	bf00      	nop
  }
  while (Delay --);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1e5a      	subs	r2, r3, #1
 80023b6:	60fa      	str	r2, [r7, #12]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f9      	bne.n	80023b0 <RCC_Delay+0x1c>
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	20000008 	.word	0x20000008
 80023cc:	10624dd3 	.word	0x10624dd3

080023d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d07d      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80023ec:	2300      	movs	r3, #0
 80023ee:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f0:	4b4f      	ldr	r3, [pc, #316]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10d      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fc:	4b4c      	ldr	r3, [pc, #304]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	4a4b      	ldr	r2, [pc, #300]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002406:	61d3      	str	r3, [r2, #28]
 8002408:	4b49      	ldr	r3, [pc, #292]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002414:	2301      	movs	r3, #1
 8002416:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002418:	4b46      	ldr	r3, [pc, #280]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002420:	2b00      	cmp	r3, #0
 8002422:	d118      	bne.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002424:	4b43      	ldr	r3, [pc, #268]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a42      	ldr	r2, [pc, #264]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800242a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002430:	f7fe fee4 	bl	80011fc <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002436:	e008      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002438:	f7fe fee0 	bl	80011fc <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	; 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e06d      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244a:	4b3a      	ldr	r3, [pc, #232]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002456:	4b36      	ldr	r3, [pc, #216]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800245e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d02e      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	429a      	cmp	r2, r3
 8002472:	d027      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002474:	4b2e      	ldr	r3, [pc, #184]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800247c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800247e:	4b2e      	ldr	r3, [pc, #184]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002480:	2201      	movs	r2, #1
 8002482:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002484:	4b2c      	ldr	r3, [pc, #176]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800248a:	4a29      	ldr	r2, [pc, #164]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d014      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249a:	f7fe feaf 	bl	80011fc <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a0:	e00a      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a2:	f7fe feab 	bl	80011fc <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e036      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b8:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0ee      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024c4:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4917      	ldr	r1, [pc, #92]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024d6:	7dfb      	ldrb	r3, [r7, #23]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d105      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024dc:	4b14      	ldr	r3, [pc, #80]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	4a13      	ldr	r2, [pc, #76]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d008      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024f4:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	490b      	ldr	r1, [pc, #44]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002502:	4313      	orrs	r3, r2
 8002504:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0310 	and.w	r3, r3, #16
 800250e:	2b00      	cmp	r3, #0
 8002510:	d008      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002512:	4b07      	ldr	r3, [pc, #28]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	4904      	ldr	r1, [pc, #16]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002520:	4313      	orrs	r3, r2
 8002522:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40021000 	.word	0x40021000
 8002534:	40007000 	.word	0x40007000
 8002538:	42420440 	.word	0x42420440

0800253c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e01d      	b.n	800258a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d106      	bne.n	8002568 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7fe fcc8 	bl	8000ef8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3304      	adds	r3, #4
 8002578:	4619      	mov	r1, r3
 800257a:	4610      	mov	r0, r2
 800257c:	f000 fa18 	bl	80029b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002592:	b480      	push	{r7}
 8002594:	b085      	sub	sp, #20
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68da      	ldr	r2, [r3, #12]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f042 0201 	orr.w	r2, r2, #1
 80025a8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2b06      	cmp	r3, #6
 80025ba:	d007      	beq.n	80025cc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0201 	orr.w	r2, r2, #1
 80025ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d122      	bne.n	8002634 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d11b      	bne.n	8002634 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 0202 	mvn.w	r2, #2
 8002604:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f9ad 	bl	800297a <HAL_TIM_IC_CaptureCallback>
 8002620:	e005      	b.n	800262e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f9a0 	bl	8002968 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f9af 	bl	800298c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	2b04      	cmp	r3, #4
 8002640:	d122      	bne.n	8002688 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b04      	cmp	r3, #4
 800264e:	d11b      	bne.n	8002688 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f06f 0204 	mvn.w	r2, #4
 8002658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2202      	movs	r2, #2
 800265e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f983 	bl	800297a <HAL_TIM_IC_CaptureCallback>
 8002674:	e005      	b.n	8002682 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f976 	bl	8002968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f985 	bl	800298c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b08      	cmp	r3, #8
 8002694:	d122      	bne.n	80026dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d11b      	bne.n	80026dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0208 	mvn.w	r2, #8
 80026ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2204      	movs	r2, #4
 80026b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f959 	bl	800297a <HAL_TIM_IC_CaptureCallback>
 80026c8:	e005      	b.n	80026d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f94c 	bl	8002968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f95b 	bl	800298c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	2b10      	cmp	r3, #16
 80026e8:	d122      	bne.n	8002730 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f003 0310 	and.w	r3, r3, #16
 80026f4:	2b10      	cmp	r3, #16
 80026f6:	d11b      	bne.n	8002730 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f06f 0210 	mvn.w	r2, #16
 8002700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2208      	movs	r2, #8
 8002706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f92f 	bl	800297a <HAL_TIM_IC_CaptureCallback>
 800271c:	e005      	b.n	800272a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f922 	bl	8002968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f931 	bl	800298c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b01      	cmp	r3, #1
 800273c:	d10e      	bne.n	800275c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b01      	cmp	r3, #1
 800274a:	d107      	bne.n	800275c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f06f 0201 	mvn.w	r2, #1
 8002754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f8fd 	bl	8002956 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002766:	2b80      	cmp	r3, #128	; 0x80
 8002768:	d10e      	bne.n	8002788 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002774:	2b80      	cmp	r3, #128	; 0x80
 8002776:	d107      	bne.n	8002788 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fa59 	bl	8002c3a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002792:	2b40      	cmp	r3, #64	; 0x40
 8002794:	d10e      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a0:	2b40      	cmp	r3, #64	; 0x40
 80027a2:	d107      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f8f5 	bl	800299e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f003 0320 	and.w	r3, r3, #32
 80027be:	2b20      	cmp	r3, #32
 80027c0:	d10e      	bne.n	80027e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f003 0320 	and.w	r3, r3, #32
 80027cc:	2b20      	cmp	r3, #32
 80027ce:	d107      	bne.n	80027e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0220 	mvn.w	r2, #32
 80027d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 fa24 	bl	8002c28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <HAL_TIM_ConfigClockSource+0x18>
 80027fc:	2302      	movs	r3, #2
 80027fe:	e0a6      	b.n	800294e <HAL_TIM_ConfigClockSource+0x166>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2202      	movs	r2, #2
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800281e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002826:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b40      	cmp	r3, #64	; 0x40
 8002836:	d067      	beq.n	8002908 <HAL_TIM_ConfigClockSource+0x120>
 8002838:	2b40      	cmp	r3, #64	; 0x40
 800283a:	d80b      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x6c>
 800283c:	2b10      	cmp	r3, #16
 800283e:	d073      	beq.n	8002928 <HAL_TIM_ConfigClockSource+0x140>
 8002840:	2b10      	cmp	r3, #16
 8002842:	d802      	bhi.n	800284a <HAL_TIM_ConfigClockSource+0x62>
 8002844:	2b00      	cmp	r3, #0
 8002846:	d06f      	beq.n	8002928 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002848:	e078      	b.n	800293c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800284a:	2b20      	cmp	r3, #32
 800284c:	d06c      	beq.n	8002928 <HAL_TIM_ConfigClockSource+0x140>
 800284e:	2b30      	cmp	r3, #48	; 0x30
 8002850:	d06a      	beq.n	8002928 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002852:	e073      	b.n	800293c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002854:	2b70      	cmp	r3, #112	; 0x70
 8002856:	d00d      	beq.n	8002874 <HAL_TIM_ConfigClockSource+0x8c>
 8002858:	2b70      	cmp	r3, #112	; 0x70
 800285a:	d804      	bhi.n	8002866 <HAL_TIM_ConfigClockSource+0x7e>
 800285c:	2b50      	cmp	r3, #80	; 0x50
 800285e:	d033      	beq.n	80028c8 <HAL_TIM_ConfigClockSource+0xe0>
 8002860:	2b60      	cmp	r3, #96	; 0x60
 8002862:	d041      	beq.n	80028e8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002864:	e06a      	b.n	800293c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800286a:	d066      	beq.n	800293a <HAL_TIM_ConfigClockSource+0x152>
 800286c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002870:	d017      	beq.n	80028a2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002872:	e063      	b.n	800293c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6818      	ldr	r0, [r3, #0]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	6899      	ldr	r1, [r3, #8]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f000 f96d 	bl	8002b62 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002896:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	609a      	str	r2, [r3, #8]
      break;
 80028a0:	e04c      	b.n	800293c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6818      	ldr	r0, [r3, #0]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	6899      	ldr	r1, [r3, #8]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f000 f956 	bl	8002b62 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028c4:	609a      	str	r2, [r3, #8]
      break;
 80028c6:	e039      	b.n	800293c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	6859      	ldr	r1, [r3, #4]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	461a      	mov	r2, r3
 80028d6:	f000 f8cd 	bl	8002a74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2150      	movs	r1, #80	; 0x50
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 f924 	bl	8002b2e <TIM_ITRx_SetConfig>
      break;
 80028e6:	e029      	b.n	800293c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6818      	ldr	r0, [r3, #0]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	6859      	ldr	r1, [r3, #4]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	461a      	mov	r2, r3
 80028f6:	f000 f8eb 	bl	8002ad0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2160      	movs	r1, #96	; 0x60
 8002900:	4618      	mov	r0, r3
 8002902:	f000 f914 	bl	8002b2e <TIM_ITRx_SetConfig>
      break;
 8002906:	e019      	b.n	800293c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	6859      	ldr	r1, [r3, #4]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	461a      	mov	r2, r3
 8002916:	f000 f8ad 	bl	8002a74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2140      	movs	r1, #64	; 0x40
 8002920:	4618      	mov	r0, r3
 8002922:	f000 f904 	bl	8002b2e <TIM_ITRx_SetConfig>
      break;
 8002926:	e009      	b.n	800293c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4619      	mov	r1, r3
 8002932:	4610      	mov	r0, r2
 8002934:	f000 f8fb 	bl	8002b2e <TIM_ITRx_SetConfig>
      break;
 8002938:	e000      	b.n	800293c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800293a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr

0800297a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr

0800299e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr

080029b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a29      	ldr	r2, [pc, #164]	; (8002a68 <TIM_Base_SetConfig+0xb8>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d00b      	beq.n	80029e0 <TIM_Base_SetConfig+0x30>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ce:	d007      	beq.n	80029e0 <TIM_Base_SetConfig+0x30>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a26      	ldr	r2, [pc, #152]	; (8002a6c <TIM_Base_SetConfig+0xbc>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d003      	beq.n	80029e0 <TIM_Base_SetConfig+0x30>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a25      	ldr	r2, [pc, #148]	; (8002a70 <TIM_Base_SetConfig+0xc0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d108      	bne.n	80029f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a1c      	ldr	r2, [pc, #112]	; (8002a68 <TIM_Base_SetConfig+0xb8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d00b      	beq.n	8002a12 <TIM_Base_SetConfig+0x62>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a00:	d007      	beq.n	8002a12 <TIM_Base_SetConfig+0x62>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a19      	ldr	r2, [pc, #100]	; (8002a6c <TIM_Base_SetConfig+0xbc>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d003      	beq.n	8002a12 <TIM_Base_SetConfig+0x62>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a18      	ldr	r2, [pc, #96]	; (8002a70 <TIM_Base_SetConfig+0xc0>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d108      	bne.n	8002a24 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a07      	ldr	r2, [pc, #28]	; (8002a68 <TIM_Base_SetConfig+0xb8>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d103      	bne.n	8002a58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	615a      	str	r2, [r3, #20]
}
 8002a5e:	bf00      	nop
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr
 8002a68:	40012c00 	.word	0x40012c00
 8002a6c:	40000400 	.word	0x40000400
 8002a70:	40000800 	.word	0x40000800

08002a74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	f023 0201 	bic.w	r2, r3, #1
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f023 030a 	bic.w	r3, r3, #10
 8002ab0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	621a      	str	r2, [r3, #32]
}
 8002ac6:	bf00      	nop
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	f023 0210 	bic.w	r2, r3, #16
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002afa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	031b      	lsls	r3, r3, #12
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	621a      	str	r2, [r3, #32]
}
 8002b24:	bf00      	nop
 8002b26:	371c      	adds	r7, #28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr

08002b2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b085      	sub	sp, #20
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f043 0307 	orr.w	r3, r3, #7
 8002b50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	609a      	str	r2, [r3, #8]
}
 8002b58:	bf00      	nop
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b087      	sub	sp, #28
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	60f8      	str	r0, [r7, #12]
 8002b6a:	60b9      	str	r1, [r7, #8]
 8002b6c:	607a      	str	r2, [r7, #4]
 8002b6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b7c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	021a      	lsls	r2, r3, #8
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	431a      	orrs	r2, r3
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	609a      	str	r2, [r3, #8]
}
 8002b96:	bf00      	nop
 8002b98:	371c      	adds	r7, #28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e032      	b.n	8002c1e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bf0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr

08002c28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr

08002c3a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e03f      	b.n	8002cde <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7fe f964 	bl	8000f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2224      	movs	r2, #36	; 0x24
 8002c7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f829 	bl	8002ce8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ca4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695a      	ldr	r2, [r3, #20]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d22:	f023 030c 	bic.w	r3, r3, #12
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6812      	ldr	r2, [r2, #0]
 8002d2a:	68f9      	ldr	r1, [r7, #12]
 8002d2c:	430b      	orrs	r3, r1
 8002d2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699a      	ldr	r2, [r3, #24]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a52      	ldr	r2, [pc, #328]	; (8002e94 <UART_SetConfig+0x1ac>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d14e      	bne.n	8002dee <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d50:	f7ff fb0c 	bl	800236c <HAL_RCC_GetPCLK2Freq>
 8002d54:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009a      	lsls	r2, r3, #2
 8002d60:	441a      	add	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6c:	4a4a      	ldr	r2, [pc, #296]	; (8002e98 <UART_SetConfig+0x1b0>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	0119      	lsls	r1, r3, #4
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009a      	lsls	r2, r3, #2
 8002d80:	441a      	add	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d8c:	4b42      	ldr	r3, [pc, #264]	; (8002e98 <UART_SetConfig+0x1b0>)
 8002d8e:	fba3 0302 	umull	r0, r3, r3, r2
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	2064      	movs	r0, #100	; 0x64
 8002d96:	fb00 f303 	mul.w	r3, r0, r3
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	3332      	adds	r3, #50	; 0x32
 8002da0:	4a3d      	ldr	r2, [pc, #244]	; (8002e98 <UART_SetConfig+0x1b0>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dac:	4419      	add	r1, r3
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	009a      	lsls	r2, r3, #2
 8002db8:	441a      	add	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dc4:	4b34      	ldr	r3, [pc, #208]	; (8002e98 <UART_SetConfig+0x1b0>)
 8002dc6:	fba3 0302 	umull	r0, r3, r3, r2
 8002dca:	095b      	lsrs	r3, r3, #5
 8002dcc:	2064      	movs	r0, #100	; 0x64
 8002dce:	fb00 f303 	mul.w	r3, r0, r3
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	011b      	lsls	r3, r3, #4
 8002dd6:	3332      	adds	r3, #50	; 0x32
 8002dd8:	4a2f      	ldr	r2, [pc, #188]	; (8002e98 <UART_SetConfig+0x1b0>)
 8002dda:	fba2 2303 	umull	r2, r3, r2, r3
 8002dde:	095b      	lsrs	r3, r3, #5
 8002de0:	f003 020f 	and.w	r2, r3, #15
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	440a      	add	r2, r1
 8002dea:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002dec:	e04d      	b.n	8002e8a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002dee:	f7ff faa9 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 8002df2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009a      	lsls	r2, r3, #2
 8002dfe:	441a      	add	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0a:	4a23      	ldr	r2, [pc, #140]	; (8002e98 <UART_SetConfig+0x1b0>)
 8002e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e10:	095b      	lsrs	r3, r3, #5
 8002e12:	0119      	lsls	r1, r3, #4
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	4613      	mov	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009a      	lsls	r2, r3, #2
 8002e1e:	441a      	add	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e2a:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <UART_SetConfig+0x1b0>)
 8002e2c:	fba3 0302 	umull	r0, r3, r3, r2
 8002e30:	095b      	lsrs	r3, r3, #5
 8002e32:	2064      	movs	r0, #100	; 0x64
 8002e34:	fb00 f303 	mul.w	r3, r0, r3
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	3332      	adds	r3, #50	; 0x32
 8002e3e:	4a16      	ldr	r2, [pc, #88]	; (8002e98 <UART_SetConfig+0x1b0>)
 8002e40:	fba2 2303 	umull	r2, r3, r2, r3
 8002e44:	095b      	lsrs	r3, r3, #5
 8002e46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e4a:	4419      	add	r1, r3
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	009a      	lsls	r2, r3, #2
 8002e56:	441a      	add	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e62:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <UART_SetConfig+0x1b0>)
 8002e64:	fba3 0302 	umull	r0, r3, r3, r2
 8002e68:	095b      	lsrs	r3, r3, #5
 8002e6a:	2064      	movs	r0, #100	; 0x64
 8002e6c:	fb00 f303 	mul.w	r3, r0, r3
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	3332      	adds	r3, #50	; 0x32
 8002e76:	4a08      	ldr	r2, [pc, #32]	; (8002e98 <UART_SetConfig+0x1b0>)
 8002e78:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7c:	095b      	lsrs	r3, r3, #5
 8002e7e:	f003 020f 	and.w	r2, r3, #15
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	440a      	add	r2, r1
 8002e88:	609a      	str	r2, [r3, #8]
}
 8002e8a:	bf00      	nop
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40013800 	.word	0x40013800
 8002e98:	51eb851f 	.word	0x51eb851f

08002e9c <__errno>:
 8002e9c:	4b01      	ldr	r3, [pc, #4]	; (8002ea4 <__errno+0x8>)
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	20000014 	.word	0x20000014

08002ea8 <__libc_init_array>:
 8002ea8:	b570      	push	{r4, r5, r6, lr}
 8002eaa:	2500      	movs	r5, #0
 8002eac:	4e0c      	ldr	r6, [pc, #48]	; (8002ee0 <__libc_init_array+0x38>)
 8002eae:	4c0d      	ldr	r4, [pc, #52]	; (8002ee4 <__libc_init_array+0x3c>)
 8002eb0:	1ba4      	subs	r4, r4, r6
 8002eb2:	10a4      	asrs	r4, r4, #2
 8002eb4:	42a5      	cmp	r5, r4
 8002eb6:	d109      	bne.n	8002ecc <__libc_init_array+0x24>
 8002eb8:	f000 fc34 	bl	8003724 <_init>
 8002ebc:	2500      	movs	r5, #0
 8002ebe:	4e0a      	ldr	r6, [pc, #40]	; (8002ee8 <__libc_init_array+0x40>)
 8002ec0:	4c0a      	ldr	r4, [pc, #40]	; (8002eec <__libc_init_array+0x44>)
 8002ec2:	1ba4      	subs	r4, r4, r6
 8002ec4:	10a4      	asrs	r4, r4, #2
 8002ec6:	42a5      	cmp	r5, r4
 8002ec8:	d105      	bne.n	8002ed6 <__libc_init_array+0x2e>
 8002eca:	bd70      	pop	{r4, r5, r6, pc}
 8002ecc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ed0:	4798      	blx	r3
 8002ed2:	3501      	adds	r5, #1
 8002ed4:	e7ee      	b.n	8002eb4 <__libc_init_array+0xc>
 8002ed6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002eda:	4798      	blx	r3
 8002edc:	3501      	adds	r5, #1
 8002ede:	e7f2      	b.n	8002ec6 <__libc_init_array+0x1e>
 8002ee0:	08003860 	.word	0x08003860
 8002ee4:	08003860 	.word	0x08003860
 8002ee8:	08003860 	.word	0x08003860
 8002eec:	08003864 	.word	0x08003864

08002ef0 <memset>:
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	4402      	add	r2, r0
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d100      	bne.n	8002efa <memset+0xa>
 8002ef8:	4770      	bx	lr
 8002efa:	f803 1b01 	strb.w	r1, [r3], #1
 8002efe:	e7f9      	b.n	8002ef4 <memset+0x4>

08002f00 <siprintf>:
 8002f00:	b40e      	push	{r1, r2, r3}
 8002f02:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f06:	b500      	push	{lr}
 8002f08:	b09c      	sub	sp, #112	; 0x70
 8002f0a:	ab1d      	add	r3, sp, #116	; 0x74
 8002f0c:	9002      	str	r0, [sp, #8]
 8002f0e:	9006      	str	r0, [sp, #24]
 8002f10:	9107      	str	r1, [sp, #28]
 8002f12:	9104      	str	r1, [sp, #16]
 8002f14:	4808      	ldr	r0, [pc, #32]	; (8002f38 <siprintf+0x38>)
 8002f16:	4909      	ldr	r1, [pc, #36]	; (8002f3c <siprintf+0x3c>)
 8002f18:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f1c:	9105      	str	r1, [sp, #20]
 8002f1e:	6800      	ldr	r0, [r0, #0]
 8002f20:	a902      	add	r1, sp, #8
 8002f22:	9301      	str	r3, [sp, #4]
 8002f24:	f000 f866 	bl	8002ff4 <_svfiprintf_r>
 8002f28:	2200      	movs	r2, #0
 8002f2a:	9b02      	ldr	r3, [sp, #8]
 8002f2c:	701a      	strb	r2, [r3, #0]
 8002f2e:	b01c      	add	sp, #112	; 0x70
 8002f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f34:	b003      	add	sp, #12
 8002f36:	4770      	bx	lr
 8002f38:	20000014 	.word	0x20000014
 8002f3c:	ffff0208 	.word	0xffff0208

08002f40 <__ssputs_r>:
 8002f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f44:	688e      	ldr	r6, [r1, #8]
 8002f46:	4682      	mov	sl, r0
 8002f48:	429e      	cmp	r6, r3
 8002f4a:	460c      	mov	r4, r1
 8002f4c:	4690      	mov	r8, r2
 8002f4e:	4699      	mov	r9, r3
 8002f50:	d837      	bhi.n	8002fc2 <__ssputs_r+0x82>
 8002f52:	898a      	ldrh	r2, [r1, #12]
 8002f54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f58:	d031      	beq.n	8002fbe <__ssputs_r+0x7e>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	6825      	ldr	r5, [r4, #0]
 8002f5e:	6909      	ldr	r1, [r1, #16]
 8002f60:	1a6f      	subs	r7, r5, r1
 8002f62:	6965      	ldr	r5, [r4, #20]
 8002f64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f68:	fb95 f5f3 	sdiv	r5, r5, r3
 8002f6c:	f109 0301 	add.w	r3, r9, #1
 8002f70:	443b      	add	r3, r7
 8002f72:	429d      	cmp	r5, r3
 8002f74:	bf38      	it	cc
 8002f76:	461d      	movcc	r5, r3
 8002f78:	0553      	lsls	r3, r2, #21
 8002f7a:	d530      	bpl.n	8002fde <__ssputs_r+0x9e>
 8002f7c:	4629      	mov	r1, r5
 8002f7e:	f000 fb37 	bl	80035f0 <_malloc_r>
 8002f82:	4606      	mov	r6, r0
 8002f84:	b950      	cbnz	r0, 8002f9c <__ssputs_r+0x5c>
 8002f86:	230c      	movs	r3, #12
 8002f88:	f04f 30ff 	mov.w	r0, #4294967295
 8002f8c:	f8ca 3000 	str.w	r3, [sl]
 8002f90:	89a3      	ldrh	r3, [r4, #12]
 8002f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f96:	81a3      	strh	r3, [r4, #12]
 8002f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f9c:	463a      	mov	r2, r7
 8002f9e:	6921      	ldr	r1, [r4, #16]
 8002fa0:	f000 fab6 	bl	8003510 <memcpy>
 8002fa4:	89a3      	ldrh	r3, [r4, #12]
 8002fa6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fae:	81a3      	strh	r3, [r4, #12]
 8002fb0:	6126      	str	r6, [r4, #16]
 8002fb2:	443e      	add	r6, r7
 8002fb4:	6026      	str	r6, [r4, #0]
 8002fb6:	464e      	mov	r6, r9
 8002fb8:	6165      	str	r5, [r4, #20]
 8002fba:	1bed      	subs	r5, r5, r7
 8002fbc:	60a5      	str	r5, [r4, #8]
 8002fbe:	454e      	cmp	r6, r9
 8002fc0:	d900      	bls.n	8002fc4 <__ssputs_r+0x84>
 8002fc2:	464e      	mov	r6, r9
 8002fc4:	4632      	mov	r2, r6
 8002fc6:	4641      	mov	r1, r8
 8002fc8:	6820      	ldr	r0, [r4, #0]
 8002fca:	f000 faac 	bl	8003526 <memmove>
 8002fce:	68a3      	ldr	r3, [r4, #8]
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	1b9b      	subs	r3, r3, r6
 8002fd4:	60a3      	str	r3, [r4, #8]
 8002fd6:	6823      	ldr	r3, [r4, #0]
 8002fd8:	441e      	add	r6, r3
 8002fda:	6026      	str	r6, [r4, #0]
 8002fdc:	e7dc      	b.n	8002f98 <__ssputs_r+0x58>
 8002fde:	462a      	mov	r2, r5
 8002fe0:	f000 fb60 	bl	80036a4 <_realloc_r>
 8002fe4:	4606      	mov	r6, r0
 8002fe6:	2800      	cmp	r0, #0
 8002fe8:	d1e2      	bne.n	8002fb0 <__ssputs_r+0x70>
 8002fea:	6921      	ldr	r1, [r4, #16]
 8002fec:	4650      	mov	r0, sl
 8002fee:	f000 fab3 	bl	8003558 <_free_r>
 8002ff2:	e7c8      	b.n	8002f86 <__ssputs_r+0x46>

08002ff4 <_svfiprintf_r>:
 8002ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ff8:	461d      	mov	r5, r3
 8002ffa:	898b      	ldrh	r3, [r1, #12]
 8002ffc:	b09d      	sub	sp, #116	; 0x74
 8002ffe:	061f      	lsls	r7, r3, #24
 8003000:	4680      	mov	r8, r0
 8003002:	460c      	mov	r4, r1
 8003004:	4616      	mov	r6, r2
 8003006:	d50f      	bpl.n	8003028 <_svfiprintf_r+0x34>
 8003008:	690b      	ldr	r3, [r1, #16]
 800300a:	b96b      	cbnz	r3, 8003028 <_svfiprintf_r+0x34>
 800300c:	2140      	movs	r1, #64	; 0x40
 800300e:	f000 faef 	bl	80035f0 <_malloc_r>
 8003012:	6020      	str	r0, [r4, #0]
 8003014:	6120      	str	r0, [r4, #16]
 8003016:	b928      	cbnz	r0, 8003024 <_svfiprintf_r+0x30>
 8003018:	230c      	movs	r3, #12
 800301a:	f8c8 3000 	str.w	r3, [r8]
 800301e:	f04f 30ff 	mov.w	r0, #4294967295
 8003022:	e0c8      	b.n	80031b6 <_svfiprintf_r+0x1c2>
 8003024:	2340      	movs	r3, #64	; 0x40
 8003026:	6163      	str	r3, [r4, #20]
 8003028:	2300      	movs	r3, #0
 800302a:	9309      	str	r3, [sp, #36]	; 0x24
 800302c:	2320      	movs	r3, #32
 800302e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003032:	2330      	movs	r3, #48	; 0x30
 8003034:	f04f 0b01 	mov.w	fp, #1
 8003038:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800303c:	9503      	str	r5, [sp, #12]
 800303e:	4637      	mov	r7, r6
 8003040:	463d      	mov	r5, r7
 8003042:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003046:	b10b      	cbz	r3, 800304c <_svfiprintf_r+0x58>
 8003048:	2b25      	cmp	r3, #37	; 0x25
 800304a:	d13e      	bne.n	80030ca <_svfiprintf_r+0xd6>
 800304c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003050:	d00b      	beq.n	800306a <_svfiprintf_r+0x76>
 8003052:	4653      	mov	r3, sl
 8003054:	4632      	mov	r2, r6
 8003056:	4621      	mov	r1, r4
 8003058:	4640      	mov	r0, r8
 800305a:	f7ff ff71 	bl	8002f40 <__ssputs_r>
 800305e:	3001      	adds	r0, #1
 8003060:	f000 80a4 	beq.w	80031ac <_svfiprintf_r+0x1b8>
 8003064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003066:	4453      	add	r3, sl
 8003068:	9309      	str	r3, [sp, #36]	; 0x24
 800306a:	783b      	ldrb	r3, [r7, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 809d 	beq.w	80031ac <_svfiprintf_r+0x1b8>
 8003072:	2300      	movs	r3, #0
 8003074:	f04f 32ff 	mov.w	r2, #4294967295
 8003078:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800307c:	9304      	str	r3, [sp, #16]
 800307e:	9307      	str	r3, [sp, #28]
 8003080:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003084:	931a      	str	r3, [sp, #104]	; 0x68
 8003086:	462f      	mov	r7, r5
 8003088:	2205      	movs	r2, #5
 800308a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800308e:	4850      	ldr	r0, [pc, #320]	; (80031d0 <_svfiprintf_r+0x1dc>)
 8003090:	f000 fa30 	bl	80034f4 <memchr>
 8003094:	9b04      	ldr	r3, [sp, #16]
 8003096:	b9d0      	cbnz	r0, 80030ce <_svfiprintf_r+0xda>
 8003098:	06d9      	lsls	r1, r3, #27
 800309a:	bf44      	itt	mi
 800309c:	2220      	movmi	r2, #32
 800309e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80030a2:	071a      	lsls	r2, r3, #28
 80030a4:	bf44      	itt	mi
 80030a6:	222b      	movmi	r2, #43	; 0x2b
 80030a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80030ac:	782a      	ldrb	r2, [r5, #0]
 80030ae:	2a2a      	cmp	r2, #42	; 0x2a
 80030b0:	d015      	beq.n	80030de <_svfiprintf_r+0xea>
 80030b2:	462f      	mov	r7, r5
 80030b4:	2000      	movs	r0, #0
 80030b6:	250a      	movs	r5, #10
 80030b8:	9a07      	ldr	r2, [sp, #28]
 80030ba:	4639      	mov	r1, r7
 80030bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030c0:	3b30      	subs	r3, #48	; 0x30
 80030c2:	2b09      	cmp	r3, #9
 80030c4:	d94d      	bls.n	8003162 <_svfiprintf_r+0x16e>
 80030c6:	b1b8      	cbz	r0, 80030f8 <_svfiprintf_r+0x104>
 80030c8:	e00f      	b.n	80030ea <_svfiprintf_r+0xf6>
 80030ca:	462f      	mov	r7, r5
 80030cc:	e7b8      	b.n	8003040 <_svfiprintf_r+0x4c>
 80030ce:	4a40      	ldr	r2, [pc, #256]	; (80031d0 <_svfiprintf_r+0x1dc>)
 80030d0:	463d      	mov	r5, r7
 80030d2:	1a80      	subs	r0, r0, r2
 80030d4:	fa0b f000 	lsl.w	r0, fp, r0
 80030d8:	4318      	orrs	r0, r3
 80030da:	9004      	str	r0, [sp, #16]
 80030dc:	e7d3      	b.n	8003086 <_svfiprintf_r+0x92>
 80030de:	9a03      	ldr	r2, [sp, #12]
 80030e0:	1d11      	adds	r1, r2, #4
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	9103      	str	r1, [sp, #12]
 80030e6:	2a00      	cmp	r2, #0
 80030e8:	db01      	blt.n	80030ee <_svfiprintf_r+0xfa>
 80030ea:	9207      	str	r2, [sp, #28]
 80030ec:	e004      	b.n	80030f8 <_svfiprintf_r+0x104>
 80030ee:	4252      	negs	r2, r2
 80030f0:	f043 0302 	orr.w	r3, r3, #2
 80030f4:	9207      	str	r2, [sp, #28]
 80030f6:	9304      	str	r3, [sp, #16]
 80030f8:	783b      	ldrb	r3, [r7, #0]
 80030fa:	2b2e      	cmp	r3, #46	; 0x2e
 80030fc:	d10c      	bne.n	8003118 <_svfiprintf_r+0x124>
 80030fe:	787b      	ldrb	r3, [r7, #1]
 8003100:	2b2a      	cmp	r3, #42	; 0x2a
 8003102:	d133      	bne.n	800316c <_svfiprintf_r+0x178>
 8003104:	9b03      	ldr	r3, [sp, #12]
 8003106:	3702      	adds	r7, #2
 8003108:	1d1a      	adds	r2, r3, #4
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	9203      	str	r2, [sp, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	bfb8      	it	lt
 8003112:	f04f 33ff 	movlt.w	r3, #4294967295
 8003116:	9305      	str	r3, [sp, #20]
 8003118:	4d2e      	ldr	r5, [pc, #184]	; (80031d4 <_svfiprintf_r+0x1e0>)
 800311a:	2203      	movs	r2, #3
 800311c:	7839      	ldrb	r1, [r7, #0]
 800311e:	4628      	mov	r0, r5
 8003120:	f000 f9e8 	bl	80034f4 <memchr>
 8003124:	b138      	cbz	r0, 8003136 <_svfiprintf_r+0x142>
 8003126:	2340      	movs	r3, #64	; 0x40
 8003128:	1b40      	subs	r0, r0, r5
 800312a:	fa03 f000 	lsl.w	r0, r3, r0
 800312e:	9b04      	ldr	r3, [sp, #16]
 8003130:	3701      	adds	r7, #1
 8003132:	4303      	orrs	r3, r0
 8003134:	9304      	str	r3, [sp, #16]
 8003136:	7839      	ldrb	r1, [r7, #0]
 8003138:	2206      	movs	r2, #6
 800313a:	4827      	ldr	r0, [pc, #156]	; (80031d8 <_svfiprintf_r+0x1e4>)
 800313c:	1c7e      	adds	r6, r7, #1
 800313e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003142:	f000 f9d7 	bl	80034f4 <memchr>
 8003146:	2800      	cmp	r0, #0
 8003148:	d038      	beq.n	80031bc <_svfiprintf_r+0x1c8>
 800314a:	4b24      	ldr	r3, [pc, #144]	; (80031dc <_svfiprintf_r+0x1e8>)
 800314c:	bb13      	cbnz	r3, 8003194 <_svfiprintf_r+0x1a0>
 800314e:	9b03      	ldr	r3, [sp, #12]
 8003150:	3307      	adds	r3, #7
 8003152:	f023 0307 	bic.w	r3, r3, #7
 8003156:	3308      	adds	r3, #8
 8003158:	9303      	str	r3, [sp, #12]
 800315a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800315c:	444b      	add	r3, r9
 800315e:	9309      	str	r3, [sp, #36]	; 0x24
 8003160:	e76d      	b.n	800303e <_svfiprintf_r+0x4a>
 8003162:	fb05 3202 	mla	r2, r5, r2, r3
 8003166:	2001      	movs	r0, #1
 8003168:	460f      	mov	r7, r1
 800316a:	e7a6      	b.n	80030ba <_svfiprintf_r+0xc6>
 800316c:	2300      	movs	r3, #0
 800316e:	250a      	movs	r5, #10
 8003170:	4619      	mov	r1, r3
 8003172:	3701      	adds	r7, #1
 8003174:	9305      	str	r3, [sp, #20]
 8003176:	4638      	mov	r0, r7
 8003178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800317c:	3a30      	subs	r2, #48	; 0x30
 800317e:	2a09      	cmp	r2, #9
 8003180:	d903      	bls.n	800318a <_svfiprintf_r+0x196>
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0c8      	beq.n	8003118 <_svfiprintf_r+0x124>
 8003186:	9105      	str	r1, [sp, #20]
 8003188:	e7c6      	b.n	8003118 <_svfiprintf_r+0x124>
 800318a:	fb05 2101 	mla	r1, r5, r1, r2
 800318e:	2301      	movs	r3, #1
 8003190:	4607      	mov	r7, r0
 8003192:	e7f0      	b.n	8003176 <_svfiprintf_r+0x182>
 8003194:	ab03      	add	r3, sp, #12
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	4622      	mov	r2, r4
 800319a:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <_svfiprintf_r+0x1ec>)
 800319c:	a904      	add	r1, sp, #16
 800319e:	4640      	mov	r0, r8
 80031a0:	f3af 8000 	nop.w
 80031a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80031a8:	4681      	mov	r9, r0
 80031aa:	d1d6      	bne.n	800315a <_svfiprintf_r+0x166>
 80031ac:	89a3      	ldrh	r3, [r4, #12]
 80031ae:	065b      	lsls	r3, r3, #25
 80031b0:	f53f af35 	bmi.w	800301e <_svfiprintf_r+0x2a>
 80031b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031b6:	b01d      	add	sp, #116	; 0x74
 80031b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031bc:	ab03      	add	r3, sp, #12
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	4622      	mov	r2, r4
 80031c2:	4b07      	ldr	r3, [pc, #28]	; (80031e0 <_svfiprintf_r+0x1ec>)
 80031c4:	a904      	add	r1, sp, #16
 80031c6:	4640      	mov	r0, r8
 80031c8:	f000 f882 	bl	80032d0 <_printf_i>
 80031cc:	e7ea      	b.n	80031a4 <_svfiprintf_r+0x1b0>
 80031ce:	bf00      	nop
 80031d0:	0800382c 	.word	0x0800382c
 80031d4:	08003832 	.word	0x08003832
 80031d8:	08003836 	.word	0x08003836
 80031dc:	00000000 	.word	0x00000000
 80031e0:	08002f41 	.word	0x08002f41

080031e4 <_printf_common>:
 80031e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031e8:	4691      	mov	r9, r2
 80031ea:	461f      	mov	r7, r3
 80031ec:	688a      	ldr	r2, [r1, #8]
 80031ee:	690b      	ldr	r3, [r1, #16]
 80031f0:	4606      	mov	r6, r0
 80031f2:	4293      	cmp	r3, r2
 80031f4:	bfb8      	it	lt
 80031f6:	4613      	movlt	r3, r2
 80031f8:	f8c9 3000 	str.w	r3, [r9]
 80031fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003200:	460c      	mov	r4, r1
 8003202:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003206:	b112      	cbz	r2, 800320e <_printf_common+0x2a>
 8003208:	3301      	adds	r3, #1
 800320a:	f8c9 3000 	str.w	r3, [r9]
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	0699      	lsls	r1, r3, #26
 8003212:	bf42      	ittt	mi
 8003214:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003218:	3302      	addmi	r3, #2
 800321a:	f8c9 3000 	strmi.w	r3, [r9]
 800321e:	6825      	ldr	r5, [r4, #0]
 8003220:	f015 0506 	ands.w	r5, r5, #6
 8003224:	d107      	bne.n	8003236 <_printf_common+0x52>
 8003226:	f104 0a19 	add.w	sl, r4, #25
 800322a:	68e3      	ldr	r3, [r4, #12]
 800322c:	f8d9 2000 	ldr.w	r2, [r9]
 8003230:	1a9b      	subs	r3, r3, r2
 8003232:	42ab      	cmp	r3, r5
 8003234:	dc29      	bgt.n	800328a <_printf_common+0xa6>
 8003236:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800323a:	6822      	ldr	r2, [r4, #0]
 800323c:	3300      	adds	r3, #0
 800323e:	bf18      	it	ne
 8003240:	2301      	movne	r3, #1
 8003242:	0692      	lsls	r2, r2, #26
 8003244:	d42e      	bmi.n	80032a4 <_printf_common+0xc0>
 8003246:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800324a:	4639      	mov	r1, r7
 800324c:	4630      	mov	r0, r6
 800324e:	47c0      	blx	r8
 8003250:	3001      	adds	r0, #1
 8003252:	d021      	beq.n	8003298 <_printf_common+0xb4>
 8003254:	6823      	ldr	r3, [r4, #0]
 8003256:	68e5      	ldr	r5, [r4, #12]
 8003258:	f003 0306 	and.w	r3, r3, #6
 800325c:	2b04      	cmp	r3, #4
 800325e:	bf18      	it	ne
 8003260:	2500      	movne	r5, #0
 8003262:	f8d9 2000 	ldr.w	r2, [r9]
 8003266:	f04f 0900 	mov.w	r9, #0
 800326a:	bf08      	it	eq
 800326c:	1aad      	subeq	r5, r5, r2
 800326e:	68a3      	ldr	r3, [r4, #8]
 8003270:	6922      	ldr	r2, [r4, #16]
 8003272:	bf08      	it	eq
 8003274:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003278:	4293      	cmp	r3, r2
 800327a:	bfc4      	itt	gt
 800327c:	1a9b      	subgt	r3, r3, r2
 800327e:	18ed      	addgt	r5, r5, r3
 8003280:	341a      	adds	r4, #26
 8003282:	454d      	cmp	r5, r9
 8003284:	d11a      	bne.n	80032bc <_printf_common+0xd8>
 8003286:	2000      	movs	r0, #0
 8003288:	e008      	b.n	800329c <_printf_common+0xb8>
 800328a:	2301      	movs	r3, #1
 800328c:	4652      	mov	r2, sl
 800328e:	4639      	mov	r1, r7
 8003290:	4630      	mov	r0, r6
 8003292:	47c0      	blx	r8
 8003294:	3001      	adds	r0, #1
 8003296:	d103      	bne.n	80032a0 <_printf_common+0xbc>
 8003298:	f04f 30ff 	mov.w	r0, #4294967295
 800329c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032a0:	3501      	adds	r5, #1
 80032a2:	e7c2      	b.n	800322a <_printf_common+0x46>
 80032a4:	2030      	movs	r0, #48	; 0x30
 80032a6:	18e1      	adds	r1, r4, r3
 80032a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032b2:	4422      	add	r2, r4
 80032b4:	3302      	adds	r3, #2
 80032b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032ba:	e7c4      	b.n	8003246 <_printf_common+0x62>
 80032bc:	2301      	movs	r3, #1
 80032be:	4622      	mov	r2, r4
 80032c0:	4639      	mov	r1, r7
 80032c2:	4630      	mov	r0, r6
 80032c4:	47c0      	blx	r8
 80032c6:	3001      	adds	r0, #1
 80032c8:	d0e6      	beq.n	8003298 <_printf_common+0xb4>
 80032ca:	f109 0901 	add.w	r9, r9, #1
 80032ce:	e7d8      	b.n	8003282 <_printf_common+0x9e>

080032d0 <_printf_i>:
 80032d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80032d8:	460c      	mov	r4, r1
 80032da:	7e09      	ldrb	r1, [r1, #24]
 80032dc:	b085      	sub	sp, #20
 80032de:	296e      	cmp	r1, #110	; 0x6e
 80032e0:	4617      	mov	r7, r2
 80032e2:	4606      	mov	r6, r0
 80032e4:	4698      	mov	r8, r3
 80032e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80032e8:	f000 80b3 	beq.w	8003452 <_printf_i+0x182>
 80032ec:	d822      	bhi.n	8003334 <_printf_i+0x64>
 80032ee:	2963      	cmp	r1, #99	; 0x63
 80032f0:	d036      	beq.n	8003360 <_printf_i+0x90>
 80032f2:	d80a      	bhi.n	800330a <_printf_i+0x3a>
 80032f4:	2900      	cmp	r1, #0
 80032f6:	f000 80b9 	beq.w	800346c <_printf_i+0x19c>
 80032fa:	2958      	cmp	r1, #88	; 0x58
 80032fc:	f000 8083 	beq.w	8003406 <_printf_i+0x136>
 8003300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003304:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003308:	e032      	b.n	8003370 <_printf_i+0xa0>
 800330a:	2964      	cmp	r1, #100	; 0x64
 800330c:	d001      	beq.n	8003312 <_printf_i+0x42>
 800330e:	2969      	cmp	r1, #105	; 0x69
 8003310:	d1f6      	bne.n	8003300 <_printf_i+0x30>
 8003312:	6820      	ldr	r0, [r4, #0]
 8003314:	6813      	ldr	r3, [r2, #0]
 8003316:	0605      	lsls	r5, r0, #24
 8003318:	f103 0104 	add.w	r1, r3, #4
 800331c:	d52a      	bpl.n	8003374 <_printf_i+0xa4>
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6011      	str	r1, [r2, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	da03      	bge.n	800332e <_printf_i+0x5e>
 8003326:	222d      	movs	r2, #45	; 0x2d
 8003328:	425b      	negs	r3, r3
 800332a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800332e:	486f      	ldr	r0, [pc, #444]	; (80034ec <_printf_i+0x21c>)
 8003330:	220a      	movs	r2, #10
 8003332:	e039      	b.n	80033a8 <_printf_i+0xd8>
 8003334:	2973      	cmp	r1, #115	; 0x73
 8003336:	f000 809d 	beq.w	8003474 <_printf_i+0x1a4>
 800333a:	d808      	bhi.n	800334e <_printf_i+0x7e>
 800333c:	296f      	cmp	r1, #111	; 0x6f
 800333e:	d020      	beq.n	8003382 <_printf_i+0xb2>
 8003340:	2970      	cmp	r1, #112	; 0x70
 8003342:	d1dd      	bne.n	8003300 <_printf_i+0x30>
 8003344:	6823      	ldr	r3, [r4, #0]
 8003346:	f043 0320 	orr.w	r3, r3, #32
 800334a:	6023      	str	r3, [r4, #0]
 800334c:	e003      	b.n	8003356 <_printf_i+0x86>
 800334e:	2975      	cmp	r1, #117	; 0x75
 8003350:	d017      	beq.n	8003382 <_printf_i+0xb2>
 8003352:	2978      	cmp	r1, #120	; 0x78
 8003354:	d1d4      	bne.n	8003300 <_printf_i+0x30>
 8003356:	2378      	movs	r3, #120	; 0x78
 8003358:	4865      	ldr	r0, [pc, #404]	; (80034f0 <_printf_i+0x220>)
 800335a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800335e:	e055      	b.n	800340c <_printf_i+0x13c>
 8003360:	6813      	ldr	r3, [r2, #0]
 8003362:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003366:	1d19      	adds	r1, r3, #4
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6011      	str	r1, [r2, #0]
 800336c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003370:	2301      	movs	r3, #1
 8003372:	e08c      	b.n	800348e <_printf_i+0x1be>
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f010 0f40 	tst.w	r0, #64	; 0x40
 800337a:	6011      	str	r1, [r2, #0]
 800337c:	bf18      	it	ne
 800337e:	b21b      	sxthne	r3, r3
 8003380:	e7cf      	b.n	8003322 <_printf_i+0x52>
 8003382:	6813      	ldr	r3, [r2, #0]
 8003384:	6825      	ldr	r5, [r4, #0]
 8003386:	1d18      	adds	r0, r3, #4
 8003388:	6010      	str	r0, [r2, #0]
 800338a:	0628      	lsls	r0, r5, #24
 800338c:	d501      	bpl.n	8003392 <_printf_i+0xc2>
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	e002      	b.n	8003398 <_printf_i+0xc8>
 8003392:	0668      	lsls	r0, r5, #25
 8003394:	d5fb      	bpl.n	800338e <_printf_i+0xbe>
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	296f      	cmp	r1, #111	; 0x6f
 800339a:	bf14      	ite	ne
 800339c:	220a      	movne	r2, #10
 800339e:	2208      	moveq	r2, #8
 80033a0:	4852      	ldr	r0, [pc, #328]	; (80034ec <_printf_i+0x21c>)
 80033a2:	2100      	movs	r1, #0
 80033a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033a8:	6865      	ldr	r5, [r4, #4]
 80033aa:	2d00      	cmp	r5, #0
 80033ac:	60a5      	str	r5, [r4, #8]
 80033ae:	f2c0 8095 	blt.w	80034dc <_printf_i+0x20c>
 80033b2:	6821      	ldr	r1, [r4, #0]
 80033b4:	f021 0104 	bic.w	r1, r1, #4
 80033b8:	6021      	str	r1, [r4, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d13d      	bne.n	800343a <_printf_i+0x16a>
 80033be:	2d00      	cmp	r5, #0
 80033c0:	f040 808e 	bne.w	80034e0 <_printf_i+0x210>
 80033c4:	4665      	mov	r5, ip
 80033c6:	2a08      	cmp	r2, #8
 80033c8:	d10b      	bne.n	80033e2 <_printf_i+0x112>
 80033ca:	6823      	ldr	r3, [r4, #0]
 80033cc:	07db      	lsls	r3, r3, #31
 80033ce:	d508      	bpl.n	80033e2 <_printf_i+0x112>
 80033d0:	6923      	ldr	r3, [r4, #16]
 80033d2:	6862      	ldr	r2, [r4, #4]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	bfde      	ittt	le
 80033d8:	2330      	movle	r3, #48	; 0x30
 80033da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80033de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80033e2:	ebac 0305 	sub.w	r3, ip, r5
 80033e6:	6123      	str	r3, [r4, #16]
 80033e8:	f8cd 8000 	str.w	r8, [sp]
 80033ec:	463b      	mov	r3, r7
 80033ee:	aa03      	add	r2, sp, #12
 80033f0:	4621      	mov	r1, r4
 80033f2:	4630      	mov	r0, r6
 80033f4:	f7ff fef6 	bl	80031e4 <_printf_common>
 80033f8:	3001      	adds	r0, #1
 80033fa:	d14d      	bne.n	8003498 <_printf_i+0x1c8>
 80033fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003400:	b005      	add	sp, #20
 8003402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003406:	4839      	ldr	r0, [pc, #228]	; (80034ec <_printf_i+0x21c>)
 8003408:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800340c:	6813      	ldr	r3, [r2, #0]
 800340e:	6821      	ldr	r1, [r4, #0]
 8003410:	1d1d      	adds	r5, r3, #4
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6015      	str	r5, [r2, #0]
 8003416:	060a      	lsls	r2, r1, #24
 8003418:	d50b      	bpl.n	8003432 <_printf_i+0x162>
 800341a:	07ca      	lsls	r2, r1, #31
 800341c:	bf44      	itt	mi
 800341e:	f041 0120 	orrmi.w	r1, r1, #32
 8003422:	6021      	strmi	r1, [r4, #0]
 8003424:	b91b      	cbnz	r3, 800342e <_printf_i+0x15e>
 8003426:	6822      	ldr	r2, [r4, #0]
 8003428:	f022 0220 	bic.w	r2, r2, #32
 800342c:	6022      	str	r2, [r4, #0]
 800342e:	2210      	movs	r2, #16
 8003430:	e7b7      	b.n	80033a2 <_printf_i+0xd2>
 8003432:	064d      	lsls	r5, r1, #25
 8003434:	bf48      	it	mi
 8003436:	b29b      	uxthmi	r3, r3
 8003438:	e7ef      	b.n	800341a <_printf_i+0x14a>
 800343a:	4665      	mov	r5, ip
 800343c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003440:	fb02 3311 	mls	r3, r2, r1, r3
 8003444:	5cc3      	ldrb	r3, [r0, r3]
 8003446:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800344a:	460b      	mov	r3, r1
 800344c:	2900      	cmp	r1, #0
 800344e:	d1f5      	bne.n	800343c <_printf_i+0x16c>
 8003450:	e7b9      	b.n	80033c6 <_printf_i+0xf6>
 8003452:	6813      	ldr	r3, [r2, #0]
 8003454:	6825      	ldr	r5, [r4, #0]
 8003456:	1d18      	adds	r0, r3, #4
 8003458:	6961      	ldr	r1, [r4, #20]
 800345a:	6010      	str	r0, [r2, #0]
 800345c:	0628      	lsls	r0, r5, #24
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	d501      	bpl.n	8003466 <_printf_i+0x196>
 8003462:	6019      	str	r1, [r3, #0]
 8003464:	e002      	b.n	800346c <_printf_i+0x19c>
 8003466:	066a      	lsls	r2, r5, #25
 8003468:	d5fb      	bpl.n	8003462 <_printf_i+0x192>
 800346a:	8019      	strh	r1, [r3, #0]
 800346c:	2300      	movs	r3, #0
 800346e:	4665      	mov	r5, ip
 8003470:	6123      	str	r3, [r4, #16]
 8003472:	e7b9      	b.n	80033e8 <_printf_i+0x118>
 8003474:	6813      	ldr	r3, [r2, #0]
 8003476:	1d19      	adds	r1, r3, #4
 8003478:	6011      	str	r1, [r2, #0]
 800347a:	681d      	ldr	r5, [r3, #0]
 800347c:	6862      	ldr	r2, [r4, #4]
 800347e:	2100      	movs	r1, #0
 8003480:	4628      	mov	r0, r5
 8003482:	f000 f837 	bl	80034f4 <memchr>
 8003486:	b108      	cbz	r0, 800348c <_printf_i+0x1bc>
 8003488:	1b40      	subs	r0, r0, r5
 800348a:	6060      	str	r0, [r4, #4]
 800348c:	6863      	ldr	r3, [r4, #4]
 800348e:	6123      	str	r3, [r4, #16]
 8003490:	2300      	movs	r3, #0
 8003492:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003496:	e7a7      	b.n	80033e8 <_printf_i+0x118>
 8003498:	6923      	ldr	r3, [r4, #16]
 800349a:	462a      	mov	r2, r5
 800349c:	4639      	mov	r1, r7
 800349e:	4630      	mov	r0, r6
 80034a0:	47c0      	blx	r8
 80034a2:	3001      	adds	r0, #1
 80034a4:	d0aa      	beq.n	80033fc <_printf_i+0x12c>
 80034a6:	6823      	ldr	r3, [r4, #0]
 80034a8:	079b      	lsls	r3, r3, #30
 80034aa:	d413      	bmi.n	80034d4 <_printf_i+0x204>
 80034ac:	68e0      	ldr	r0, [r4, #12]
 80034ae:	9b03      	ldr	r3, [sp, #12]
 80034b0:	4298      	cmp	r0, r3
 80034b2:	bfb8      	it	lt
 80034b4:	4618      	movlt	r0, r3
 80034b6:	e7a3      	b.n	8003400 <_printf_i+0x130>
 80034b8:	2301      	movs	r3, #1
 80034ba:	464a      	mov	r2, r9
 80034bc:	4639      	mov	r1, r7
 80034be:	4630      	mov	r0, r6
 80034c0:	47c0      	blx	r8
 80034c2:	3001      	adds	r0, #1
 80034c4:	d09a      	beq.n	80033fc <_printf_i+0x12c>
 80034c6:	3501      	adds	r5, #1
 80034c8:	68e3      	ldr	r3, [r4, #12]
 80034ca:	9a03      	ldr	r2, [sp, #12]
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	42ab      	cmp	r3, r5
 80034d0:	dcf2      	bgt.n	80034b8 <_printf_i+0x1e8>
 80034d2:	e7eb      	b.n	80034ac <_printf_i+0x1dc>
 80034d4:	2500      	movs	r5, #0
 80034d6:	f104 0919 	add.w	r9, r4, #25
 80034da:	e7f5      	b.n	80034c8 <_printf_i+0x1f8>
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1ac      	bne.n	800343a <_printf_i+0x16a>
 80034e0:	7803      	ldrb	r3, [r0, #0]
 80034e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034ea:	e76c      	b.n	80033c6 <_printf_i+0xf6>
 80034ec:	0800383d 	.word	0x0800383d
 80034f0:	0800384e 	.word	0x0800384e

080034f4 <memchr>:
 80034f4:	b510      	push	{r4, lr}
 80034f6:	b2c9      	uxtb	r1, r1
 80034f8:	4402      	add	r2, r0
 80034fa:	4290      	cmp	r0, r2
 80034fc:	4603      	mov	r3, r0
 80034fe:	d101      	bne.n	8003504 <memchr+0x10>
 8003500:	2300      	movs	r3, #0
 8003502:	e003      	b.n	800350c <memchr+0x18>
 8003504:	781c      	ldrb	r4, [r3, #0]
 8003506:	3001      	adds	r0, #1
 8003508:	428c      	cmp	r4, r1
 800350a:	d1f6      	bne.n	80034fa <memchr+0x6>
 800350c:	4618      	mov	r0, r3
 800350e:	bd10      	pop	{r4, pc}

08003510 <memcpy>:
 8003510:	b510      	push	{r4, lr}
 8003512:	1e43      	subs	r3, r0, #1
 8003514:	440a      	add	r2, r1
 8003516:	4291      	cmp	r1, r2
 8003518:	d100      	bne.n	800351c <memcpy+0xc>
 800351a:	bd10      	pop	{r4, pc}
 800351c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003520:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003524:	e7f7      	b.n	8003516 <memcpy+0x6>

08003526 <memmove>:
 8003526:	4288      	cmp	r0, r1
 8003528:	b510      	push	{r4, lr}
 800352a:	eb01 0302 	add.w	r3, r1, r2
 800352e:	d807      	bhi.n	8003540 <memmove+0x1a>
 8003530:	1e42      	subs	r2, r0, #1
 8003532:	4299      	cmp	r1, r3
 8003534:	d00a      	beq.n	800354c <memmove+0x26>
 8003536:	f811 4b01 	ldrb.w	r4, [r1], #1
 800353a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800353e:	e7f8      	b.n	8003532 <memmove+0xc>
 8003540:	4283      	cmp	r3, r0
 8003542:	d9f5      	bls.n	8003530 <memmove+0xa>
 8003544:	1881      	adds	r1, r0, r2
 8003546:	1ad2      	subs	r2, r2, r3
 8003548:	42d3      	cmn	r3, r2
 800354a:	d100      	bne.n	800354e <memmove+0x28>
 800354c:	bd10      	pop	{r4, pc}
 800354e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003552:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003556:	e7f7      	b.n	8003548 <memmove+0x22>

08003558 <_free_r>:
 8003558:	b538      	push	{r3, r4, r5, lr}
 800355a:	4605      	mov	r5, r0
 800355c:	2900      	cmp	r1, #0
 800355e:	d043      	beq.n	80035e8 <_free_r+0x90>
 8003560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003564:	1f0c      	subs	r4, r1, #4
 8003566:	2b00      	cmp	r3, #0
 8003568:	bfb8      	it	lt
 800356a:	18e4      	addlt	r4, r4, r3
 800356c:	f000 f8d0 	bl	8003710 <__malloc_lock>
 8003570:	4a1e      	ldr	r2, [pc, #120]	; (80035ec <_free_r+0x94>)
 8003572:	6813      	ldr	r3, [r2, #0]
 8003574:	4610      	mov	r0, r2
 8003576:	b933      	cbnz	r3, 8003586 <_free_r+0x2e>
 8003578:	6063      	str	r3, [r4, #4]
 800357a:	6014      	str	r4, [r2, #0]
 800357c:	4628      	mov	r0, r5
 800357e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003582:	f000 b8c6 	b.w	8003712 <__malloc_unlock>
 8003586:	42a3      	cmp	r3, r4
 8003588:	d90b      	bls.n	80035a2 <_free_r+0x4a>
 800358a:	6821      	ldr	r1, [r4, #0]
 800358c:	1862      	adds	r2, r4, r1
 800358e:	4293      	cmp	r3, r2
 8003590:	bf01      	itttt	eq
 8003592:	681a      	ldreq	r2, [r3, #0]
 8003594:	685b      	ldreq	r3, [r3, #4]
 8003596:	1852      	addeq	r2, r2, r1
 8003598:	6022      	streq	r2, [r4, #0]
 800359a:	6063      	str	r3, [r4, #4]
 800359c:	6004      	str	r4, [r0, #0]
 800359e:	e7ed      	b.n	800357c <_free_r+0x24>
 80035a0:	4613      	mov	r3, r2
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	b10a      	cbz	r2, 80035aa <_free_r+0x52>
 80035a6:	42a2      	cmp	r2, r4
 80035a8:	d9fa      	bls.n	80035a0 <_free_r+0x48>
 80035aa:	6819      	ldr	r1, [r3, #0]
 80035ac:	1858      	adds	r0, r3, r1
 80035ae:	42a0      	cmp	r0, r4
 80035b0:	d10b      	bne.n	80035ca <_free_r+0x72>
 80035b2:	6820      	ldr	r0, [r4, #0]
 80035b4:	4401      	add	r1, r0
 80035b6:	1858      	adds	r0, r3, r1
 80035b8:	4282      	cmp	r2, r0
 80035ba:	6019      	str	r1, [r3, #0]
 80035bc:	d1de      	bne.n	800357c <_free_r+0x24>
 80035be:	6810      	ldr	r0, [r2, #0]
 80035c0:	6852      	ldr	r2, [r2, #4]
 80035c2:	4401      	add	r1, r0
 80035c4:	6019      	str	r1, [r3, #0]
 80035c6:	605a      	str	r2, [r3, #4]
 80035c8:	e7d8      	b.n	800357c <_free_r+0x24>
 80035ca:	d902      	bls.n	80035d2 <_free_r+0x7a>
 80035cc:	230c      	movs	r3, #12
 80035ce:	602b      	str	r3, [r5, #0]
 80035d0:	e7d4      	b.n	800357c <_free_r+0x24>
 80035d2:	6820      	ldr	r0, [r4, #0]
 80035d4:	1821      	adds	r1, r4, r0
 80035d6:	428a      	cmp	r2, r1
 80035d8:	bf01      	itttt	eq
 80035da:	6811      	ldreq	r1, [r2, #0]
 80035dc:	6852      	ldreq	r2, [r2, #4]
 80035de:	1809      	addeq	r1, r1, r0
 80035e0:	6021      	streq	r1, [r4, #0]
 80035e2:	6062      	str	r2, [r4, #4]
 80035e4:	605c      	str	r4, [r3, #4]
 80035e6:	e7c9      	b.n	800357c <_free_r+0x24>
 80035e8:	bd38      	pop	{r3, r4, r5, pc}
 80035ea:	bf00      	nop
 80035ec:	200000a0 	.word	0x200000a0

080035f0 <_malloc_r>:
 80035f0:	b570      	push	{r4, r5, r6, lr}
 80035f2:	1ccd      	adds	r5, r1, #3
 80035f4:	f025 0503 	bic.w	r5, r5, #3
 80035f8:	3508      	adds	r5, #8
 80035fa:	2d0c      	cmp	r5, #12
 80035fc:	bf38      	it	cc
 80035fe:	250c      	movcc	r5, #12
 8003600:	2d00      	cmp	r5, #0
 8003602:	4606      	mov	r6, r0
 8003604:	db01      	blt.n	800360a <_malloc_r+0x1a>
 8003606:	42a9      	cmp	r1, r5
 8003608:	d903      	bls.n	8003612 <_malloc_r+0x22>
 800360a:	230c      	movs	r3, #12
 800360c:	6033      	str	r3, [r6, #0]
 800360e:	2000      	movs	r0, #0
 8003610:	bd70      	pop	{r4, r5, r6, pc}
 8003612:	f000 f87d 	bl	8003710 <__malloc_lock>
 8003616:	4a21      	ldr	r2, [pc, #132]	; (800369c <_malloc_r+0xac>)
 8003618:	6814      	ldr	r4, [r2, #0]
 800361a:	4621      	mov	r1, r4
 800361c:	b991      	cbnz	r1, 8003644 <_malloc_r+0x54>
 800361e:	4c20      	ldr	r4, [pc, #128]	; (80036a0 <_malloc_r+0xb0>)
 8003620:	6823      	ldr	r3, [r4, #0]
 8003622:	b91b      	cbnz	r3, 800362c <_malloc_r+0x3c>
 8003624:	4630      	mov	r0, r6
 8003626:	f000 f863 	bl	80036f0 <_sbrk_r>
 800362a:	6020      	str	r0, [r4, #0]
 800362c:	4629      	mov	r1, r5
 800362e:	4630      	mov	r0, r6
 8003630:	f000 f85e 	bl	80036f0 <_sbrk_r>
 8003634:	1c43      	adds	r3, r0, #1
 8003636:	d124      	bne.n	8003682 <_malloc_r+0x92>
 8003638:	230c      	movs	r3, #12
 800363a:	4630      	mov	r0, r6
 800363c:	6033      	str	r3, [r6, #0]
 800363e:	f000 f868 	bl	8003712 <__malloc_unlock>
 8003642:	e7e4      	b.n	800360e <_malloc_r+0x1e>
 8003644:	680b      	ldr	r3, [r1, #0]
 8003646:	1b5b      	subs	r3, r3, r5
 8003648:	d418      	bmi.n	800367c <_malloc_r+0x8c>
 800364a:	2b0b      	cmp	r3, #11
 800364c:	d90f      	bls.n	800366e <_malloc_r+0x7e>
 800364e:	600b      	str	r3, [r1, #0]
 8003650:	18cc      	adds	r4, r1, r3
 8003652:	50cd      	str	r5, [r1, r3]
 8003654:	4630      	mov	r0, r6
 8003656:	f000 f85c 	bl	8003712 <__malloc_unlock>
 800365a:	f104 000b 	add.w	r0, r4, #11
 800365e:	1d23      	adds	r3, r4, #4
 8003660:	f020 0007 	bic.w	r0, r0, #7
 8003664:	1ac3      	subs	r3, r0, r3
 8003666:	d0d3      	beq.n	8003610 <_malloc_r+0x20>
 8003668:	425a      	negs	r2, r3
 800366a:	50e2      	str	r2, [r4, r3]
 800366c:	e7d0      	b.n	8003610 <_malloc_r+0x20>
 800366e:	684b      	ldr	r3, [r1, #4]
 8003670:	428c      	cmp	r4, r1
 8003672:	bf16      	itet	ne
 8003674:	6063      	strne	r3, [r4, #4]
 8003676:	6013      	streq	r3, [r2, #0]
 8003678:	460c      	movne	r4, r1
 800367a:	e7eb      	b.n	8003654 <_malloc_r+0x64>
 800367c:	460c      	mov	r4, r1
 800367e:	6849      	ldr	r1, [r1, #4]
 8003680:	e7cc      	b.n	800361c <_malloc_r+0x2c>
 8003682:	1cc4      	adds	r4, r0, #3
 8003684:	f024 0403 	bic.w	r4, r4, #3
 8003688:	42a0      	cmp	r0, r4
 800368a:	d005      	beq.n	8003698 <_malloc_r+0xa8>
 800368c:	1a21      	subs	r1, r4, r0
 800368e:	4630      	mov	r0, r6
 8003690:	f000 f82e 	bl	80036f0 <_sbrk_r>
 8003694:	3001      	adds	r0, #1
 8003696:	d0cf      	beq.n	8003638 <_malloc_r+0x48>
 8003698:	6025      	str	r5, [r4, #0]
 800369a:	e7db      	b.n	8003654 <_malloc_r+0x64>
 800369c:	200000a0 	.word	0x200000a0
 80036a0:	200000a4 	.word	0x200000a4

080036a4 <_realloc_r>:
 80036a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a6:	4607      	mov	r7, r0
 80036a8:	4614      	mov	r4, r2
 80036aa:	460e      	mov	r6, r1
 80036ac:	b921      	cbnz	r1, 80036b8 <_realloc_r+0x14>
 80036ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80036b2:	4611      	mov	r1, r2
 80036b4:	f7ff bf9c 	b.w	80035f0 <_malloc_r>
 80036b8:	b922      	cbnz	r2, 80036c4 <_realloc_r+0x20>
 80036ba:	f7ff ff4d 	bl	8003558 <_free_r>
 80036be:	4625      	mov	r5, r4
 80036c0:	4628      	mov	r0, r5
 80036c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036c4:	f000 f826 	bl	8003714 <_malloc_usable_size_r>
 80036c8:	42a0      	cmp	r0, r4
 80036ca:	d20f      	bcs.n	80036ec <_realloc_r+0x48>
 80036cc:	4621      	mov	r1, r4
 80036ce:	4638      	mov	r0, r7
 80036d0:	f7ff ff8e 	bl	80035f0 <_malloc_r>
 80036d4:	4605      	mov	r5, r0
 80036d6:	2800      	cmp	r0, #0
 80036d8:	d0f2      	beq.n	80036c0 <_realloc_r+0x1c>
 80036da:	4631      	mov	r1, r6
 80036dc:	4622      	mov	r2, r4
 80036de:	f7ff ff17 	bl	8003510 <memcpy>
 80036e2:	4631      	mov	r1, r6
 80036e4:	4638      	mov	r0, r7
 80036e6:	f7ff ff37 	bl	8003558 <_free_r>
 80036ea:	e7e9      	b.n	80036c0 <_realloc_r+0x1c>
 80036ec:	4635      	mov	r5, r6
 80036ee:	e7e7      	b.n	80036c0 <_realloc_r+0x1c>

080036f0 <_sbrk_r>:
 80036f0:	b538      	push	{r3, r4, r5, lr}
 80036f2:	2300      	movs	r3, #0
 80036f4:	4c05      	ldr	r4, [pc, #20]	; (800370c <_sbrk_r+0x1c>)
 80036f6:	4605      	mov	r5, r0
 80036f8:	4608      	mov	r0, r1
 80036fa:	6023      	str	r3, [r4, #0]
 80036fc:	f7fd fca0 	bl	8001040 <_sbrk>
 8003700:	1c43      	adds	r3, r0, #1
 8003702:	d102      	bne.n	800370a <_sbrk_r+0x1a>
 8003704:	6823      	ldr	r3, [r4, #0]
 8003706:	b103      	cbz	r3, 800370a <_sbrk_r+0x1a>
 8003708:	602b      	str	r3, [r5, #0]
 800370a:	bd38      	pop	{r3, r4, r5, pc}
 800370c:	20000160 	.word	0x20000160

08003710 <__malloc_lock>:
 8003710:	4770      	bx	lr

08003712 <__malloc_unlock>:
 8003712:	4770      	bx	lr

08003714 <_malloc_usable_size_r>:
 8003714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003718:	1f18      	subs	r0, r3, #4
 800371a:	2b00      	cmp	r3, #0
 800371c:	bfbc      	itt	lt
 800371e:	580b      	ldrlt	r3, [r1, r0]
 8003720:	18c0      	addlt	r0, r0, r3
 8003722:	4770      	bx	lr

08003724 <_init>:
 8003724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003726:	bf00      	nop
 8003728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800372a:	bc08      	pop	{r3}
 800372c:	469e      	mov	lr, r3
 800372e:	4770      	bx	lr

08003730 <_fini>:
 8003730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003732:	bf00      	nop
 8003734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003736:	bc08      	pop	{r3}
 8003738:	469e      	mov	lr, r3
 800373a:	4770      	bx	lr
